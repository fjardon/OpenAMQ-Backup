@echo off
:-
:-  Boom builder for GSL 4.0c19
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=4.0c19
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [gsl]: The IBASE variable is not set.             Please set it to the location where GSL should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    echo boom I: [gsl]: Building GSL...
    if "!MSVCDir!"=="" set MSVCDir=C:\Program Files\Microsoft Visual Studio\VC98
    if not exist "!MSVCDir!\bin" (
        echo boom E: [gsl]: Cannot find MSVC compiler in !MSVCdir!.
        echo boom E: [gsl]: Please set MSVCDir environment variable to VC98 directory.
        set _exception=1
        goto :eof
    )
    set INCDIR=
    set LIBDIR=
    if "!BOOM_TRACE!"=="1" (
        set MY_COPTS=-v
    ) else (
        set MY_COPTS=-q
    )
    if not "!_LOCAL_BASE!"=="" (
        set MY_COPTS=!MY_COPTS! -li !_LOCAL_BASE!\include -ll !_LOCAL_BASE!\lib
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! gsl
    verify>nul
    call c !MY_COPTS! gsl
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! gsl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! testpars
    verify>nul
    call c !MY_COPTS! testpars
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! testpars' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggobjt
    verify>nul
    call c !MY_COPTS! ggobjt
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggobjt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggcomm
    verify>nul
    call c !MY_COPTS! ggcomm
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggcomm' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggscop
    verify>nul
    call c !MY_COPTS! ggscop
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggscop' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggcode
    verify>nul
    call c !MY_COPTS! ggcode
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggcode' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggcodem
    verify>nul
    call c !MY_COPTS! ggcodem
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggcodem' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggpars
    verify>nul
    call c !MY_COPTS! ggpars
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggpars' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggparsm
    verify>nul
    call c !MY_COPTS! ggparsm
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggparsm' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggconv
    verify>nul
    call c !MY_COPTS! ggconv
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggconv' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggdiag
    verify>nul
    call c !MY_COPTS! ggdiag
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggdiag' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggenvt
    verify>nul
    call c !MY_COPTS! ggenvt
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggenvt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggfile
    verify>nul
    call c !MY_COPTS! ggfile
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggfile' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! gggsl
    verify>nul
    call c !MY_COPTS! gggsl
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! gggsl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggmath
    verify>nul
    call c !MY_COPTS! ggmath
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggmath' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggpcre
    verify>nul
    call c !MY_COPTS! ggpcre
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggpcre' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggproc
    verify>nul
    call c !MY_COPTS! ggproc
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggproc' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggscrp
    verify>nul
    call c !MY_COPTS! ggscrp
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggscrp' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggsock
    verify>nul
    call c !MY_COPTS! ggsock
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggsock' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggstrn
    verify>nul
    call c !MY_COPTS! ggstrn
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggstrn' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggsymb
    verify>nul
    call c !MY_COPTS! ggsymb
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggsymb' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggthrd
    verify>nul
    call c !MY_COPTS! ggthrd
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggthrd' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggtime
    verify>nul
    call c !MY_COPTS! ggtime
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggtime' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! ggxml
    verify>nul
    call c !MY_COPTS! ggxml
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! ggxml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggobjt
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggobjt
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggobjt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggcomm
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggcomm
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggcomm' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggscop
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggscop
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggscop' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggcode
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggcode
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggcode' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggcodem
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggcodem
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggcodem' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggpars
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggpars
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggpars' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggparsm
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggparsm
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggparsm' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggconv
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggconv
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggconv' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggdiag
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggdiag
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggdiag' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggenvt
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggenvt
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggenvt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggfile
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggfile
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggfile' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib gggsl
    verify>nul
    call c !MY_COPTS! -r libgsl.lib gggsl
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib gggsl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggmath
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggmath
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggmath' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggpcre
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggpcre
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggpcre' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggproc
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggproc
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggproc' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggscrp
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggscrp
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggscrp' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggsock
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggsock
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggsock' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggstrn
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggstrn
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggstrn' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggsymb
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggsymb
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggsymb' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggthrd
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggthrd
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggthrd' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggtime
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggtime
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggtime' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libgsl.lib ggxml
    verify>nul
    call c !MY_COPTS! -r libgsl.lib ggxml
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -r libgsl.lib ggxml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L gsl
    verify>nul
    call c !MY_COPTS! -L gsl
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -L gsl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L testpars
    verify>nul
    call c !MY_COPTS! -L testpars
    if errorlevel 1 (
        echo boom E: [gsl]: 'c !MY_COPTS! -L testpars' failed - stop.
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist release.txt echo release.txt>>_package.lst
    if exist version.h echo version.h>>_package.lst
    if exist gsl.c echo gsl.c>>_package.lst
    if exist testpars.c echo testpars.c>>_package.lst
    if exist gsl.l echo gsl.l>>_package.lst
    if exist ggcode.xml echo ggcode.xml>>_package.lst
    if exist ggpars.xml echo ggpars.xml>>_package.lst
    if exist gghead.h echo gghead.h>>_package.lst
    if exist ggpriv.h echo ggpriv.h>>_package.lst
    if exist ggfunc.inc echo ggfunc.inc>>_package.lst
    if exist ggobjt.c echo ggobjt.c>>_package.lst
    if exist ggcomm.c echo ggcomm.c>>_package.lst
    if exist ggscop.c echo ggscop.c>>_package.lst
    if exist ggconv.gxl echo ggconv.gxl>>_package.lst
    if exist ggdiag.gxl echo ggdiag.gxl>>_package.lst
    if exist ggenvt.gxl echo ggenvt.gxl>>_package.lst
    if exist ggfile.gxl echo ggfile.gxl>>_package.lst
    if exist gggsl.gxl echo gggsl.gxl>>_package.lst
    if exist ggmath.gxl echo ggmath.gxl>>_package.lst
    if exist ggpcre.gxl echo ggpcre.gxl>>_package.lst
    if exist ggproc.gxl echo ggproc.gxl>>_package.lst
    if exist ggscrp.gxl echo ggscrp.gxl>>_package.lst
    if exist ggsock.gxl echo ggsock.gxl>>_package.lst
    if exist ggstrn.gxl echo ggstrn.gxl>>_package.lst
    if exist ggsymb.gxl echo ggsymb.gxl>>_package.lst
    if exist ggthrd.gxl echo ggthrd.gxl>>_package.lst
    if exist ggtime.gxl echo ggtime.gxl>>_package.lst
    if exist ggxml.gxl echo ggxml.gxl>>_package.lst
    if exist ggobjt.gsl echo ggobjt.gsl>>_package.lst
    if exist console.gsl echo console.gsl>>_package.lst
    if exist echod.gsl echo echod.gsl>>_package.lst
    if exist ggdoc.gsl echo ggdoc.gsl>>_package.lst
    if exist ggmacro.gsl echo ggmacro.gsl>>_package.lst
    if exist ggreport.gsl echo ggreport.gsl>>_package.lst
    if exist testall.gsl echo testall.gsl>>_package.lst
    if exist testchi2.gsl echo testchi2.gsl>>_package.lst
    if exist testconv.gsl echo testconv.gsl>>_package.lst
    if exist testdate.gsl echo testdate.gsl>>_package.lst
    if exist testdir.gsl echo testdir.gsl>>_package.lst
    if exist testecho.gsl echo testecho.gsl>>_package.lst
    if exist testfile.gsl echo testfile.gsl>>_package.lst
    if exist testmath.gsl echo testmath.gsl>>_package.lst
    if exist testpcre.gsl echo testpcre.gsl>>_package.lst
    if exist testscope.gsl echo testscope.gsl>>_package.lst
    if exist testsort.gsl echo testsort.gsl>>_package.lst
    if exist teststr.gsl echo teststr.gsl>>_package.lst
    if exist testzip.gsl echo testzip.gsl>>_package.lst
    if exist gsldoc.txt echo gsldoc.txt>>_package.lst
    if exist prelude.pdl echo prelude.pdl>>_package.lst
    if exist license.gpl echo license.gpl>>_package.lst
    if exist project.pdl echo project.pdl>>_package.lst
    if exist readme.txt echo readme.txt>>_package.lst
    if exist gsl.i echo gsl.i>>_package.lst
    if exist gsl.d echo gsl.d>>_package.lst
    if exist ggcode.l echo ggcode.l>>_package.lst
    if exist ggcode.i echo ggcode.i>>_package.lst
    if exist ggcode.d echo ggcode.d>>_package.lst
    if exist ggcode.c echo ggcode.c>>_package.lst
    if exist ggcode.h echo ggcode.h>>_package.lst
    if exist ggcodem.c echo ggcodem.c>>_package.lst
    if exist ggcodem.h echo ggcodem.h>>_package.lst
    if exist ggpars.l echo ggpars.l>>_package.lst
    if exist ggpars.i echo ggpars.i>>_package.lst
    if exist ggpars.d echo ggpars.d>>_package.lst
    if exist ggpars.c echo ggpars.c>>_package.lst
    if exist ggpars.h echo ggpars.h>>_package.lst
    if exist ggparsm.c echo ggparsm.c>>_package.lst
    if exist ggparsm.h echo ggparsm.h>>_package.lst
    if exist ggobjt.h echo ggobjt.h>>_package.lst
    if exist ggcomm.h echo ggcomm.h>>_package.lst
    if exist ggscop.h echo ggscop.h>>_package.lst
    if exist ggconv.c echo ggconv.c>>_package.lst
    if exist ggconv.h echo ggconv.h>>_package.lst
    if exist ggdiag.c echo ggdiag.c>>_package.lst
    if exist ggdiag.h echo ggdiag.h>>_package.lst
    if exist ggenvt.c echo ggenvt.c>>_package.lst
    if exist ggenvt.h echo ggenvt.h>>_package.lst
    if exist ggfile.c echo ggfile.c>>_package.lst
    if exist ggfile.h echo ggfile.h>>_package.lst
    if exist gggsl.c echo gggsl.c>>_package.lst
    if exist gggsl.h echo gggsl.h>>_package.lst
    if exist gggsl.l echo gggsl.l>>_package.lst
    if exist gggsl.i echo gggsl.i>>_package.lst
    if exist gggsl.d echo gggsl.d>>_package.lst
    if exist ggmath.c echo ggmath.c>>_package.lst
    if exist ggmath.h echo ggmath.h>>_package.lst
    if exist ggpcre.c echo ggpcre.c>>_package.lst
    if exist ggpcre.h echo ggpcre.h>>_package.lst
    if exist ggproc.c echo ggproc.c>>_package.lst
    if exist ggproc.h echo ggproc.h>>_package.lst
    if exist ggscrp.c echo ggscrp.c>>_package.lst
    if exist ggscrp.h echo ggscrp.h>>_package.lst
    if exist ggscrp.l echo ggscrp.l>>_package.lst
    if exist ggscrp.i echo ggscrp.i>>_package.lst
    if exist ggscrp.d echo ggscrp.d>>_package.lst
    if exist ggsock.c echo ggsock.c>>_package.lst
    if exist ggsock.h echo ggsock.h>>_package.lst
    if exist ggsock.l echo ggsock.l>>_package.lst
    if exist ggsock.i echo ggsock.i>>_package.lst
    if exist ggsock.d echo ggsock.d>>_package.lst
    if exist ggstrn.c echo ggstrn.c>>_package.lst
    if exist ggstrn.h echo ggstrn.h>>_package.lst
    if exist ggsymb.c echo ggsymb.c>>_package.lst
    if exist ggsymb.h echo ggsymb.h>>_package.lst
    if exist ggthrd.c echo ggthrd.c>>_package.lst
    if exist ggthrd.h echo ggthrd.h>>_package.lst
    if exist ggthrd.l echo ggthrd.l>>_package.lst
    if exist ggthrd.i echo ggthrd.i>>_package.lst
    if exist ggthrd.d echo ggthrd.d>>_package.lst
    if exist ggtime.c echo ggtime.c>>_package.lst
    if exist ggtime.h echo ggtime.h>>_package.lst
    if exist ggxml.c echo ggxml.c>>_package.lst
    if exist ggxml.h echo ggxml.h>>_package.lst
    if exist gsl.h echo gsl.h>>_package.lst
    if exist stamp_generate echo stamp_generate>>_package.lst
    if exist configure echo configure>>_package.lst
    if exist Makefile.unix echo Makefile.unix>>_package.lst
    if exist boomake echo boomake>>_package.lst
    if exist configure.bat echo configure.bat>>_package.lst
    if exist Makefile.win32 echo Makefile.win32>>_package.lst
    if exist boomake.bat echo boomake.bat>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [gsl]: Building gsl-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d gsl-!MY_VERSION!
    if exist  gsl-!MY_VERSION!-src.zip del gsl-!MY_VERSION!-src.zip
    zip -rmq gsl-!MY_VERSION!-src.zip gsl-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist release.txt (
        echo boom E: [gsl]: release.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.c (
        echo boom E: [gsl]: gsl.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpars.c (
        echo boom E: [gsl]: testpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.l (
        echo boom E: [gsl]: gsl.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.c (
        echo boom E: [gsl]: ggscop.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.gxl (
        echo boom E: [gsl]: ggconv.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.gxl (
        echo boom E: [gsl]: ggdiag.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.gxl (
        echo boom E: [gsl]: ggenvt.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.gxl (
        echo boom E: [gsl]: ggfile.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.gxl (
        echo boom E: [gsl]: gggsl.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.gxl (
        echo boom E: [gsl]: ggmath.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.gxl (
        echo boom E: [gsl]: ggpcre.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.gxl (
        echo boom E: [gsl]: ggproc.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.gxl (
        echo boom E: [gsl]: ggscrp.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.gxl (
        echo boom E: [gsl]: ggsock.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.gxl (
        echo boom E: [gsl]: ggstrn.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.gxl (
        echo boom E: [gsl]: ggsymb.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.gxl (
        echo boom E: [gsl]: ggthrd.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.gxl (
        echo boom E: [gsl]: ggtime.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.gxl (
        echo boom E: [gsl]: ggxml.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist echod.gsl (
        echo boom E: [gsl]: echod.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdoc.gsl (
        echo boom E: [gsl]: ggdoc.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.gsl (
        echo boom E: [gsl]: testall.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testchi2.gsl (
        echo boom E: [gsl]: testchi2.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.gsl (
        echo boom E: [gsl]: testconv.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.gsl (
        echo boom E: [gsl]: testdate.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.gsl (
        echo boom E: [gsl]: testdir.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testecho.gsl (
        echo boom E: [gsl]: testecho.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.gsl (
        echo boom E: [gsl]: testfile.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmath.gsl (
        echo boom E: [gsl]: testmath.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpcre.gsl (
        echo boom E: [gsl]: testpcre.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testscope.gsl (
        echo boom E: [gsl]: testscope.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsort.gsl (
        echo boom E: [gsl]: testsort.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.gsl (
        echo boom E: [gsl]: teststr.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testzip.gsl (
        echo boom E: [gsl]: testzip.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.i (
        echo boom E: [gsl]: gsl.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.d (
        echo boom E: [gsl]: gsl.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.i (
        echo boom E: [gsl]: ggcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.d (
        echo boom E: [gsl]: ggcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.c (
        echo boom E: [gsl]: ggcodem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.i (
        echo boom E: [gsl]: ggpars.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.d (
        echo boom E: [gsl]: ggpars.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.c (
        echo boom E: [gsl]: ggparsm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.h (
        echo boom E: [gsl]: ggscop.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.c (
        echo boom E: [gsl]: ggconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.c (
        echo boom E: [gsl]: ggdiag.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.h (
        echo boom E: [gsl]: ggdiag.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.c (
        echo boom E: [gsl]: ggenvt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.c (
        echo boom E: [gsl]: ggfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.c (
        echo boom E: [gsl]: gggsl.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.h (
        echo boom E: [gsl]: gggsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.l (
        echo boom E: [gsl]: gggsl.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.i (
        echo boom E: [gsl]: gggsl.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.d (
        echo boom E: [gsl]: gggsl.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.c (
        echo boom E: [gsl]: ggmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.c (
        echo boom E: [gsl]: ggpcre.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.c (
        echo boom E: [gsl]: ggproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.c (
        echo boom E: [gsl]: ggscrp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.l (
        echo boom E: [gsl]: ggscrp.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.i (
        echo boom E: [gsl]: ggscrp.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.d (
        echo boom E: [gsl]: ggscrp.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.c (
        echo boom E: [gsl]: ggsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.l (
        echo boom E: [gsl]: ggsock.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.i (
        echo boom E: [gsl]: ggsock.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.d (
        echo boom E: [gsl]: ggsock.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.c (
        echo boom E: [gsl]: ggstrn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.c (
        echo boom E: [gsl]: ggsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.h (
        echo boom E: [gsl]: ggsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.c (
        echo boom E: [gsl]: ggthrd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.l (
        echo boom E: [gsl]: ggthrd.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.i (
        echo boom E: [gsl]: ggthrd.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.d (
        echo boom E: [gsl]: ggthrd.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.c (
        echo boom E: [gsl]: ggtime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.c (
        echo boom E: [gsl]: ggxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.h (
        echo boom E: [gsl]: ggxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.h (
        echo boom E: [gsl]: gsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [gsl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [gsl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [gsl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [gsl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [gsl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist release.txt (
        echo boom E: [gsl]: release.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.exe (
        echo boom E: [gsl]: gsl.exe is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libgsl.lib (
        echo boom E: [gsl]: libgsl.lib is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.h (
        echo boom E: [gsl]: ggdiag.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.h (
        echo boom E: [gsl]: gggsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.h (
        echo boom E: [gsl]: ggsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.h (
        echo boom E: [gsl]: ggxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.h (
        echo boom E: [gsl]: gsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist release.txt (
        echo boom E: [gsl]: release.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.c (
        echo boom E: [gsl]: gsl.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpars.c (
        echo boom E: [gsl]: testpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.l (
        echo boom E: [gsl]: gsl.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.c (
        echo boom E: [gsl]: ggscop.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.gxl (
        echo boom E: [gsl]: ggconv.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.gxl (
        echo boom E: [gsl]: ggdiag.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.gxl (
        echo boom E: [gsl]: ggenvt.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.gxl (
        echo boom E: [gsl]: ggfile.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.gxl (
        echo boom E: [gsl]: gggsl.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.gxl (
        echo boom E: [gsl]: ggmath.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.gxl (
        echo boom E: [gsl]: ggpcre.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.gxl (
        echo boom E: [gsl]: ggproc.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.gxl (
        echo boom E: [gsl]: ggscrp.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.gxl (
        echo boom E: [gsl]: ggsock.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.gxl (
        echo boom E: [gsl]: ggstrn.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.gxl (
        echo boom E: [gsl]: ggsymb.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.gxl (
        echo boom E: [gsl]: ggthrd.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.gxl (
        echo boom E: [gsl]: ggtime.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.gxl (
        echo boom E: [gsl]: ggxml.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist echod.gsl (
        echo boom E: [gsl]: echod.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdoc.gsl (
        echo boom E: [gsl]: ggdoc.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.gsl (
        echo boom E: [gsl]: testall.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testchi2.gsl (
        echo boom E: [gsl]: testchi2.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.gsl (
        echo boom E: [gsl]: testconv.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.gsl (
        echo boom E: [gsl]: testdate.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.gsl (
        echo boom E: [gsl]: testdir.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testecho.gsl (
        echo boom E: [gsl]: testecho.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.gsl (
        echo boom E: [gsl]: testfile.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmath.gsl (
        echo boom E: [gsl]: testmath.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpcre.gsl (
        echo boom E: [gsl]: testpcre.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testscope.gsl (
        echo boom E: [gsl]: testscope.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsort.gsl (
        echo boom E: [gsl]: testsort.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.gsl (
        echo boom E: [gsl]: teststr.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testzip.gsl (
        echo boom E: [gsl]: testzip.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.h (
        echo boom E: [gsl]: ggscop.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [gsl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [gsl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [gsl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [gsl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist release.txt (
        echo boom E: [gsl]: release.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.c (
        echo boom E: [gsl]: gsl.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpars.c (
        echo boom E: [gsl]: testpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.l (
        echo boom E: [gsl]: gsl.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.c (
        echo boom E: [gsl]: ggscop.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.gxl (
        echo boom E: [gsl]: ggconv.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.gxl (
        echo boom E: [gsl]: ggdiag.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.gxl (
        echo boom E: [gsl]: ggenvt.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.gxl (
        echo boom E: [gsl]: ggfile.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.gxl (
        echo boom E: [gsl]: gggsl.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.gxl (
        echo boom E: [gsl]: ggmath.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.gxl (
        echo boom E: [gsl]: ggpcre.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.gxl (
        echo boom E: [gsl]: ggproc.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.gxl (
        echo boom E: [gsl]: ggscrp.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.gxl (
        echo boom E: [gsl]: ggsock.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.gxl (
        echo boom E: [gsl]: ggstrn.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.gxl (
        echo boom E: [gsl]: ggsymb.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.gxl (
        echo boom E: [gsl]: ggthrd.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.gxl (
        echo boom E: [gsl]: ggtime.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.gxl (
        echo boom E: [gsl]: ggxml.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist echod.gsl (
        echo boom E: [gsl]: echod.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdoc.gsl (
        echo boom E: [gsl]: ggdoc.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.gsl (
        echo boom E: [gsl]: testall.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testchi2.gsl (
        echo boom E: [gsl]: testchi2.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.gsl (
        echo boom E: [gsl]: testconv.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.gsl (
        echo boom E: [gsl]: testdate.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.gsl (
        echo boom E: [gsl]: testdir.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testecho.gsl (
        echo boom E: [gsl]: testecho.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.gsl (
        echo boom E: [gsl]: testfile.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmath.gsl (
        echo boom E: [gsl]: testmath.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testpcre.gsl (
        echo boom E: [gsl]: testpcre.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testscope.gsl (
        echo boom E: [gsl]: testscope.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsort.gsl (
        echo boom E: [gsl]: testsort.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.gsl (
        echo boom E: [gsl]: teststr.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testzip.gsl (
        echo boom E: [gsl]: testzip.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.i (
        echo boom E: [gsl]: gsl.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.d (
        echo boom E: [gsl]: gsl.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.i (
        echo boom E: [gsl]: ggcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.d (
        echo boom E: [gsl]: ggcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.c (
        echo boom E: [gsl]: ggcodem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.i (
        echo boom E: [gsl]: ggpars.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.d (
        echo boom E: [gsl]: ggpars.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.c (
        echo boom E: [gsl]: ggparsm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscop.h (
        echo boom E: [gsl]: ggscop.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.c (
        echo boom E: [gsl]: ggconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.c (
        echo boom E: [gsl]: ggdiag.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdiag.h (
        echo boom E: [gsl]: ggdiag.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.c (
        echo boom E: [gsl]: ggenvt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.c (
        echo boom E: [gsl]: ggfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.c (
        echo boom E: [gsl]: gggsl.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.h (
        echo boom E: [gsl]: gggsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.l (
        echo boom E: [gsl]: gggsl.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.i (
        echo boom E: [gsl]: gggsl.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gggsl.d (
        echo boom E: [gsl]: gggsl.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.c (
        echo boom E: [gsl]: ggmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.c (
        echo boom E: [gsl]: ggpcre.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.c (
        echo boom E: [gsl]: ggproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.c (
        echo boom E: [gsl]: ggscrp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.l (
        echo boom E: [gsl]: ggscrp.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.i (
        echo boom E: [gsl]: ggscrp.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.d (
        echo boom E: [gsl]: ggscrp.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.c (
        echo boom E: [gsl]: ggsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.l (
        echo boom E: [gsl]: ggsock.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.i (
        echo boom E: [gsl]: ggsock.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.d (
        echo boom E: [gsl]: ggsock.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.c (
        echo boom E: [gsl]: ggstrn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.c (
        echo boom E: [gsl]: ggsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsymb.h (
        echo boom E: [gsl]: ggsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.c (
        echo boom E: [gsl]: ggthrd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.l (
        echo boom E: [gsl]: ggthrd.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.i (
        echo boom E: [gsl]: ggthrd.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.d (
        echo boom E: [gsl]: ggthrd.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.c (
        echo boom E: [gsl]: ggtime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.c (
        echo boom E: [gsl]: ggxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggxml.h (
        echo boom E: [gsl]: ggxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl.h (
        echo boom E: [gsl]: gsl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [gsl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [gsl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [gsl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [gsl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [gsl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [gsl]: installing GSL into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\doc\GSL\nul mkdir !_INSTALL_ROOT!\doc\GSL\
    if "!BOOM_TRACE!"=="1" echo copy/y release.txt !_INSTALL_ROOT!\doc\GSL\>nul
    verify>nul
    call copy/y release.txt !_INSTALL_ROOT!\doc\GSL\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y release.txt !_INSTALL_ROOT!\doc\GSL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if "!BOOM_TRACE!"=="1" echo copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y gsl.exe !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y gsl.exe !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsl.exe !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\lib\nul mkdir !_INSTALL_ROOT!\lib\
    if "!BOOM_TRACE!"=="1" echo copy/y libgsl.lib !_INSTALL_ROOT!\lib\>nul
    verify>nul
    call copy/y libgsl.lib !_INSTALL_ROOT!\lib\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y libgsl.lib !_INSTALL_ROOT!\lib\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\doc\GSL\nul mkdir !_INSTALL_ROOT!\doc\GSL\
    if "!BOOM_TRACE!"=="1" echo copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul
    verify>nul
    call copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if not exist !_INSTALL_ROOT!\doc\GSL\nul mkdir !_INSTALL_ROOT!\doc\GSL\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggconv.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggconv.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggconv.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggdiag.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggdiag.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggdiag.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggfile.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggfile.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggfile.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y gggsl.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y gggsl.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gggsl.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggmath.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggmath.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggmath.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggproc.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggproc.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggproc.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggscrp.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggscrp.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggscrp.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggsock.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggsock.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggsock.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggsymb.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggsymb.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggsymb.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggthrd.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggthrd.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggthrd.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggtime.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggtime.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggtime.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggxml.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggxml.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggxml.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y gsl.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y gsl.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsl.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [gsl]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [gsl]: Generating files...
    if "!BOOM_TRACE!"=="1" echo lr -quiet gsl.l
    verify>nul
    call lr -quiet gsl.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet gsl.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 ggcode.xml
    verify>nul
    call gsl -q -quiet:1 ggcode.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q -quiet:1 ggcode.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 ggpars.xml
    verify>nul
    call gsl -q -quiet:1 ggpars.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q -quiet:1 ggpars.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggconv.gxl
    verify>nul
    call gsl -q ggconv.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggconv.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggdiag.gxl
    verify>nul
    call gsl -q ggdiag.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggdiag.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggenvt.gxl
    verify>nul
    call gsl -q ggenvt.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggenvt.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggfile.gxl
    verify>nul
    call gsl -q ggfile.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggfile.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q gggsl.gxl
    verify>nul
    call gsl -q gggsl.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q gggsl.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggmath.gxl
    verify>nul
    call gsl -q ggmath.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggmath.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggpcre.gxl
    verify>nul
    call gsl -q ggpcre.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggpcre.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggproc.gxl
    verify>nul
    call gsl -q ggproc.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggproc.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggscrp.gxl
    verify>nul
    call gsl -q ggscrp.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggscrp.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggsock.gxl
    verify>nul
    call gsl -q ggsock.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggsock.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggstrn.gxl
    verify>nul
    call gsl -q ggstrn.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggstrn.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggsymb.gxl
    verify>nul
    call gsl -q ggsymb.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggsymb.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggthrd.gxl
    verify>nul
    call gsl -q ggthrd.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggthrd.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggtime.gxl
    verify>nul
    call gsl -q ggtime.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggtime.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggxml.gxl
    verify>nul
    call gsl -q ggxml.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggxml.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggcode.l
    verify>nul
    call lr -quiet ggcode.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggpars.l
    verify>nul
    call lr -quiet ggpars.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggpars.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet gggsl.l
    verify>nul
    call lr -quiet gggsl.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet gggsl.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggscrp.l
    verify>nul
    call lr -quiet ggscrp.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggscrp.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggsock.l
    verify>nul
    call lr -quiet ggsock.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggsock.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggthrd.l
    verify>nul
    call lr -quiet ggthrd.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggthrd.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist gsl.h del gsl.h
    if "!BOOM_TRACE!"=="1" echo type gghead.h>>gsl.h
    verify>nul
    call type gghead.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gghead.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcomm.h>>gsl.h
    verify>nul
    call type ggcomm.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcomm.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpars.h>>gsl.h
    verify>nul
    call type ggpars.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpars.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggparsm.h>>gsl.h
    verify>nul
    call type ggparsm.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggparsm.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrp.h>>gsl.h
    verify>nul
    call type ggscrp.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrp.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscop.h>>gsl.h
    verify>nul
    call type ggscop.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscop.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggobjt.h>>gsl.h
    verify>nul
    call type ggobjt.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggobjt.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsymb.h>>gsl.h
    verify>nul
    call type ggsymb.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsymb.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type gggsl.h>>gsl.h
    verify>nul
    call type gggsl.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gggsl.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcode.h>>gsl.h
    verify>nul
    call type ggcode.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcode.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcodem.h>>gsl.h
    verify>nul
    call type ggcodem.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcodem.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggfile.h>>gsl.h
    verify>nul
    call type ggfile.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggfile.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggstrn.h>>gsl.h
    verify>nul
    call type ggstrn.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggstrn.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggenvt.h>>gsl.h
    verify>nul
    call type ggenvt.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggenvt.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggconv.h>>gsl.h
    verify>nul
    call type ggconv.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggconv.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmath.h>>gsl.h
    verify>nul
    call type ggmath.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmath.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsock.h>>gsl.h
    verify>nul
    call type ggsock.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsock.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl.h
    verify>nul
    call type ggthrd.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggxml.h>>gsl.h
    verify>nul
    call type ggxml.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggxml.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggtime.h>>gsl.h
    verify>nul
    call type ggtime.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggtime.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpcre.h>>gsl.h
    verify>nul
    call type ggpcre.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpcre.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdiag.h>>gsl.h
    verify>nul
    call type ggdiag.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdiag.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggproc.h>>gsl.h
    verify>nul
    call type ggproc.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggproc.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [gsl]: Generating files...
    if "!BOOM_TRACE!"=="1" echo lr -quiet gsl.l
    verify>nul
    call lr -quiet gsl.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet gsl.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 ggcode.xml
    verify>nul
    call gsl -q -quiet:1 ggcode.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q -quiet:1 ggcode.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 ggpars.xml
    verify>nul
    call gsl -q -quiet:1 ggpars.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q -quiet:1 ggpars.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggconv.gxl
    verify>nul
    call gsl -q ggconv.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggconv.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggdiag.gxl
    verify>nul
    call gsl -q ggdiag.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggdiag.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggenvt.gxl
    verify>nul
    call gsl -q ggenvt.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggenvt.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggfile.gxl
    verify>nul
    call gsl -q ggfile.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggfile.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q gggsl.gxl
    verify>nul
    call gsl -q gggsl.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q gggsl.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggmath.gxl
    verify>nul
    call gsl -q ggmath.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggmath.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggpcre.gxl
    verify>nul
    call gsl -q ggpcre.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggpcre.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggproc.gxl
    verify>nul
    call gsl -q ggproc.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggproc.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggscrp.gxl
    verify>nul
    call gsl -q ggscrp.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggscrp.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggsock.gxl
    verify>nul
    call gsl -q ggsock.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggsock.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggstrn.gxl
    verify>nul
    call gsl -q ggstrn.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggstrn.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggsymb.gxl
    verify>nul
    call gsl -q ggsymb.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggsymb.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggthrd.gxl
    verify>nul
    call gsl -q ggthrd.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggthrd.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggtime.gxl
    verify>nul
    call gsl -q ggtime.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggtime.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q ggxml.gxl
    verify>nul
    call gsl -q ggxml.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl -q ggxml.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggcode.l
    verify>nul
    call lr -quiet ggcode.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggpars.l
    verify>nul
    call lr -quiet ggpars.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggpars.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet gggsl.l
    verify>nul
    call lr -quiet gggsl.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet gggsl.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggscrp.l
    verify>nul
    call lr -quiet ggscrp.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggscrp.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggsock.l
    verify>nul
    call lr -quiet ggsock.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggsock.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggthrd.l
    verify>nul
    call lr -quiet ggthrd.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggthrd.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist gsl.h del gsl.h
    if "!BOOM_TRACE!"=="1" echo type gghead.h>>gsl.h
    verify>nul
    call type gghead.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gghead.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcomm.h>>gsl.h
    verify>nul
    call type ggcomm.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcomm.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpars.h>>gsl.h
    verify>nul
    call type ggpars.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpars.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggparsm.h>>gsl.h
    verify>nul
    call type ggparsm.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggparsm.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrp.h>>gsl.h
    verify>nul
    call type ggscrp.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrp.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscop.h>>gsl.h
    verify>nul
    call type ggscop.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscop.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggobjt.h>>gsl.h
    verify>nul
    call type ggobjt.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggobjt.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsymb.h>>gsl.h
    verify>nul
    call type ggsymb.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsymb.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type gggsl.h>>gsl.h
    verify>nul
    call type gggsl.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gggsl.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcode.h>>gsl.h
    verify>nul
    call type ggcode.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcode.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcodem.h>>gsl.h
    verify>nul
    call type ggcodem.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcodem.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggfile.h>>gsl.h
    verify>nul
    call type ggfile.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggfile.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggstrn.h>>gsl.h
    verify>nul
    call type ggstrn.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggstrn.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggenvt.h>>gsl.h
    verify>nul
    call type ggenvt.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggenvt.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggconv.h>>gsl.h
    verify>nul
    call type ggconv.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggconv.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmath.h>>gsl.h
    verify>nul
    call type ggmath.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmath.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsock.h>>gsl.h
    verify>nul
    call type ggsock.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsock.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl.h
    verify>nul
    call type ggthrd.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggxml.h>>gsl.h
    verify>nul
    call type ggxml.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggxml.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggtime.h>>gsl.h
    verify>nul
    call type ggtime.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggtime.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpcre.h>>gsl.h
    verify>nul
    call type ggpcre.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpcre.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdiag.h>>gsl.h
    verify>nul
    call type ggdiag.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdiag.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggproc.h>>gsl.h
    verify>nul
    call type ggproc.h>>gsl.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggproc.h>>gsl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist gsl.exe del gsl.exe
    if exist libgsl.lib del libgsl.lib
    if exist gsl.obj del gsl.obj
    if exist gsl.exe del gsl.exe
    if exist testpars.obj del testpars.obj
    if exist testpars.exe del testpars.exe
    if exist ggcode.obj del ggcode.obj
    if exist ggcodemm.obj del ggcodemm.obj
    if exist ggpars.obj del ggpars.obj
    if exist ggparsmm.obj del ggparsmm.obj
    if exist ggobjt.obj del ggobjt.obj
    if exist ggcomm.obj del ggcomm.obj
    if exist ggscop.obj del ggscop.obj
    if exist ggconv.obj del ggconv.obj
    if exist ggdiag.obj del ggdiag.obj
    if exist ggenvt.obj del ggenvt.obj
    if exist ggfile.obj del ggfile.obj
    if exist gggsl.obj del gggsl.obj
    if exist ggmath.obj del ggmath.obj
    if exist ggpcre.obj del ggpcre.obj
    if exist ggproc.obj del ggproc.obj
    if exist ggscrp.obj del ggscrp.obj
    if exist ggsock.obj del ggsock.obj
    if exist ggstrn.obj del ggstrn.obj
    if exist ggsymb.obj del ggsymb.obj
    if exist ggthrd.obj del ggthrd.obj
    if exist ggtime.obj del ggtime.obj
    if exist ggxml.obj del ggxml.obj
    if exist ggcode.obj del ggcode.obj
    if exist ggcodem.obj del ggcodem.obj
    if exist ggpars.obj del ggpars.obj
    if exist ggparsm.obj del ggparsm.obj
    if exist ggconv.obj del ggconv.obj
    if exist ggdiag.obj del ggdiag.obj
    if exist ggenvt.obj del ggenvt.obj
    if exist ggfile.obj del ggfile.obj
    if exist gggsl.obj del gggsl.obj
    if exist ggmath.obj del ggmath.obj
    if exist ggpcre.obj del ggpcre.obj
    if exist ggproc.obj del ggproc.obj
    if exist ggscrp.obj del ggscrp.obj
    if exist ggsock.obj del ggsock.obj
    if exist ggstrn.obj del ggstrn.obj
    if exist ggsymb.obj del ggsymb.obj
    if exist ggthrd.obj del ggthrd.obj
    if exist ggtime.obj del ggtime.obj
    if exist ggxml.obj del ggxml.obj
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist gsl.i del gsl.i
    if exist gsl.d del gsl.d
    if exist ggcode.i del ggcode.i
    if exist ggcode.d del ggcode.d
    if exist ggcodem.c del ggcodem.c
    if exist ggcodem.h del ggcodem.h
    if exist ggpars.i del ggpars.i
    if exist ggpars.d del ggpars.d
    if exist ggparsm.c del ggparsm.c
    if exist ggparsm.h del ggparsm.h
    if exist ggconv.c del ggconv.c
    if exist ggconv.h del ggconv.h
    if exist ggdiag.c del ggdiag.c
    if exist ggdiag.h del ggdiag.h
    if exist ggenvt.c del ggenvt.c
    if exist ggenvt.h del ggenvt.h
    if exist ggfile.c del ggfile.c
    if exist ggfile.h del ggfile.h
    if exist gggsl.c del gggsl.c
    if exist gggsl.h del gggsl.h
    if exist gggsl.l del gggsl.l
    if exist gggsl.i del gggsl.i
    if exist gggsl.d del gggsl.d
    if exist ggmath.c del ggmath.c
    if exist ggmath.h del ggmath.h
    if exist ggpcre.c del ggpcre.c
    if exist ggpcre.h del ggpcre.h
    if exist ggproc.c del ggproc.c
    if exist ggproc.h del ggproc.h
    if exist ggscrp.c del ggscrp.c
    if exist ggscrp.h del ggscrp.h
    if exist ggscrp.l del ggscrp.l
    if exist ggscrp.i del ggscrp.i
    if exist ggscrp.d del ggscrp.d
    if exist ggsock.c del ggsock.c
    if exist ggsock.h del ggsock.h
    if exist ggsock.l del ggsock.l
    if exist ggsock.i del ggsock.i
    if exist ggsock.d del ggsock.d
    if exist ggstrn.c del ggstrn.c
    if exist ggstrn.h del ggstrn.h
    if exist ggsymb.c del ggsymb.c
    if exist ggsymb.h del ggsymb.h
    if exist ggthrd.c del ggthrd.c
    if exist ggthrd.h del ggthrd.h
    if exist ggthrd.l del ggthrd.l
    if exist ggthrd.i del ggthrd.i
    if exist ggthrd.d del ggthrd.d
    if exist ggtime.c del ggtime.c
    if exist ggtime.h del ggtime.h
    if exist ggxml.c del ggxml.c
    if exist ggxml.h del ggxml.h
    if exist gsl.h del gsl.h
    if exist stamp_generate del stamp_generate
    if exist gsl_*.zip del gsl_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo gsl-4.0c19
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [gsl]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    exit /b 0

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    exit /b 0

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    exit /b 0


exit /b 0

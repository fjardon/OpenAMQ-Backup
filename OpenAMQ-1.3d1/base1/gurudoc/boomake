#!/bin/sh
#
#   Boom builder for Gurudoc 1.3b1
#   Generated by iMatix Boom from standard.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [gurudoc]: $* - stop" 1>&2
    else
        echo "boom E: [gurudoc]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [gurudoc]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="1.3b1"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,st on all platforms except Linux and Solaris.
#
if [ -s /usr/bin/uname ]; then BOOM_PLATFORM=`/usr/bin/uname`; fi
if [ -s /bin/uname ];     then BOOM_PLATFORM=`/bin/uname`;     fi
if [ -z "$BOOM_MODEL" ]; then
    if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
        BOOM_MODEL=release,mt
    else
        BOOM_MODEL=release,st
    fi
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
        if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
            BOOM_MODEL_MT=1
            BOOM_MODEL="$BOOM_MODEL,mt"
        else
            BOOM_MODEL_ST=1
            BOOM_MODEL="$BOOM_MODEL,st"
        fi
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where Gurudoc should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# --------------------------   BUILD BINARY FILES   ---------------------------

a_build_binary_files() {
:
    carp "Building Gurudoc..."
    #   To prevent compatibility warnings...
    INCDIR=
    LIBDIR=
    export LIBDIR INCDIR
    if [ "$BOOM_TRACE" ]; then
        MY_COPTS=-v
    else
        MY_COPTS=-q
    fi
    if [ ! -z "$_LOCAL_BASE" ]; then
        MY_COPTS="$MY_COPTS -li $_LOCAL_BASE/include -ll $_LOCAL_BASE/lib"
    fi
}

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "gurudoc/guruver.gsl" ]; then
        echo gurudoc/guruver.gsl>>_package.lst
    fi
    if [ -f "gurudoc/guruver.pl" ]; then
        echo gurudoc/guruver.pl>>_package.lst
    fi
    if [ -f "gurudoc/gdl.txt" ]; then
        echo gurudoc/gdl.txt>>_package.lst
    fi
    if [ -f "gurudoc/gdl.xnf" ]; then
        echo gurudoc/gdl.xnf>>_package.lst
    fi
    if [ -f "gurudoc/gdlcode.gsl" ]; then
        echo gurudoc/gdlcode.gsl>>_package.lst
    fi
    if [ -f "gurudoc/gdlparse.gsl" ]; then
        echo gurudoc/gdlparse.gsl>>_package.lst
    fi
    if [ -f "gurudoc/gurudoc.gsl" ]; then
        echo gurudoc/gurudoc.gsl>>_package.lst
    fi
    if [ -f "gurudoc/mkgdl" ]; then
        echo gurudoc/mkgdl>>_package.lst
    fi
    if [ -f "gurudoc/mkgdl.bat" ]; then
        echo gurudoc/mkgdl.bat>>_package.lst
    fi
    if [ -f "gurudoc/gurudoc" ]; then
        echo gurudoc/gurudoc>>_package.lst
    fi
    if [ -f "gurudoc/gurudoc.bat" ]; then
        echo gurudoc/gurudoc.bat>>_package.lst
    fi
    if [ -f "gurudoc/mod_gdl.gsl" ]; then
        echo gurudoc/mod_gdl.gsl>>_package.lst
    fi
    if [ -f "gurudoc/gd2xhtml" ]; then
        echo gurudoc/gd2xhtml>>_package.lst
    fi
    if [ -f "gurudoc/gd2xhtml.bat" ]; then
        echo gurudoc/gd2xhtml.bat>>_package.lst
    fi
    if [ -f "gurudoc/test_html_frame.gsl" ]; then
        echo gurudoc/test_html_frame.gsl>>_package.lst
    fi
    if [ -f "gurudoc/html_frame.gsl" ]; then
        echo gurudoc/html_frame.gsl>>_package.lst
    fi
    if [ -f "gurudoc/html_simple.gsl" ]; then
        echo gurudoc/html_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/html_multi.gsl" ]; then
        echo gurudoc/html_multi.gsl>>_package.lst
    fi
    if [ -f "gurudoc/html_library.gsl" ]; then
        echo gurudoc/html_library.gsl>>_package.lst
    fi
    if [ -f "gurudoc/txt_simple.gsl" ]; then
        echo gurudoc/txt_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/rtf_simple.gsl" ]; then
        echo gurudoc/rtf_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/latex_simple.gsl" ]; then
        echo gurudoc/latex_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/mod_rtf.gsl" ]; then
        echo gurudoc/mod_rtf.gsl>>_package.lst
    fi
    if [ -f "gurudoc/texi_simple.gsl" ]; then
        echo gurudoc/texi_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/groff_simple.gsl" ]; then
        echo gurudoc/groff_simple.gsl>>_package.lst
    fi
    if [ -f "gurudoc/ooo_document.gsl" ]; then
        echo gurudoc/ooo_document.gsl>>_package.lst
    fi
    if [ -f "gurudoc/ooo_whitepaper.gsl" ]; then
        echo gurudoc/ooo_whitepaper.gsl>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frame.htm" ]; then
        echo gurudoc/tpl_frame.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frame_body.htm" ]; then
        echo gurudoc/tpl_frame_body.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frame_bot.htm" ]; then
        echo gurudoc/tpl_frame_bot.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frame_top.htm" ]; then
        echo gurudoc/tpl_frame_top.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frame_toc.htm" ]; then
        echo gurudoc/tpl_frame_toc.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_simple.htm" ]; then
        echo gurudoc/tpl_simple.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_document.sxw" ]; then
        echo gurudoc/tpl_document.sxw>>_package.lst
    fi
    if [ -f "gurudoc/tpl_whitepaper.sxw" ]; then
        echo gurudoc/tpl_whitepaper.sxw>>_package.lst
    fi
    if [ -f "gurudoc/tpl_latex.tex" ]; then
        echo gurudoc/tpl_latex.tex>>_package.lst
    fi
    if [ -f "gurudoc/html_frameset.gsl" ]; then
        echo gurudoc/html_frameset.gsl>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frameset.htm" ]; then
        echo gurudoc/tpl_frameset.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frameset_body.htm" ]; then
        echo gurudoc/tpl_frameset_body.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frameset_bot.htm" ]; then
        echo gurudoc/tpl_frameset_bot.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frameset_top.htm" ]; then
        echo gurudoc/tpl_frameset_top.htm>>_package.lst
    fi
    if [ -f "gurudoc/tpl_frameset_toc.htm" ]; then
        echo gurudoc/tpl_frameset_toc.htm>>_package.lst
    fi
    if [ -f "gurudoc/wikidot.gsl" ]; then
        echo gurudoc/wikidot.gsl>>_package.lst
    fi
    if [ -f "gurudoc/gddoc.txt" ]; then
        echo gurudoc/gddoc.txt>>_package.lst
    fi
    if [ -f "gurudoc/gddoc.gdl" ]; then
        echo gurudoc/gddoc.gdl>>_package.lst
    fi
    if [ "`echo gurudoc/gddoc*.html`" != "gurudoc/gddoc*.html" ]; then
        for file in `echo gurudoc/gddoc*.html`; do
            echo $file>>_package.lst
        done
    fi
    if [ -f "gurudoc/mainlogo.jpg" ]; then
        echo gurudoc/mainlogo.jpg>>_package.lst
    fi
    if [ -f "gurudoc/gdstyle.css" ]; then
        echo gurudoc/gdstyle.css>>_package.lst
    fi
    if [ -f "gurudoc/prelude.pdl" ]; then
        echo gurudoc/prelude.pdl>>_package.lst
    fi
    if [ -f "gurudoc/license.gpl" ]; then
        echo gurudoc/license.gpl>>_package.lst
    fi
    if [ -f "gurudoc/project.pdl" ]; then
        echo gurudoc/project.pdl>>_package.lst
    fi
    if [ -f "gurudoc/readme.txt" ]; then
        echo gurudoc/readme.txt>>_package.lst
    fi
    if [ -f "gurudoc/stamp_generate" ]; then
        echo gurudoc/stamp_generate>>_package.lst
    fi
    if [ -f "gurudoc/configure" ]; then
        echo gurudoc/configure>>_package.lst
    fi
    if [ -f "gurudoc/Makefile.unix" ]; then
        echo gurudoc/Makefile.unix>>_package.lst
    fi
    if [ -f "gurudoc/boomake" ]; then
        echo gurudoc/boomake>>_package.lst
    fi
    if [ -f "gurudoc/configure.bat" ]; then
        echo gurudoc/configure.bat>>_package.lst
    fi
    if [ -f "gurudoc/Makefile.win32" ]; then
        echo gurudoc/Makefile.win32>>_package.lst
    fi
    if [ -f "gurudoc/boomake.bat" ]; then
        echo gurudoc/boomake.bat>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building gurudoc-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d gurudoc-$MY_VERSION
    rm -f gurudoc-$MY_VERSION-src.tar.gz
    tar -cf  gurudoc-$MY_VERSION-src.tar gurudoc-$MY_VERSION
    gzip gurudoc-$MY_VERSION-src.tar
    rm -f gurudoc-$MY_VERSION-src.zip
    carp "Building gurudoc-$MY_VERSION-src.zip..."
    zip -lrmq gurudoc-$MY_VERSION-src.zip gurudoc-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "guruver.gsl" ]; then
        croak "guruver.gsl is missing"
    fi
    if [ ! -f "guruver.pl" ]; then
        croak "guruver.pl is missing"
    fi
    if [ ! -f "gdl.txt" ]; then
        croak "gdl.txt is missing"
    fi
    if [ ! -f "gdl.xnf" ]; then
        croak "gdl.xnf is missing"
    fi
    if [ ! -f "gdlcode.gsl" ]; then
        croak "gdlcode.gsl is missing"
    fi
    if [ ! -f "gdlparse.gsl" ]; then
        croak "gdlparse.gsl is missing"
    fi
    if [ ! -f "gurudoc.gsl" ]; then
        croak "gurudoc.gsl is missing"
    fi
    if [ ! -f "mkgdl" ]; then
        croak "mkgdl is missing"
    fi
    if [ ! -f "mkgdl.bat" ]; then
        croak "mkgdl.bat is missing"
    fi
    if [ ! -f "gurudoc" ]; then
        croak "gurudoc is missing"
    fi
    if [ ! -f "gurudoc.bat" ]; then
        croak "gurudoc.bat is missing"
    fi
    if [ ! -f "mod_gdl.gsl" ]; then
        croak "mod_gdl.gsl is missing"
    fi
    if [ ! -f "gd2xhtml" ]; then
        croak "gd2xhtml is missing"
    fi
    if [ ! -f "gd2xhtml.bat" ]; then
        croak "gd2xhtml.bat is missing"
    fi
    if [ ! -f "test_html_frame.gsl" ]; then
        croak "test_html_frame.gsl is missing"
    fi
    if [ ! -f "html_frame.gsl" ]; then
        croak "html_frame.gsl is missing"
    fi
    if [ ! -f "html_simple.gsl" ]; then
        croak "html_simple.gsl is missing"
    fi
    if [ ! -f "html_multi.gsl" ]; then
        croak "html_multi.gsl is missing"
    fi
    if [ ! -f "html_library.gsl" ]; then
        croak "html_library.gsl is missing"
    fi
    if [ ! -f "txt_simple.gsl" ]; then
        croak "txt_simple.gsl is missing"
    fi
    if [ ! -f "rtf_simple.gsl" ]; then
        croak "rtf_simple.gsl is missing"
    fi
    if [ ! -f "latex_simple.gsl" ]; then
        croak "latex_simple.gsl is missing"
    fi
    if [ ! -f "mod_rtf.gsl" ]; then
        croak "mod_rtf.gsl is missing"
    fi
    if [ ! -f "texi_simple.gsl" ]; then
        croak "texi_simple.gsl is missing"
    fi
    if [ ! -f "groff_simple.gsl" ]; then
        croak "groff_simple.gsl is missing"
    fi
    if [ ! -f "ooo_document.gsl" ]; then
        croak "ooo_document.gsl is missing"
    fi
    if [ ! -f "ooo_whitepaper.gsl" ]; then
        croak "ooo_whitepaper.gsl is missing"
    fi
    if [ ! -f "tpl_frame.htm" ]; then
        croak "tpl_frame.htm is missing"
    fi
    if [ ! -f "tpl_frame_body.htm" ]; then
        croak "tpl_frame_body.htm is missing"
    fi
    if [ ! -f "tpl_frame_bot.htm" ]; then
        croak "tpl_frame_bot.htm is missing"
    fi
    if [ ! -f "tpl_frame_top.htm" ]; then
        croak "tpl_frame_top.htm is missing"
    fi
    if [ ! -f "tpl_frame_toc.htm" ]; then
        croak "tpl_frame_toc.htm is missing"
    fi
    if [ ! -f "tpl_simple.htm" ]; then
        croak "tpl_simple.htm is missing"
    fi
    if [ ! -f "tpl_document.sxw" ]; then
        croak "tpl_document.sxw is missing"
    fi
    if [ ! -f "tpl_whitepaper.sxw" ]; then
        croak "tpl_whitepaper.sxw is missing"
    fi
    if [ ! -f "tpl_latex.tex" ]; then
        croak "tpl_latex.tex is missing"
    fi
    if [ ! -f "html_frameset.gsl" ]; then
        croak "html_frameset.gsl is missing"
    fi
    if [ ! -f "tpl_frameset.htm" ]; then
        croak "tpl_frameset.htm is missing"
    fi
    if [ ! -f "tpl_frameset_body.htm" ]; then
        croak "tpl_frameset_body.htm is missing"
    fi
    if [ ! -f "tpl_frameset_bot.htm" ]; then
        croak "tpl_frameset_bot.htm is missing"
    fi
    if [ ! -f "tpl_frameset_top.htm" ]; then
        croak "tpl_frameset_top.htm is missing"
    fi
    if [ ! -f "tpl_frameset_toc.htm" ]; then
        croak "tpl_frameset_toc.htm is missing"
    fi
    if [ ! -f "wikidot.gsl" ]; then
        croak "wikidot.gsl is missing"
    fi
    if [ ! -f "gddoc.txt" ]; then
        croak "gddoc.txt is missing"
    fi
    if [ ! -f "gddoc.gdl" ]; then
        croak "gddoc.gdl is missing"
    fi
    if [ "`echo gddoc*.html`" = "gddoc*.html" ]; then
        croak "gddoc*.html is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK BINARY FILES EXIST   ------------------------

a_check_binary_files_exist() {
:
    if [ ! -f "guruver.gsl" ]; then
        croak "guruver.gsl is missing"
    fi
    if [ ! -f "guruver.pl" ]; then
        croak "guruver.pl is missing"
    fi
    if [ ! -f "gdlcode.gsl" ]; then
        croak "gdlcode.gsl is missing"
    fi
    if [ ! -f "gdlparse.gsl" ]; then
        croak "gdlparse.gsl is missing"
    fi
    if [ ! -f "gurudoc.gsl" ]; then
        croak "gurudoc.gsl is missing"
    fi
    if [ ! -f "mkgdl" ]; then
        croak "mkgdl is missing"
    fi
    if [ ! -f "mkgdl.bat" ]; then
        croak "mkgdl.bat is missing"
    fi
    if [ ! -f "gurudoc" ]; then
        croak "gurudoc is missing"
    fi
    if [ ! -f "gurudoc.bat" ]; then
        croak "gurudoc.bat is missing"
    fi
    if [ ! -f "mod_gdl.gsl" ]; then
        croak "mod_gdl.gsl is missing"
    fi
    if [ ! -f "gd2xhtml" ]; then
        croak "gd2xhtml is missing"
    fi
    if [ ! -f "gd2xhtml.bat" ]; then
        croak "gd2xhtml.bat is missing"
    fi
    if [ ! -f "html_frame.gsl" ]; then
        croak "html_frame.gsl is missing"
    fi
    if [ ! -f "html_simple.gsl" ]; then
        croak "html_simple.gsl is missing"
    fi
    if [ ! -f "html_multi.gsl" ]; then
        croak "html_multi.gsl is missing"
    fi
    if [ ! -f "html_library.gsl" ]; then
        croak "html_library.gsl is missing"
    fi
    if [ ! -f "txt_simple.gsl" ]; then
        croak "txt_simple.gsl is missing"
    fi
    if [ ! -f "rtf_simple.gsl" ]; then
        croak "rtf_simple.gsl is missing"
    fi
    if [ ! -f "latex_simple.gsl" ]; then
        croak "latex_simple.gsl is missing"
    fi
    if [ ! -f "mod_rtf.gsl" ]; then
        croak "mod_rtf.gsl is missing"
    fi
    if [ ! -f "texi_simple.gsl" ]; then
        croak "texi_simple.gsl is missing"
    fi
    if [ ! -f "groff_simple.gsl" ]; then
        croak "groff_simple.gsl is missing"
    fi
    if [ ! -f "ooo_document.gsl" ]; then
        croak "ooo_document.gsl is missing"
    fi
    if [ ! -f "ooo_whitepaper.gsl" ]; then
        croak "ooo_whitepaper.gsl is missing"
    fi
    if [ ! -f "tpl_frame.htm" ]; then
        croak "tpl_frame.htm is missing"
    fi
    if [ ! -f "tpl_frame_body.htm" ]; then
        croak "tpl_frame_body.htm is missing"
    fi
    if [ ! -f "tpl_frame_bot.htm" ]; then
        croak "tpl_frame_bot.htm is missing"
    fi
    if [ ! -f "tpl_frame_top.htm" ]; then
        croak "tpl_frame_top.htm is missing"
    fi
    if [ ! -f "tpl_frame_toc.htm" ]; then
        croak "tpl_frame_toc.htm is missing"
    fi
    if [ ! -f "tpl_simple.htm" ]; then
        croak "tpl_simple.htm is missing"
    fi
    if [ ! -f "tpl_document.sxw" ]; then
        croak "tpl_document.sxw is missing"
    fi
    if [ ! -f "tpl_whitepaper.sxw" ]; then
        croak "tpl_whitepaper.sxw is missing"
    fi
    if [ ! -f "tpl_latex.tex" ]; then
        croak "tpl_latex.tex is missing"
    fi
    if [ ! -f "html_frameset.gsl" ]; then
        croak "html_frameset.gsl is missing"
    fi
    if [ ! -f "tpl_frameset.htm" ]; then
        croak "tpl_frameset.htm is missing"
    fi
    if [ ! -f "tpl_frameset_body.htm" ]; then
        croak "tpl_frameset_body.htm is missing"
    fi
    if [ ! -f "tpl_frameset_bot.htm" ]; then
        croak "tpl_frameset_bot.htm is missing"
    fi
    if [ ! -f "tpl_frameset_top.htm" ]; then
        croak "tpl_frameset_top.htm is missing"
    fi
    if [ ! -f "tpl_frameset_toc.htm" ]; then
        croak "tpl_frameset_toc.htm is missing"
    fi
    if [ ! -f "wikidot.gsl" ]; then
        croak "wikidot.gsl is missing"
    fi
    if [ "`echo gddoc*.html`" = "gddoc*.html" ]; then
        croak "gddoc*.html is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "guruver.gsl" ]; then
        croak "guruver.gsl is missing"
    fi
    if [ ! -f "guruver.pl" ]; then
        croak "guruver.pl is missing"
    fi
    if [ ! -f "gdl.xnf" ]; then
        croak "gdl.xnf is missing"
    fi
    if [ ! -f "gurudoc.gsl" ]; then
        croak "gurudoc.gsl is missing"
    fi
    if [ ! -f "mkgdl" ]; then
        croak "mkgdl is missing"
    fi
    if [ ! -f "mkgdl.bat" ]; then
        croak "mkgdl.bat is missing"
    fi
    if [ ! -f "gurudoc" ]; then
        croak "gurudoc is missing"
    fi
    if [ ! -f "gurudoc.bat" ]; then
        croak "gurudoc.bat is missing"
    fi
    if [ ! -f "mod_gdl.gsl" ]; then
        croak "mod_gdl.gsl is missing"
    fi
    if [ ! -f "gd2xhtml" ]; then
        croak "gd2xhtml is missing"
    fi
    if [ ! -f "gd2xhtml.bat" ]; then
        croak "gd2xhtml.bat is missing"
    fi
    if [ ! -f "test_html_frame.gsl" ]; then
        croak "test_html_frame.gsl is missing"
    fi
    if [ ! -f "html_frame.gsl" ]; then
        croak "html_frame.gsl is missing"
    fi
    if [ ! -f "html_simple.gsl" ]; then
        croak "html_simple.gsl is missing"
    fi
    if [ ! -f "html_multi.gsl" ]; then
        croak "html_multi.gsl is missing"
    fi
    if [ ! -f "html_library.gsl" ]; then
        croak "html_library.gsl is missing"
    fi
    if [ ! -f "txt_simple.gsl" ]; then
        croak "txt_simple.gsl is missing"
    fi
    if [ ! -f "rtf_simple.gsl" ]; then
        croak "rtf_simple.gsl is missing"
    fi
    if [ ! -f "latex_simple.gsl" ]; then
        croak "latex_simple.gsl is missing"
    fi
    if [ ! -f "mod_rtf.gsl" ]; then
        croak "mod_rtf.gsl is missing"
    fi
    if [ ! -f "texi_simple.gsl" ]; then
        croak "texi_simple.gsl is missing"
    fi
    if [ ! -f "groff_simple.gsl" ]; then
        croak "groff_simple.gsl is missing"
    fi
    if [ ! -f "ooo_document.gsl" ]; then
        croak "ooo_document.gsl is missing"
    fi
    if [ ! -f "ooo_whitepaper.gsl" ]; then
        croak "ooo_whitepaper.gsl is missing"
    fi
    if [ ! -f "tpl_frame.htm" ]; then
        croak "tpl_frame.htm is missing"
    fi
    if [ ! -f "tpl_frame_body.htm" ]; then
        croak "tpl_frame_body.htm is missing"
    fi
    if [ ! -f "tpl_frame_bot.htm" ]; then
        croak "tpl_frame_bot.htm is missing"
    fi
    if [ ! -f "tpl_frame_top.htm" ]; then
        croak "tpl_frame_top.htm is missing"
    fi
    if [ ! -f "tpl_frame_toc.htm" ]; then
        croak "tpl_frame_toc.htm is missing"
    fi
    if [ ! -f "tpl_simple.htm" ]; then
        croak "tpl_simple.htm is missing"
    fi
    if [ ! -f "tpl_document.sxw" ]; then
        croak "tpl_document.sxw is missing"
    fi
    if [ ! -f "tpl_whitepaper.sxw" ]; then
        croak "tpl_whitepaper.sxw is missing"
    fi
    if [ ! -f "tpl_latex.tex" ]; then
        croak "tpl_latex.tex is missing"
    fi
    if [ ! -f "html_frameset.gsl" ]; then
        croak "html_frameset.gsl is missing"
    fi
    if [ ! -f "tpl_frameset.htm" ]; then
        croak "tpl_frameset.htm is missing"
    fi
    if [ ! -f "tpl_frameset_body.htm" ]; then
        croak "tpl_frameset_body.htm is missing"
    fi
    if [ ! -f "tpl_frameset_bot.htm" ]; then
        croak "tpl_frameset_bot.htm is missing"
    fi
    if [ ! -f "tpl_frameset_top.htm" ]; then
        croak "tpl_frameset_top.htm is missing"
    fi
    if [ ! -f "tpl_frameset_toc.htm" ]; then
        croak "tpl_frameset_toc.htm is missing"
    fi
    if [ ! -f "wikidot.gsl" ]; then
        croak "wikidot.gsl is missing"
    fi
    if [ ! -f "gddoc.txt" ]; then
        croak "gddoc.txt is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "guruver.gsl" ]; then
        croak "guruver.gsl is missing"
    fi
    if [ ! -f "guruver.pl" ]; then
        croak "guruver.pl is missing"
    fi
    if [ ! -f "gdl.txt" ]; then
        croak "gdl.txt is missing"
    fi
    if [ ! -f "gdl.xnf" ]; then
        croak "gdl.xnf is missing"
    fi
    if [ ! -f "gdlcode.gsl" ]; then
        croak "gdlcode.gsl is missing"
    fi
    if [ ! -f "gdlparse.gsl" ]; then
        croak "gdlparse.gsl is missing"
    fi
    if [ ! -f "gurudoc.gsl" ]; then
        croak "gurudoc.gsl is missing"
    fi
    if [ ! -f "mkgdl" ]; then
        croak "mkgdl is missing"
    fi
    if [ ! -f "mkgdl.bat" ]; then
        croak "mkgdl.bat is missing"
    fi
    if [ ! -f "gurudoc" ]; then
        croak "gurudoc is missing"
    fi
    if [ ! -f "gurudoc.bat" ]; then
        croak "gurudoc.bat is missing"
    fi
    if [ ! -f "mod_gdl.gsl" ]; then
        croak "mod_gdl.gsl is missing"
    fi
    if [ ! -f "gd2xhtml" ]; then
        croak "gd2xhtml is missing"
    fi
    if [ ! -f "gd2xhtml.bat" ]; then
        croak "gd2xhtml.bat is missing"
    fi
    if [ ! -f "test_html_frame.gsl" ]; then
        croak "test_html_frame.gsl is missing"
    fi
    if [ ! -f "html_frame.gsl" ]; then
        croak "html_frame.gsl is missing"
    fi
    if [ ! -f "html_simple.gsl" ]; then
        croak "html_simple.gsl is missing"
    fi
    if [ ! -f "html_multi.gsl" ]; then
        croak "html_multi.gsl is missing"
    fi
    if [ ! -f "html_library.gsl" ]; then
        croak "html_library.gsl is missing"
    fi
    if [ ! -f "txt_simple.gsl" ]; then
        croak "txt_simple.gsl is missing"
    fi
    if [ ! -f "rtf_simple.gsl" ]; then
        croak "rtf_simple.gsl is missing"
    fi
    if [ ! -f "latex_simple.gsl" ]; then
        croak "latex_simple.gsl is missing"
    fi
    if [ ! -f "mod_rtf.gsl" ]; then
        croak "mod_rtf.gsl is missing"
    fi
    if [ ! -f "texi_simple.gsl" ]; then
        croak "texi_simple.gsl is missing"
    fi
    if [ ! -f "groff_simple.gsl" ]; then
        croak "groff_simple.gsl is missing"
    fi
    if [ ! -f "ooo_document.gsl" ]; then
        croak "ooo_document.gsl is missing"
    fi
    if [ ! -f "ooo_whitepaper.gsl" ]; then
        croak "ooo_whitepaper.gsl is missing"
    fi
    if [ ! -f "tpl_frame.htm" ]; then
        croak "tpl_frame.htm is missing"
    fi
    if [ ! -f "tpl_frame_body.htm" ]; then
        croak "tpl_frame_body.htm is missing"
    fi
    if [ ! -f "tpl_frame_bot.htm" ]; then
        croak "tpl_frame_bot.htm is missing"
    fi
    if [ ! -f "tpl_frame_top.htm" ]; then
        croak "tpl_frame_top.htm is missing"
    fi
    if [ ! -f "tpl_frame_toc.htm" ]; then
        croak "tpl_frame_toc.htm is missing"
    fi
    if [ ! -f "tpl_simple.htm" ]; then
        croak "tpl_simple.htm is missing"
    fi
    if [ ! -f "tpl_document.sxw" ]; then
        croak "tpl_document.sxw is missing"
    fi
    if [ ! -f "tpl_whitepaper.sxw" ]; then
        croak "tpl_whitepaper.sxw is missing"
    fi
    if [ ! -f "tpl_latex.tex" ]; then
        croak "tpl_latex.tex is missing"
    fi
    if [ ! -f "html_frameset.gsl" ]; then
        croak "html_frameset.gsl is missing"
    fi
    if [ ! -f "tpl_frameset.htm" ]; then
        croak "tpl_frameset.htm is missing"
    fi
    if [ ! -f "tpl_frameset_body.htm" ]; then
        croak "tpl_frameset_body.htm is missing"
    fi
    if [ ! -f "tpl_frameset_bot.htm" ]; then
        croak "tpl_frameset_bot.htm is missing"
    fi
    if [ ! -f "tpl_frameset_top.htm" ]; then
        croak "tpl_frameset_top.htm is missing"
    fi
    if [ ! -f "tpl_frameset_toc.htm" ]; then
        croak "tpl_frameset_toc.htm is missing"
    fi
    if [ ! -f "wikidot.gsl" ]; then
        croak "wikidot.gsl is missing"
    fi
    if [ ! -f "gddoc.txt" ]; then
        croak "gddoc.txt is missing"
    fi
    if [ ! -f "gddoc.gdl" ]; then
        croak "gddoc.gdl is missing"
    fi
    if [ "`echo gddoc*.html`" = "gddoc*.html" ]; then
        croak "gddoc*.html is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing Gurudoc into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp guruver.gsl $_INSTALL_ROOT/bin/"
    cp guruver.gsl $_INSTALL_ROOT/bin/ || croak "\"cp guruver.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/guruver.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/guruver.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/guruver.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp guruver.pl $_INSTALL_ROOT/bin/"
    cp guruver.pl $_INSTALL_ROOT/bin/ || croak "\"cp guruver.pl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/guruver.pl"
    chmod 0644 $_INSTALL_ROOT/bin/guruver.pl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/guruver.pl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gdlcode.gsl $_INSTALL_ROOT/bin/"
    cp gdlcode.gsl $_INSTALL_ROOT/bin/ || croak "\"cp gdlcode.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/gdlcode.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/gdlcode.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/gdlcode.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gdlparse.gsl $_INSTALL_ROOT/bin/"
    cp gdlparse.gsl $_INSTALL_ROOT/bin/ || croak "\"cp gdlparse.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/gdlparse.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/gdlparse.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/gdlparse.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gurudoc.gsl $_INSTALL_ROOT/bin/"
    cp gurudoc.gsl $_INSTALL_ROOT/bin/ || croak "\"cp gurudoc.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/gurudoc.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/gurudoc.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/gurudoc.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mkgdl $_INSTALL_ROOT/bin/"
    cp mkgdl $_INSTALL_ROOT/bin/ || croak "\"cp mkgdl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/mkgdl"
    chmod 0755 $_INSTALL_ROOT/bin/mkgdl || croak "\"chmod 0755 $_INSTALL_ROOT/bin/mkgdl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mkgdl.bat $_INSTALL_ROOT/bin/"
    cp mkgdl.bat $_INSTALL_ROOT/bin/ || croak "\"cp mkgdl.bat $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mkgdl.bat"
    chmod 0644 $_INSTALL_ROOT/bin/mkgdl.bat || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mkgdl.bat\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gurudoc $_INSTALL_ROOT/bin/"
    cp gurudoc $_INSTALL_ROOT/bin/ || croak "\"cp gurudoc $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/gurudoc"
    chmod 0755 $_INSTALL_ROOT/bin/gurudoc || croak "\"chmod 0755 $_INSTALL_ROOT/bin/gurudoc\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gurudoc.bat $_INSTALL_ROOT/bin/"
    cp gurudoc.bat $_INSTALL_ROOT/bin/ || croak "\"cp gurudoc.bat $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/gurudoc.bat"
    chmod 0644 $_INSTALL_ROOT/bin/gurudoc.bat || croak "\"chmod 0644 $_INSTALL_ROOT/bin/gurudoc.bat\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mod_gdl.gsl $_INSTALL_ROOT/bin/"
    cp mod_gdl.gsl $_INSTALL_ROOT/bin/ || croak "\"cp mod_gdl.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mod_gdl.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/mod_gdl.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mod_gdl.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gd2xhtml $_INSTALL_ROOT/bin/"
    cp gd2xhtml $_INSTALL_ROOT/bin/ || croak "\"cp gd2xhtml $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/gd2xhtml"
    chmod 0755 $_INSTALL_ROOT/bin/gd2xhtml || croak "\"chmod 0755 $_INSTALL_ROOT/bin/gd2xhtml\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gd2xhtml.bat $_INSTALL_ROOT/bin/"
    cp gd2xhtml.bat $_INSTALL_ROOT/bin/ || croak "\"cp gd2xhtml.bat $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/gd2xhtml.bat"
    chmod 0644 $_INSTALL_ROOT/bin/gd2xhtml.bat || croak "\"chmod 0644 $_INSTALL_ROOT/bin/gd2xhtml.bat\" failed"
    [ "$BOOM_TRACE" ] && echo "cp html_frame.gsl $_INSTALL_ROOT/bin/"
    cp html_frame.gsl $_INSTALL_ROOT/bin/ || croak "\"cp html_frame.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/html_frame.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/html_frame.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/html_frame.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp html_simple.gsl $_INSTALL_ROOT/bin/"
    cp html_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp html_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/html_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/html_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/html_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp html_multi.gsl $_INSTALL_ROOT/bin/"
    cp html_multi.gsl $_INSTALL_ROOT/bin/ || croak "\"cp html_multi.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/html_multi.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/html_multi.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/html_multi.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp html_library.gsl $_INSTALL_ROOT/bin/"
    cp html_library.gsl $_INSTALL_ROOT/bin/ || croak "\"cp html_library.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/html_library.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/html_library.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/html_library.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp txt_simple.gsl $_INSTALL_ROOT/bin/"
    cp txt_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp txt_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/txt_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/txt_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/txt_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp rtf_simple.gsl $_INSTALL_ROOT/bin/"
    cp rtf_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp rtf_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/rtf_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/rtf_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/rtf_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp latex_simple.gsl $_INSTALL_ROOT/bin/"
    cp latex_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp latex_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/latex_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/latex_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/latex_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mod_rtf.gsl $_INSTALL_ROOT/bin/"
    cp mod_rtf.gsl $_INSTALL_ROOT/bin/ || croak "\"cp mod_rtf.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mod_rtf.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/mod_rtf.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mod_rtf.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp texi_simple.gsl $_INSTALL_ROOT/bin/"
    cp texi_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp texi_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/texi_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/texi_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/texi_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp groff_simple.gsl $_INSTALL_ROOT/bin/"
    cp groff_simple.gsl $_INSTALL_ROOT/bin/ || croak "\"cp groff_simple.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/groff_simple.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/groff_simple.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/groff_simple.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ooo_document.gsl $_INSTALL_ROOT/bin/"
    cp ooo_document.gsl $_INSTALL_ROOT/bin/ || croak "\"cp ooo_document.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/ooo_document.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/ooo_document.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/ooo_document.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ooo_whitepaper.gsl $_INSTALL_ROOT/bin/"
    cp ooo_whitepaper.gsl $_INSTALL_ROOT/bin/ || croak "\"cp ooo_whitepaper.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/ooo_whitepaper.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/ooo_whitepaper.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/ooo_whitepaper.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frame.htm $_INSTALL_ROOT/bin/"
    cp tpl_frame.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frame.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frame.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frame.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frame.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frame_body.htm $_INSTALL_ROOT/bin/"
    cp tpl_frame_body.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frame_body.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_body.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_body.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_body.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frame_bot.htm $_INSTALL_ROOT/bin/"
    cp tpl_frame_bot.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frame_bot.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_bot.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_bot.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_bot.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frame_top.htm $_INSTALL_ROOT/bin/"
    cp tpl_frame_top.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frame_top.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_top.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_top.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_top.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frame_toc.htm $_INSTALL_ROOT/bin/"
    cp tpl_frame_toc.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frame_toc.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_toc.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_toc.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frame_toc.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_simple.htm $_INSTALL_ROOT/bin/"
    cp tpl_simple.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_simple.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_simple.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_simple.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_simple.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_document.sxw $_INSTALL_ROOT/bin/"
    cp tpl_document.sxw $_INSTALL_ROOT/bin/ || croak "\"cp tpl_document.sxw $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_document.sxw"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_document.sxw || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_document.sxw\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_whitepaper.sxw $_INSTALL_ROOT/bin/"
    cp tpl_whitepaper.sxw $_INSTALL_ROOT/bin/ || croak "\"cp tpl_whitepaper.sxw $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_whitepaper.sxw"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_whitepaper.sxw || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_whitepaper.sxw\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_latex.tex $_INSTALL_ROOT/bin/"
    cp tpl_latex.tex $_INSTALL_ROOT/bin/ || croak "\"cp tpl_latex.tex $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_latex.tex"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_latex.tex || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_latex.tex\" failed"
    [ "$BOOM_TRACE" ] && echo "cp html_frameset.gsl $_INSTALL_ROOT/bin/"
    cp html_frameset.gsl $_INSTALL_ROOT/bin/ || croak "\"cp html_frameset.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/html_frameset.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/html_frameset.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/html_frameset.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frameset.htm $_INSTALL_ROOT/bin/"
    cp tpl_frameset.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frameset.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frameset_body.htm $_INSTALL_ROOT/bin/"
    cp tpl_frameset_body.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frameset_body.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_body.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_body.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_body.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frameset_bot.htm $_INSTALL_ROOT/bin/"
    cp tpl_frameset_bot.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frameset_bot.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_bot.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_bot.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_bot.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frameset_top.htm $_INSTALL_ROOT/bin/"
    cp tpl_frameset_top.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frameset_top.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_top.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_top.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_top.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp tpl_frameset_toc.htm $_INSTALL_ROOT/bin/"
    cp tpl_frameset_toc.htm $_INSTALL_ROOT/bin/ || croak "\"cp tpl_frameset_toc.htm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_toc.htm"
    chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_toc.htm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/tpl_frameset_toc.htm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp wikidot.gsl $_INSTALL_ROOT/bin/"
    cp wikidot.gsl $_INSTALL_ROOT/bin/ || croak "\"cp wikidot.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/wikidot.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/wikidot.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/wikidot.gsl\" failed"
    mkdir -p $_INSTALL_ROOT/doc/Gurudoc/
    [ "$BOOM_TRACE" ] && echo "cp gddoc*.html $_INSTALL_ROOT/doc/Gurudoc/"
    cp gddoc*.html $_INSTALL_ROOT/doc/Gurudoc/ || croak "\"cp gddoc*.html $_INSTALL_ROOT/doc/Gurudoc/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gddoc*.html"
    chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gddoc*.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gddoc*.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mainlogo.jpg $_INSTALL_ROOT/doc/Gurudoc/"
    cp mainlogo.jpg $_INSTALL_ROOT/doc/Gurudoc/ || croak "\"cp mainlogo.jpg $_INSTALL_ROOT/doc/Gurudoc/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/mainlogo.jpg"
    chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/mainlogo.jpg || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/mainlogo.jpg\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gdstyle.css $_INSTALL_ROOT/doc/Gurudoc/"
    cp gdstyle.css $_INSTALL_ROOT/doc/Gurudoc/ || croak "\"cp gdstyle.css $_INSTALL_ROOT/doc/Gurudoc/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gdstyle.css"
    chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gdstyle.css || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/gdstyle.css\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    mkdir -p $_INSTALL_ROOT/doc/Gurudoc/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/Gurudoc/"
    cp readme.txt $_INSTALL_ROOT/doc/Gurudoc/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/Gurudoc/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Gurudoc/readme.txt\" failed"
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf"
    gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf || croak "\"gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "perl mkgdl gddoc.txt"
    perl mkgdl gddoc.txt || croak "\"perl mkgdl gddoc.txt\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc"
    gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc || croak "\"gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf"
    gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf || croak "\"gsl3 -q -xnf:gdl -doc:text -parse:1 -code:1 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "perl mkgdl gddoc.txt"
    perl mkgdl gddoc.txt || croak "\"perl mkgdl gddoc.txt\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc"
    gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc || croak "\"gsl3 -quiet -tpl:html_frameset -gdl:gddoc gurudoc\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED BINARIES   -----------------------

a_remove_generated_binaries() {
:
    rm -f liblocal.a
    #   Remove byproducts of typical work
    rm -f core* 
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f gdl.txt
    rm -f gdlcode.gsl
    rm -f gdlparse.gsl
    rm -f gddoc.gdl
    rm -f gddoc*.html
    rm -f stamp_generate
    rm -f gurudoc_*.zip
    rm -f gurudoc_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "gurudoc-1.3b1"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files, and"
    echo "    compiles all source files."
echo "compile:"
    echo "  From the raw project sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the raw project sources, removes all generated"
    echo "    source and binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project.  Note that binary"
    echo "    distributions can only be created at the product level."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  From the packaged sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  From the stripped-down packaged sources, compiles all source files"
    echo "    without any code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
    echo "    This action is only valid after a successful build."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

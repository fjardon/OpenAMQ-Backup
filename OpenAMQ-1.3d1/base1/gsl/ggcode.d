/*---------------------------------------------------------------------------*
 *  ggcode.d - LIBERO dialog data definitions for ggcode.c.                  *
 *  Generated by LIBERO 2.4 on  6 Oct, 2010, 19:29.                          *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define abort_event                     0
#define and_event                       1
#define anomaly_event                   2
#define append_event                    3
#define arithmetic_event                4
#define build_count_list_event          5
#define build_list_event                6
#define call_event                      7
#define close_event                     8
#define comment_event                   9
#define comparison_event                10
#define continue_event                  11
#define copy_event                      12
#define default_event                   13
#define define_event                    14
#define delete_event                    15
#define dialog_return_event             16
#define direct_event                    17
#define done_event                      18
#define echo_event                      19
#define else_event                      20
#define elsif_event                     21
#define end_for_event                   22
#define end_function_event              23
#define end_if_event                    24
#define end_macro_event                 25
#define end_new_event                   26
#define end_of_script_event             27
#define end_scope_event                 28
#define end_template_event              29
#define end_while_event                 30
#define error_event                     31
#define evaluate_event                  32
#define evaluate_call_event             33
#define evaluate_count_event            34
#define evaluate_extended_scope_event   35
#define evaluate_reference_event        36
#define evaluate_simple_scope_event     37
#define exception_event                 38
#define execute_event                   39
#define execute_line_event              40
#define expression_event                41
#define extended_scope_event            42
#define false_event                     43
#define fatal_event                     44
#define finish_event                    45
#define for_event                       46
#define function_event                  47
#define function_call_event             48
#define gsl_event                       49
#define if_event                        50
#define last_event                      51
#define line_event                      52
#define literal_event                   53
#define load_script_file_event          54
#define load_script_text_event          55
#define macro_event                     56
#define member_event                    57
#define method_event                    58
#define move_event                      59
#define new_event                       60
#define next_event                      61
#define next_arg_event                  62
#define none_event                      63
#define number_event                    64
#define ok_event                        65
#define operand_event                   66
#define operator_event                  67
#define or_event                        68
#define output_event                    69
#define parse_op1_to_operand_event      70
#define reference_event                 71
#define reject_event                    72
#define result_event                    73
#define return_event                    74
#define safe_comparison_event           75
#define save_event                      76
#define scope_event                     77
#define script_stack_empty_event        78
#define shutdown_event                  79
#define simple_scope_event              80
#define sort_event                      81
#define start_event                     82
#define substitute_event                83
#define symbol_event                    84
#define template_event                  85
#define text_event                      86
#define true_event                      87
#define undefined_event                 88
#define value_event                     89
#define while_event                     90
#define xml_event                       91
#define _LR_STATE_after_init            0
#define _LR_STATE_starting              1
#define _LR_STATE_loading               2
#define _LR_STATE_continue_loading      3
#define _LR_STATE_stepping              4
#define _LR_STATE_continuing            5
#define _LR_STATE_coding                6
#define _LR_STATE_evaluating_call       7
#define _LR_STATE_evaluating            8
#define _LR_STATE_evaluating_define     9
#define _LR_STATE_building_list         10
#define _LR_STATE_building_count_list   11
#define _LR_STATE_iterating_loop        12
#define _LR_STATE_terminating_loop      13
#define _LR_STATE_testing_condition     14
#define _LR_STATE_finding_block         15
#define _LR_STATE_skipping_block        16
#define _LR_STATE_evaluating_parameters 17
#define _LR_STATE_after_calling_method  18
#define _LR_STATE_evaluating_simple_scope 19
#define _LR_STATE_evaluating_extended_scope 20
#define _LR_STATE_evaluating_reference  21
#define _LR_STATE_parsing_expression    22
#define _LR_STATE_evaluating_operator   23
#define _LR_STATE_defaults              24
#define _LR_defaults_state              24


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE reset_error_occurrence       (THREAD *thread);
MODULE call_load_initial_script     (THREAD *thread);
MODULE raise_exception_if_error_occurred (THREAD *thread);
MODULE get_next_script_line         (THREAD *thread);
MODULE call_execute_script_line     (THREAD *thread);
MODULE generate_ok_event            (THREAD *thread);
MODULE call_accept_gsl_command      (THREAD *thread);
MODULE return_ok_feedback           (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE copy_output_buffer_to_output (THREAD *thread);
MODULE push_script_position         (THREAD *thread);
MODULE call_function_call_exception (THREAD *thread);
MODULE flag_error_occurrence        (THREAD *thread);
MODULE log_load_error               (THREAD *thread);
MODULE destroy_script_text          (THREAD *thread);
MODULE start_new_script             (THREAD *thread);
MODULE dialog_return                (THREAD *thread);
MODULE destroy_new_script           (THREAD *thread);
MODULE close_script_file            (THREAD *thread);
MODULE pop_script_position          (THREAD *thread);
MODULE finish_exception_if_execute_full (THREAD *thread);
MODULE create_result_root           (THREAD *thread);
MODULE call_evaluate_op1            (THREAD *thread);
MODULE copy_line_to_output          (THREAD *thread);
MODULE free_result_root             (THREAD *thread);
MODULE after_executing_line         (THREAD *thread);
MODULE call_evaluate_scope          (THREAD *thread);
MODULE call_evaluate_name           (THREAD *thread);
MODULE generate_operator_type_event (THREAD *thread);
MODULE register_macro_or_function   (THREAD *thread);
MODULE skip_block                   (THREAD *thread);
MODULE close_output_file            (THREAD *thread);
MODULE open_file_for_output         (THREAD *thread);
MODULE open_file_for_append         (THREAD *thread);
MODULE call_prepare_to_interpret_gsl (THREAD *thread);
MODULE copy_direct_to_output        (THREAD *thread);
MODULE call_evaluate_as             (THREAD *thread);
MODULE call_evaluate_to             (THREAD *thread);
MODULE call_evaluate_before         (THREAD *thread);
MODULE call_evaluate_after          (THREAD *thread);
MODULE load_source_xml              (THREAD *thread);
MODULE call_build_iteration_list    (THREAD *thread);
MODULE sort_xml_items               (THREAD *thread);
MODULE destroy_for_block            (THREAD *thread);
MODULE initialise_for_block         (THREAD *thread);
MODULE go_to_top_of_block           (THREAD *thread);
MODULE confirm_scope_name_is_correct (THREAD *thread);
MODULE iterate_for_loop             (THREAD *thread);
MODULE initialise_scope_block       (THREAD *thread);
MODULE close_the_scope              (THREAD *thread);
MODULE skip_block_if_condition_false (THREAD *thread);
MODULE go_to_top_of_named_block     (THREAD *thread);
MODULE generate_node_type_event     (THREAD *thread);
MODULE generate_condition_event     (THREAD *thread);
MODULE echo_text_to_console         (THREAD *thread);
MODULE invoke_abort_handler         (THREAD *thread);
MODULE copy_xml_item                (THREAD *thread);
MODULE delete_xml_item              (THREAD *thread);
MODULE move_xml_item                (THREAD *thread);
MODULE save_xml_file                (THREAD *thread);
MODULE initialise_new_block         (THREAD *thread);
MODULE call_evaluate_call           (THREAD *thread);
MODULE pickup_call_result           (THREAD *thread);
MODULE generate_call_type_event     (THREAD *thread);
MODULE save_return_value            (THREAD *thread);
MODULE close_macro_block            (THREAD *thread);
MODULE pop_current_node             (THREAD *thread);
MODULE dialog_pop                   (THREAD *thread);
MODULE get_first_parameter          (THREAD *thread);
MODULE push_current_node            (THREAD *thread);
MODULE initialise_macro_block       (THREAD *thread);
MODULE call_evaluate_op2            (THREAD *thread);
MODULE evaluate_substitute_node     (THREAD *thread);
MODULE finish_evaluating_node       (THREAD *thread);
MODULE evaluate_literal_node        (THREAD *thread);
MODULE evaluate_number_node         (THREAD *thread);
MODULE call_parse_op1_to_operand_exception (THREAD *thread);
MODULE call_evaluate_operand        (THREAD *thread);
MODULE pickup_operand_result        (THREAD *thread);
MODULE evaluate_symbol_node         (THREAD *thread);
MODULE evaluate_member_node         (THREAD *thread);
MODULE evaluate_text_node           (THREAD *thread);
MODULE define_symbol_as_node_op2_result (THREAD *thread);
MODULE prepare_define_expression    (THREAD *thread);
MODULE evaluate_arithmetic_operator (THREAD *thread);
MODULE define_symbol_as_node_result (THREAD *thread);
MODULE raise_exception_if_symbol_is_defined (THREAD *thread);
MODULE reject_if_where_clause_false (THREAD *thread);
MODULE save_sort_key_value          (THREAD *thread);
MODULE get_next_child               (THREAD *thread);
MODULE kill_scope_item              (THREAD *thread);
MODULE open_count_alias_block       (THREAD *thread);
MODULE close_count_alias_block      (THREAD *thread);
MODULE call_evaluate_the_parameter  (THREAD *thread);
MODULE get_next_parameter           (THREAD *thread);
MODULE call_evaluate_the_reference_parameter (THREAD *thread);
MODULE insert_null_result_node      (THREAD *thread);
MODULE call_evaluate_the_simple_scope_parameter (THREAD *thread);
MODULE call_evaluate_the_extended_scope_parameter (THREAD *thread);
MODULE evaluate_call_method_node    (THREAD *thread);
MODULE report_illegal_scope_parameter (THREAD *thread);
MODULE copy_result_from_op1         (THREAD *thread);
MODULE node_scope_must_be_null      (THREAD *thread);
MODULE copy_result_from_name        (THREAD *thread);
MODULE one_of_scope_name_must_be_null (THREAD *thread);
MODULE copy_name_to_scope_if_defined (THREAD *thread);
MODULE save_parse_result_to_operand (THREAD *thread);
MODULE log_parse_error              (THREAD *thread);
MODULE concatenate_operands         (THREAD *thread);
MODULE return_op1_if_defined        (THREAD *thread);
MODULE return_op2                   (THREAD *thread);
MODULE evaluate_comparison_operator (THREAD *thread);
MODULE return_false_if_op1_undefined (THREAD *thread);
MODULE return_false_if_op2_undefined (THREAD *thread);
MODULE return_true_if_op1_true      (THREAD *thread);
MODULE return_false_if_op1_false    (THREAD *thread);
MODULE check_for_shutdown_request   (THREAD *thread);
MODULE before_executing_line        (THREAD *thread);
MODULE request_load_script_file     (THREAD *thread);
MODULE request_load_script_text     (THREAD *thread);
MODULE begin_evaluating_node        (THREAD *thread);
MODULE parse_op1_to_operand         (THREAD *thread);
MODULE build_fake_for_node          (THREAD *thread);
MODULE call_build_count_iteration_list (THREAD *thread);
MODULE save_total_as_result         (THREAD *thread);
MODULE destroy_fake_for_node        (THREAD *thread);
MODULE get_first_child              (THREAD *thread);
MODULE signal_internal_error        (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [25][92] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0
     ,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0
     ,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0
     ,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0
     ,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0
     ,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0
     ,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0
     ,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0
     ,0,0
    },
    { 4,0,0,6,0,0,0,6,6,6,0,0,6,0,9,6,0,6,0,6,16,16,6,6,6,6,6,0,6
     ,6,6,0,0,7,0,0,0,0,6,0,0,0,0,0,0,0,6,6,0,6,14,13,6,0,0,0,6,0
     ,0,6,6,12,0,0,0,0,0,0,0,6,0,0,0,0,6,0,6,6,0,0,0,6,0,0,0,6,0
     ,0,0,0,6,6
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,17
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,7,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0
     ,0,0,0,0,8,0,8,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,8,0,0
     ,0,0,0
    },
    { 0,0,0,0,9,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,10,0,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,11,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,12,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,13,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,14,0,0,15,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,0,0,16,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,18,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0
     ,0,0,17,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0
     ,0,0,0,0,0,19,0,19,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0
     ,0,0,0,0,0,20,0,20,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,23,0,0,23,0,0,0,0,0,23,0,0,23,0,0,23,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,23,0,0,0,0,0,23,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0
     ,0,0,0,23,0,0,0
    },
    { 0,0,24,0,0,11,10,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,24,8,0,24,20,21,19,24,0,6,0,0,0,24,24,0,0,0,0,0,0,0,0
     ,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,24,24,0,0
     ,0,0,0,0,0,0,0,0,0,0
    }
};

static word _LR_action [25][92] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0
     ,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0
     ,0,0
    },
    { 0,0,0,0,0,0,0,10,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0
     ,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,11,9,0,0,0,0,0,0,0,0,0
     ,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0
     ,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0
     ,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,10,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0
     ,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,11,19,0,0,0,0,0,0,0
     ,0,0,0,0,18,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0
     ,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0
     ,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 44,0,0,28,0,0,0,50,32,24,0,0,45,0,25,46,0,30,0,43,42,42,35
     ,53,24,53,37,0,37,24,39,0,0,51,0,0,0,0,54,0,0,0,0,0,0,0,34
     ,26,0,29,41,40,23,0,0,0,26,0,0,47,49,40,0,0,0,0,0,0,0,27,0,0
     ,0,0,52,0,48,36,0,0,0,33,0,0,0,24,0,0,0,0,38,31
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,55
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,64,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,62
     ,0,0,0,0,0,0,59,0,60,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,61
     ,0,66,0,0,0,0,0
    },
    { 0,0,0,0,69,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,68,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,73,0,71,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,73,0,74,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,38,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,77,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,41,0,0,24,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,0,0,24,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,81,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,84,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0
     ,0,0,79,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0
     ,0,0,0,0,0,59,0,86,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0
     ,0,0,0,0,0,59,0,88,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0
     ,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0
     ,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0
    },
    { 0,99,0,0,94,0,0,0,0,0,96,0,0,95,0,0,101,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,100,0,0,0,0,0,98,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0
     ,0,0,0,0,93,0,0,0
    },
    { 0,0,110,0,0,109,109,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,111,105,0,108,107,107,107,73,0,102,0,0,0,112,112
     ,0,0,0,0,0,0,0,0,103,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0
     ,0,0,0,0,0,110,112,0,0,0,0,0,0,0,0,0,0,0,0
    }
};

#if (defined (SMT_PROFILE))
static word _LR_count [128];
static long _LR_time  [128];
static word _LR_flow  [25][92];
#endif

static word _LR_offset [] =
{
    0,
    0,
    8,
    10,
    18,
    21,
    23,
    26,
    33,
    40,
    47,
    53,
    57,
    60,
    63,
    67,
    71,
    77,
    82,
    86,
    94,
    101,
    105,
    109,
    117,
    120,
    127,
    138,
    147,
    156,
    168,
    180,
    200,
    204,
    219,
    233,
    244,
    254,
    264,
    272,
    281,
    289,
    295,
    298,
    306,
    316,
    332,
    340,
    356,
    366,
    384,
    396,
    399,
    412,
    419,
    423,
    425,
    433,
    444,
    451,
    460,
    471,
    480,
    489,
    500,
    505,
    507,
    512,
    515,
    522,
    531,
    539,
    548,
    552,
    554,
    563,
    567,
    572,
    576,
    580,
    584,
    588,
    591,
    595,
    599,
    602,
    605,
    612,
    621,
    627,
    638,
    646,
    649,
    655,
    664,
    673,
    683,
    692,
    703,
    713,
    723,
    731,
    735,
    739,
    741,
    743,
    748,
    750,
    754,
    766,
    769,
    772,
    775
};

static word _LR_vector [] =
{
    0,1,2,3,4,2,5,_LR_STOP,
    0,_LR_STOP,
    0,6,2,3,4,2,5,_LR_STOP,
    7,8,_LR_STOP,
    7,_LR_STOP,
    9,7,_LR_STOP,
    1,2,3,4,2,5,_LR_STOP,
    1,2,3,4,2,7,_LR_STOP,
    6,2,3,4,2,5,_LR_STOP,
    10,3,11,2,7,_LR_STOP,
    4,2,5,_LR_STOP,
    0,7,_LR_STOP,
    12,13,_LR_STOP,
    14,15,16,_LR_STOP,
    14,17,16,_LR_STOP,
    18,19,3,4,2,_LR_STOP,
    3,4,2,5,_LR_STOP,
    3,4,2,_LR_STOP,
    10,6,2,3,4,2,5,_LR_STOP,
    18,19,3,4,2,5,_LR_STOP,
    9,7,20,_LR_STOP,
    20,0,7,_LR_STOP,
    21,22,2,23,24,25,16,_LR_STOP,
    25,16,_LR_STOP,
    21,26,2,27,2,28,_LR_STOP,
    21,26,2,27,2,29,30,24,25,16,_LR_STOP,
    21,22,2,31,32,24,25,16,_LR_STOP,
    21,22,2,31,33,24,25,16,_LR_STOP,
    21,22,2,26,2,10,34,2,24,25,16,_LR_STOP,
    21,22,2,26,2,27,2,35,24,25,16,_LR_STOP,
    21,22,2,26,2,27,2,36,2,37,2,38,2,39,2,40,24,25,16,_LR_STOP,
    31,25,16,_LR_STOP,
    21,26,2,27,2,36,2,41,2,42,43,24,25,16,_LR_STOP,
    21,26,2,27,2,36,2,41,2,44,24,25,16,_LR_STOP,
    21,26,2,45,46,2,24,47,25,16,_LR_STOP,
    21,26,2,36,2,48,24,25,16,_LR_STOP,
    21,26,2,46,2,24,49,25,16,_LR_STOP,
    21,22,2,50,24,25,16,_LR_STOP,
    21,45,22,2,50,24,25,16,_LR_STOP,
    21,26,2,51,2,24,52,_LR_STOP,
    21,22,2,53,2,_LR_STOP,
    30,52,_LR_STOP,
    21,22,2,54,24,25,16,_LR_STOP,
    21,22,2,54,24,55,7,25,20,_LR_STOP,
    21,26,2,36,2,37,2,38,2,39,2,56,24,25,16,_LR_STOP,
    21,26,2,57,24,25,16,_LR_STOP,
    21,26,2,36,2,37,2,38,2,39,2,58,24,25,16,_LR_STOP,
    21,26,2,36,2,59,24,25,16,_LR_STOP,
    21,26,2,27,2,36,2,37,2,38,2,39,2,60,24,25,16,_LR_STOP,
    21,26,2,27,2,61,2,62,24,25,16,_LR_STOP,
    63,2,_LR_STOP,
    21,22,2,64,65,2,24,19,66,67,25,16,_LR_STOP,
    65,19,66,67,25,16,_LR_STOP,
    24,25,16,_LR_STOP,
    68,_LR_STOP,
    22,2,69,10,70,2,5,_LR_STOP,
    22,2,71,2,36,2,72,73,66,16,_LR_STOP,
    22,2,74,73,66,16,_LR_STOP,
    22,2,71,2,75,73,66,16,_LR_STOP,
    22,2,76,2,77,2,78,73,66,16,_LR_STOP,
    26,2,27,2,79,73,66,16,_LR_STOP,
    22,2,71,2,80,73,66,16,_LR_STOP,
    26,2,27,2,61,2,62,73,66,16,_LR_STOP,
    69,63,2,66,_LR_STOP,
    28,_LR_STOP,
    81,73,66,16,_LR_STOP,
    66,16,_LR_STOP,
    71,2,82,24,25,16,_LR_STOP,
    71,2,83,84,85,24,25,16,_LR_STOP,
    86,71,2,82,24,25,16,_LR_STOP,
    22,2,87,71,2,88,89,2,_LR_STOP,
    90,89,2,_LR_STOP,
    16,_LR_STOP,
    91,22,2,92,87,90,89,2,_LR_STOP,
    47,25,16,_LR_STOP,
    43,30,25,16,_LR_STOP,
    30,25,16,_LR_STOP,
    24,30,52,_LR_STOP,
    93,2,94,_LR_STOP,
    95,2,94,_LR_STOP,
    96,94,_LR_STOP,
    97,2,94,_LR_STOP,
    98,2,94,_LR_STOP,
    99,2,_LR_STOP,
    100,16,_LR_STOP,
    22,2,101,73,66,16,_LR_STOP,
    102,2,27,2,103,73,66,16,_LR_STOP,
    22,2,73,66,16,_LR_STOP,
    104,2,26,2,27,2,105,73,66,16,_LR_STOP,
    26,2,27,2,73,66,16,_LR_STOP,
    106,16,_LR_STOP,
    12,107,20,24,16,_LR_STOP,
    22,2,71,2,108,73,66,16,_LR_STOP,
    22,2,71,2,84,73,66,16,_LR_STOP,
    22,2,109,71,2,110,73,66,16,_LR_STOP,
    22,2,71,2,111,73,66,16,_LR_STOP,
    22,2,112,71,2,113,111,73,66,16,_LR_STOP,
    22,2,114,71,2,84,73,66,16,_LR_STOP,
    22,2,115,71,2,84,73,66,16,_LR_STOP,
    22,2,71,2,73,66,16,_LR_STOP,
    73,66,16,_LR_STOP,
    116,117,52,_LR_STOP,
    118,_LR_STOP,
    119,_LR_STOP,
    116,69,120,52,_LR_STOP,
    121,_LR_STOP,
    69,120,52,_LR_STOP,
    122,26,2,27,2,123,2,124,43,125,16,_LR_STOP,
    126,2,_LR_STOP,
    127,8,_LR_STOP,
    12,16,_LR_STOP,
    8,_LR_STOP
};

static HOOK *_LR_module [128] = {
    reset_error_occurrence,
    call_load_initial_script,
    raise_exception_if_error_occurred,
    get_next_script_line,
    call_execute_script_line,
    generate_ok_event,
    call_accept_gsl_command,
    return_ok_feedback,
    terminate_the_thread,
    copy_output_buffer_to_output,
    push_script_position,
    call_function_call_exception,
    flag_error_occurrence,
    log_load_error,
    destroy_script_text,
    start_new_script,
    dialog_return,
    destroy_new_script,
    close_script_file,
    pop_script_position,
    finish_exception_if_execute_full,
    create_result_root,
    call_evaluate_op1,
    copy_line_to_output,
    free_result_root,
    after_executing_line,
    call_evaluate_scope,
    call_evaluate_name,
    generate_operator_type_event,
    register_macro_or_function,
    skip_block,
    close_output_file,
    open_file_for_output,
    open_file_for_append,
    call_prepare_to_interpret_gsl,
    copy_direct_to_output,
    call_evaluate_as,
    call_evaluate_to,
    call_evaluate_before,
    call_evaluate_after,
    load_source_xml,
    call_build_iteration_list,
    sort_xml_items,
    destroy_for_block,
    initialise_for_block,
    go_to_top_of_block,
    confirm_scope_name_is_correct,
    iterate_for_loop,
    initialise_scope_block,
    close_the_scope,
    skip_block_if_condition_false,
    go_to_top_of_named_block,
    generate_node_type_event,
    generate_condition_event,
    echo_text_to_console,
    invoke_abort_handler,
    copy_xml_item,
    delete_xml_item,
    move_xml_item,
    save_xml_file,
    initialise_new_block,
    call_evaluate_call,
    pickup_call_result,
    generate_call_type_event,
    save_return_value,
    close_macro_block,
    pop_current_node,
    dialog_pop,
    get_first_parameter,
    push_current_node,
    initialise_macro_block,
    call_evaluate_op2,
    evaluate_substitute_node,
    finish_evaluating_node,
    evaluate_literal_node,
    evaluate_number_node,
    call_parse_op1_to_operand_exception,
    call_evaluate_operand,
    pickup_operand_result,
    evaluate_symbol_node,
    evaluate_member_node,
    evaluate_text_node,
    define_symbol_as_node_op2_result,
    prepare_define_expression,
    evaluate_arithmetic_operator,
    define_symbol_as_node_result,
    raise_exception_if_symbol_is_defined,
    reject_if_where_clause_false,
    save_sort_key_value,
    get_next_child,
    kill_scope_item,
    open_count_alias_block,
    close_count_alias_block,
    call_evaluate_the_parameter,
    get_next_parameter,
    call_evaluate_the_reference_parameter,
    insert_null_result_node,
    call_evaluate_the_simple_scope_parameter,
    call_evaluate_the_extended_scope_parameter,
    evaluate_call_method_node,
    report_illegal_scope_parameter,
    copy_result_from_op1,
    node_scope_must_be_null,
    copy_result_from_name,
    one_of_scope_name_must_be_null,
    copy_name_to_scope_if_defined,
    save_parse_result_to_operand,
    log_parse_error,
    concatenate_operands,
    return_op1_if_defined,
    return_op2,
    evaluate_comparison_operator,
    return_false_if_op1_undefined,
    return_false_if_op2_undefined,
    return_true_if_op1_true,
    return_false_if_op1_false,
    check_for_shutdown_request,
    before_executing_line,
    request_load_script_file,
    request_load_script_text,
    begin_evaluating_node,
    parse_op1_to_operand,
    build_fake_for_node,
    call_build_count_iteration_list,
    save_total_as_result,
    destroy_fake_for_node,
    get_first_child,
    signal_internal_error
};

#if (defined (DEBUG))
static char *_LR_mname [128] =
{
     "Reset-Error-Occurrence",
     "Call-Load-Initial-Script",
     "Raise-Exception-If-Error-Occurred",
     "Get-Next-Script-Line",
     "Call-Execute-Script-Line",
     "Generate-Ok-Event",
     "Call-Accept-Gsl-Command",
     "Return-Ok-Feedback",
     "Terminate-The-Thread",
     "Copy-Output-Buffer-To-Output",
     "Push-Script-Position",
     "Call-Function-Call-Exception",
     "Flag-Error-Occurrence",
     "Log-Load-Error",
     "Destroy-Script-Text",
     "Start-New-Script",
     "Dialog-Return",
     "Destroy-New-Script",
     "Close-Script-File",
     "Pop-Script-Position",
     "Finish-Exception-If-Execute-Full",
     "Create-Result-Root",
     "Call-Evaluate-Op1",
     "Copy-Line-To-Output",
     "Free-Result-Root",
     "After-Executing-Line",
     "Call-Evaluate-Scope",
     "Call-Evaluate-Name",
     "Generate-Operator-Type-Event",
     "Register-Macro-Or-Function",
     "Skip-Block",
     "Close-Output-File",
     "Open-File-For-Output",
     "Open-File-For-Append",
     "Call-Prepare-To-Interpret-Gsl",
     "Copy-Direct-To-Output",
     "Call-Evaluate-As",
     "Call-Evaluate-To",
     "Call-Evaluate-Before",
     "Call-Evaluate-After",
     "Load-Source-Xml",
     "Call-Build-Iteration-List",
     "Sort-Xml-Items",
     "Destroy-For-Block",
     "Initialise-For-Block",
     "Go-To-Top-Of-Block",
     "Confirm-Scope-Name-Is-Correct",
     "Iterate-For-Loop",
     "Initialise-Scope-Block",
     "Close-The-Scope",
     "Skip-Block-If-Condition-False",
     "Go-To-Top-Of-Named-Block",
     "Generate-Node-Type-Event",
     "Generate-Condition-Event",
     "Echo-Text-To-Console",
     "Invoke-Abort-Handler",
     "Copy-Xml-Item",
     "Delete-Xml-Item",
     "Move-Xml-Item",
     "Save-Xml-File",
     "Initialise-New-Block",
     "Call-Evaluate-Call",
     "Pickup-Call-Result",
     "Generate-Call-Type-Event",
     "Save-Return-Value",
     "Close-Macro-Block",
     "Pop-Current-Node",
     "Dialog-Pop",
     "Get-First-Parameter",
     "Push-Current-Node",
     "Initialise-Macro-Block",
     "Call-Evaluate-Op2",
     "Evaluate-Substitute-Node",
     "Finish-Evaluating-Node",
     "Evaluate-Literal-Node",
     "Evaluate-Number-Node",
     "Call-Parse-Op1-To-Operand-Exception",
     "Call-Evaluate-Operand",
     "Pickup-Operand-Result",
     "Evaluate-Symbol-Node",
     "Evaluate-Member-Node",
     "Evaluate-Text-Node",
     "Define-Symbol-As-Node-Op2-Result",
     "Prepare-Define-Expression",
     "Evaluate-Arithmetic-Operator",
     "Define-Symbol-As-Node-Result",
     "Raise-Exception-If-Symbol-Is-Defined",
     "Reject-If-Where-Clause-False",
     "Save-Sort-Key-Value",
     "Get-Next-Child",
     "Kill-Scope-Item",
     "Open-Count-Alias-Block",
     "Close-Count-Alias-Block",
     "Call-Evaluate-The-Parameter",
     "Get-Next-Parameter",
     "Call-Evaluate-The-Reference-Parameter",
     "Insert-Null-Result-Node",
     "Call-Evaluate-The-Simple-Scope-Parameter",
     "Call-Evaluate-The-Extended-Scope-Parameter",
     "Evaluate-Call-Method-Node",
     "Report-Illegal-Scope-Parameter",
     "Copy-Result-From-Op1",
     "Node-Scope-Must-Be-Null",
     "Copy-Result-From-Name",
     "One-Of-Scope-Name-Must-Be-Null",
     "Copy-Name-To-Scope-If-Defined",
     "Save-Parse-Result-To-Operand",
     "Log-Parse-Error",
     "Concatenate-Operands",
     "Return-Op1-If-Defined",
     "Return-Op2",
     "Evaluate-Comparison-Operator",
     "Return-False-If-Op1-Undefined",
     "Return-False-If-Op2-Undefined",
     "Return-True-If-Op1-True",
     "Return-False-If-Op1-False",
     "Check-For-Shutdown-Request",
     "Before-Executing-Line",
     "Request-Load-Script-File",
     "Request-Load-Script-Text",
     "Begin-Evaluating-Node",
     "Parse-Op1-To-Operand",
     "Build-Fake-For-Node",
     "Call-Build-Count-Iteration-List",
     "Save-Total-As-Result",
     "Destroy-Fake-For-Node",
     "Get-First-Child",
     "Signal-Internal-Error"
};

static char *_LR_sname [25] =
{
     "After-Init",
     "Starting",
     "Loading",
     "Continue-Loading",
     "Stepping",
     "Continuing",
     "Coding",
     "Evaluating-Call",
     "Evaluating",
     "Evaluating-Define",
     "Building-List",
     "Building-Count-List",
     "Iterating-Loop",
     "Terminating-Loop",
     "Testing-Condition",
     "Finding-Block",
     "Skipping-Block",
     "Evaluating-Parameters",
     "After-Calling-Method",
     "Evaluating-Simple-Scope",
     "Evaluating-Extended-Scope",
     "Evaluating-Reference",
     "Parsing-Expression",
     "Evaluating-Operator",
     "Defaults"
};

static char *_LR_ename [92] =
{
     "Abort-Event",
     "And-Event",
     "Anomaly-Event",
     "Append-Event",
     "Arithmetic-Event",
     "Build-Count-List-Event",
     "Build-List-Event",
     "Call-Event",
     "Close-Event",
     "Comment-Event",
     "Comparison-Event",
     "Continue-Event",
     "Copy-Event",
     "Default-Event",
     "Define-Event",
     "Delete-Event",
     "Dialog-Return-Event",
     "Direct-Event",
     "Done-Event",
     "Echo-Event",
     "Else-Event",
     "Elsif-Event",
     "End-For-Event",
     "End-Function-Event",
     "End-If-Event",
     "End-Macro-Event",
     "End-New-Event",
     "End-Of-Script-Event",
     "End-Scope-Event",
     "End-Template-Event",
     "End-While-Event",
     "Error-Event",
     "Evaluate-Event",
     "Evaluate-Call-Event",
     "Evaluate-Count-Event",
     "Evaluate-Extended-Scope-Event",
     "Evaluate-Reference-Event",
     "Evaluate-Simple-Scope-Event",
     "Exception-Event",
     "Execute-Event",
     "Execute-Line-Event",
     "Expression-Event",
     "Extended-Scope-Event",
     "False-Event",
     "Fatal-Event",
     "Finish-Event",
     "For-Event",
     "Function-Event",
     "Function-Call-Event",
     "Gsl-Event",
     "If-Event",
     "Last-Event",
     "Line-Event",
     "Literal-Event",
     "Load-Script-File-Event",
     "Load-Script-Text-Event",
     "Macro-Event",
     "Member-Event",
     "Method-Event",
     "Move-Event",
     "New-Event",
     "Next-Event",
     "Next-Arg-Event",
     "None-Event",
     "Number-Event",
     "Ok-Event",
     "Operand-Event",
     "Operator-Event",
     "Or-Event",
     "Output-Event",
     "Parse-Op1-To-Operand-Event",
     "Reference-Event",
     "Reject-Event",
     "Result-Event",
     "Return-Event",
     "Safe-Comparison-Event",
     "Save-Event",
     "Scope-Event",
     "Script-Stack-Empty-Event",
     "Shutdown-Event",
     "Simple-Scope-Event",
     "Sort-Event",
     "Start-Event",
     "Substitute-Event",
     "Symbol-Event",
     "Template-Event",
     "Text-Event",
     "True-Event",
     "Undefined-Event",
     "Value-Event",
     "While-Event",
     "Xml-Event"
};
#else
static char *_LR_mname [128] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94",
     "95",
     "96",
     "97",
     "98",
     "99",
     "100",
     "101",
     "102",
     "103",
     "104",
     "105",
     "106",
     "107",
     "108",
     "109",
     "110",
     "111",
     "112",
     "113",
     "114",
     "115",
     "116",
     "117",
     "118",
     "119",
     "120",
     "121",
     "122",
     "123",
     "124",
     "125",
     "126",
     "127"
};

static char *_LR_sname [25] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24"
};

static char *_LR_ename [92] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91"
};
#endif
MODULE dialog_return (THREAD *thread)
{
    _dialog_return (thread);
}

MODULE dialog_pop (THREAD *thread)
{
    _dialog_pop (thread);
}


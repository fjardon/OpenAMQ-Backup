/*===========================================================================*
 *                                                                           *
 *  gghead.h - Header for generated gsl.h                                    *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/
/*  ----------------------------------------------------------------<Prolog>-
    Synopsis:   This header file is GENERATED by the Boom installer.  DO NOT
                MODIFY THIS FILE.  If you change prelude.h, or any of the
                other GSL header files, re-run boomake to recreate this file.
 ------------------------------------------------------------------</Prolog>-*/
/*===========================================================================*
 *                                                                           *
 *  ggpars.h - Script parser functions                                       *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGPARS_INCLUDED                 /*  Allow multiple inclusions        */
#define GGPARS_INCLUDED


/*- Type definitions --------------------------------------------------------*/

typedef struct _SCRIPT_NODE        SCRIPT_NODE;

typedef enum { GG_COMMENT,
               GG_LINE,
               GG_TEXT,
               GG_SUBSTITUTE,
               GG_OPERATOR,
               GG_LITERAL,
               GG_NUMBER,
               GG_SYMBOL,
               GG_MEMBER,
               GG_CALL,
               GG_OPERAND,
               GG_OUTPUT,
               GG_APPEND,
               GG_CLOSE,
               GG_IF,
               GG_ELSIF,
               GG_ELSE,
               GG_END_IF,
               GG_FOR,
               GG_END_FOR,
               GG_SCOPE,
               GG_END_SCOPE,
               GG_NEW,
               GG_END_NEW,
               GG_DELETE,
               GG_MOVE,
               GG_COPY,
               GG_WHILE,
               GG_END_WHILE,
               GG_NEXT,
               GG_LAST,
               GG_MACRO,
               GG_END_MACRO,
               GG_FUNCTION,
               GG_END_FUNCTION,
               GG_RETURN,
               GG_GSL,
               GG_DIRECT,
               GG_XML,
               GG_TEMPLATE,
               GG_END_TEMPLATE,
               GG_ECHO,
               GG_ABORT,
               GG_DEFINE,
               GG_SAVE,
               GG_SORT,
               GG_UNDEFINED }
    SCRIPT_NODE_TYPE;


typedef enum { OP_UNDEFINED,
               OP_TIMES,
               OP_DIVIDE,
               OP_PLUS,
               OP_MINUS,
               OP_DEFAULT,
               OP_EQUALS,
               OP_NOT_EQUALS,
               OP_GREATER_THAN,
               OP_LESS_THAN,
               OP_GREATER_EQUAL,
               OP_LESS_EQUAL,
               OP_SAFE_EQUALS,
               OP_SAFE_NOT_EQUALS,
               OP_SAFE_GREATER_THAN,
               OP_SAFE_LESS_THAN,
               OP_SAFE_GREATER_EQUAL,
               OP_SAFE_LESS_EQUAL,
               OP_NOT,
               OP_OR,
               OP_AND,
               OP_NEXT_ARG }
    OPERATOR;


typedef enum { TYPE_UNDEFINED,
               TYPE_STRING,
               TYPE_NUMBER,
               TYPE_BLOCK,
               TYPE_UNKNOWN }
    DATA_TYPE;

typedef struct {
    DATA_TYPE
        type;
    char
       *s;                              /*  String value                     */
    double
        n;                              /*  Numeric value                    */
    char
      **b;                              /*  Block value                      */
} VALUE;

struct _SCRIPT_NODE {
    SCRIPT_NODE
        *parent;
    SCRIPT_NODE
        *scope,
        *name,
        *op1,
        *op2,
        *as,
        *to,
        *before,
        *after;
    VALUE          
        result;                         /*  Only used if result is constant  */
    int  
        width:16,                       /*  Width of script construct        */
        spaces:16,                      /*  Leading spaces in script         */
        line_break:16,                  /*  CRs following text               */
        brackets:16;
    OPERATOR
        operator:8;
    SCRIPT_NODE_TYPE
        type:8;
    int
        extend:1,
        constant:1,                     /*  Is the result constant?          */
        stacked:1,                      /*  Is scope to be 'stacked'?        */
        dynamic:1;                      /*  TRUE if job == 0.                */
};


/*  Function type for function to read next line of script                   */

typedef Bool (SCRIPT_READ) (void * job, char *text);


/*- Macros ------------------------------------------------------------------*/
            
#define init_script_node(n)                                                   \
    (n)-> type         = GG_UNDEFINED;                                        \
    (n)-> parent       = NULL;                                                \
    (n)-> brackets     = 0;                                                   \
    (n)-> width        = 0;                                                   \
    (n)-> spaces       = 0;                                                   \
    (n)-> scope        = NULL;                                                \
    (n)-> name         = NULL;                                                \
    (n)-> op1          = NULL;                                                \
    (n)-> op2          = NULL;                                                \
    (n)-> as           = NULL;                                                \
    (n)-> to           = NULL;                                                \
    (n)-> before       = NULL;                                                \
    (n)-> after        = NULL;                                                \
    (n)-> operator     = OP_UNDEFINED;                                        \
    (n)-> extend       = FALSE;                                               \
    (n)-> line_break   = 0;                                                   \
    (n)-> constant     = FALSE;                                               \
    (n)-> stacked      = FALSE;                                               \
    (n)-> dynamic      = FALSE;                                               \
    (n)-> result. type = TYPE_UNDEFINED;                                      \
    (n)-> result. s    = NULL;                                                \
    (n)-> result. b    = NULL;

#define init_value_node(n)                                                    \
    (n). type         = TYPE_UNDEFINED;                                       \
    (n). s            = NULL;                                                 \
    (n). b            = NULL;

/*  Prototypes  */
void         gg_free             (SCRIPT_NODE *node);
XML_ITEM    *gg_xml              (SCRIPT_NODE *node);
char        *operator_text       (OPERATOR op);

int          ggpars_init         (void);
int          gg_parse_template   (SCRIPT_READ *read,
                                  void        *job,
                                  MEMTRN      *memtrn,
                                  QUEUE       *replyqueue);
int          gg_parse_gsl        (SCRIPT_READ *read,
                                  void        *job,
                                  MEMTRN      *memtrn,
                                  QUEUE       *replyqueue);
int          gg_parse_expression (char        *expression,
                                  void        *job,
                                  MEMTRN      *memtrn,
                                  QUEUE       *replyqueue);
int          ggpars_term         (void);

/*---------------------------------------------------------------------------*/

#endif
/*---------------------------------------------------------------------------
 *  ggparsm.h - prototypes for ggpars messages.
 *
 *  Generated from ggpars.xml by smtmesg.gsl using GSL.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/
#ifndef INCLUDE_GGPARSM
#define INCLUDE_GGPARSM

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for ggpars - gslgen parser agent.
 *---------------------------------------------------------------------------*/

typedef struct {
    void *job;                          /*  job id                           */
} struct_ggpars_parse;

int
put_ggpars_parse (
          byte **_buffer,
    const void *job);                   /*  job id                           */

int
get_ggpars_parse (
    byte *_buffer,
    struct_ggpars_parse **params);

void
free_ggpars_parse (
    struct_ggpars_parse **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for template - parse template line.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_TEMPLATE;

#define declare_ggpars_template(_event, _priority)                             \
    method_declare (agent, GGPARS_TEMPLATE, _event, _priority)

/*  Send event - template                                                    */

int 
lsend_ggpars_template (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job);               /*  job id                           */

#define send_ggpars_template(_to,                                              \
            job)                                                             \
       lsend_ggpars_template(_to,                                              \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job)

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for gsl - parse gsl line.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_GSL;

#define declare_ggpars_gsl(_event, _priority)                                  \
    method_declare (agent, GGPARS_GSL, _event, _priority)

/*  Send event - gsl                                                         */

int 
lsend_ggpars_gsl (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job);               /*  job id                           */

#define send_ggpars_gsl(_to,                                                   \
            job)                                                             \
       lsend_ggpars_gsl(_to,                                                   \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job)

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for expression - parse expression.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_EXPRESSION;

#define declare_ggpars_expression(_event, _priority)                           \
    method_declare (agent, GGPARS_EXPRESSION, _event, _priority)

/*  Send event - expression                                                  */

int 
lsend_ggpars_expression (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job);               /*  job id                           */

#define send_ggpars_expression(_to,                                            \
            job)                                                             \
       lsend_ggpars_expression(_to,                                            \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job)


typedef struct {
    void *job;                          /*  job id                           */
    void *parse_root;                   /*  parse tree root                  */
    qbyte size;                         /*  Data size                        */
} struct_ggpars_ok;

int
put_ggpars_ok (
          byte **_buffer,
    const void *job,                    /*  job id                           */
    const void *parse_root,             /*  parse tree root                  */
    const qbyte size);                  /*  Data size                        */

int
get_ggpars_ok (
    byte *_buffer,
    struct_ggpars_ok **params);

void
free_ggpars_ok (
    struct_ggpars_ok **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for ok - ok reply.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_OK;

#define declare_ggpars_ok(_event, _priority)                                   \
    method_declare (agent, GGPARS_OK, _event, _priority)

/*  Send event - ok                                                          */

int 
lsend_ggpars_ok (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  job id                           */
    const void *parse_root,         /*  parse tree root                  */
    const qbyte size);              /*  Data size                        */

#define send_ggpars_ok(_to,                                                    \
            job,                                                             \
            parse_root,                                                      \
            size)                                                            \
       lsend_ggpars_ok(_to,                                                    \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            parse_root,                                                      \
            size)


typedef struct {
    void *job;                          /*  job id                           */
} struct_ggpars_eof;

int
put_ggpars_eof (
          byte **_buffer,
    const void *job);                   /*  job id                           */

int
get_ggpars_eof (
    byte *_buffer,
    struct_ggpars_eof **params);

void
free_ggpars_eof (
    struct_ggpars_eof **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for eof - eof reply.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_EOF;

#define declare_ggpars_eof(_event, _priority)                                  \
    method_declare (agent, GGPARS_EOF, _event, _priority)

/*  Send event - eof                                                         */

int 
lsend_ggpars_eof (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job);               /*  job id                           */

#define send_ggpars_eof(_to,                                                   \
            job)                                                             \
       lsend_ggpars_eof(_to,                                                   \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job)


typedef struct {
    void *job;                          /*  job id                           */
    char *error_text;                   /*  error message text               */
} struct_ggpars_error;

int
put_ggpars_error (
          byte **_buffer,
    const void *job,                    /*  job id                           */
    const char *error_text);            /*  error message text               */

int
get_ggpars_error (
    byte *_buffer,
    struct_ggpars_error **params);

void
free_ggpars_error (
    struct_ggpars_error **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for error - error reply.
 *---------------------------------------------------------------------------*/

extern char *GGPARS_ERROR;

#define declare_ggpars_error(_event, _priority)                                \
    method_declare (agent, GGPARS_ERROR, _event, _priority)

/*  Send event - error                                                       */

int 
lsend_ggpars_error (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  job id                           */
    const char *error_text);        /*  error message text               */

#define send_ggpars_error(_to,                                                 \
            job,                                                             \
            error_text)                                                      \
       lsend_ggpars_error(_to,                                                 \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            error_text)



#endif                                  /*  Included                         */
/*===========================================================================*
 *                                                                           *
 *  ggscrp.h - Script execution functions                                    *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGSCRP_INCLUDED                 /*  Allow multiple inclusions        */
#define GGSCRP_INCLUDED


/*- Macros ------------------------------------------------------------------*/

#define PATH       "PATH"

/*- Type definitions --------------------------------------------------------*/

typedef struct _SCRIPT_LINE   SCRIPT_LINE;
typedef struct _SCRIPT_SOURCE SCRIPT_SOURCE;

struct _SCRIPT_SOURCE {
    SCRIPT_SOURCE *next,
                  *prev;
    MEMTRN        *memtrn;              /*  Transaction holding this script  */
    char          *name;
    Bool           keep;
    long           size;
    time_t         last_closed;
    time_t         timestamp;
    LIST           line_head;
    int            links:16,
                   macros:16;
};

struct _SCRIPT_LINE {
    SCRIPT_LINE   *next,
                  *prev,
                  *loop_start,          /*  Start of loop block              */
                  *block_end;           /*  End of control block             */
    SCRIPT_SOURCE *parent;
    SCRIPT_NODE   *node;                /*  GSL parse tree for GSL lines     */
    char          *text;                /*  Text for non-GSL lines           */
    word           line;
    int            template:1;
    int            macros:16;
};

typedef struct {                        /*  Store reference for macros       */
    char        *name;
    SCRIPT_NODE *args;
    SCRIPT_LINE *position;
} SCRIPT_MACRO;


/*- Functions ---------------------------------------------------------------*/

int            ggscrp_init                (long size);
int            ggscrp_term                (void);
void           ggscrp_set_size            (long size);
int            load_script_file           (char *name,
                                           Bool template,
                                           Bool debug,
                                           Bool keep,
                                           void *job,
                                           QUEUE *replyqueue);
int            load_script_text           (char *name,
                                           char *text,
                                           Bool template,
                                           Bool debug,
                                           void *job,
                                           QUEUE *replyqueue);
void           close_script               (SCRIPT_SOURCE *script_source);

SCRIPT_LINE   *read_next_script_line      (SCRIPT_LINE   *script_line);

/*---------------------------------------------------------------------------*/

#endif
/*---------------------------------------------------------------------------
 *  ggscrpm.h - prototypes for ggscrp messages.
 *
 *  Generated from ggscrp.xml by smtmesg.gsl using GSL.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/
#ifndef INCLUDE_GGSCRPM
#define INCLUDE_GGSCRPM

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for ggscrp - GSL parser agent.
 *---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for file - Load script file.
 *---------------------------------------------------------------------------*/

extern char *GGSCRP_FILE;

#define declare_ggscrp_file(_event, _priority)                                 \
    method_declare (agent, GGSCRP_FILE, _event, _priority)

/*  Send event - file                                                        */

#define lsend_ggscrp_file(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGSCRP_FILE,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggscrp_file(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGSCRP_FILE,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for text - Load script text.
 *---------------------------------------------------------------------------*/

extern char *GGSCRP_TEXT;

#define declare_ggscrp_text(_event, _priority)                                 \
    method_declare (agent, GGSCRP_TEXT, _event, _priority)

/*  Send event - text                                                        */

#define lsend_ggscrp_text(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGSCRP_TEXT,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggscrp_text(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGSCRP_TEXT,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for wait - Wait request.
 *---------------------------------------------------------------------------*/

extern char *GGSCRP_WAIT;

#define declare_ggscrp_wait(_event, _priority)                                 \
    method_declare (agent, GGSCRP_WAIT, _event, _priority)

/*  Send event - wait                                                        */

#define lsend_ggscrp_wait(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGSCRP_WAIT,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggscrp_wait(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGSCRP_WAIT,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


typedef struct {
    void *job;                          /*  Job id                           */
    void *script_source;                /*  Script structure                 */
} struct_ggscrp_done;

int
put_ggscrp_done (
          byte **_buffer,
    const void *job,                    /*  Job id                           */
    const void *script_source);         /*  Script structure                 */

int
get_ggscrp_done (
    byte *_buffer,
    struct_ggscrp_done **params);

void
free_ggscrp_done (
    struct_ggscrp_done **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for done - Done reply.
 *---------------------------------------------------------------------------*/

extern char *GGSCRP_DONE;

#define declare_ggscrp_done(_event, _priority)                                 \
    method_declare (agent, GGSCRP_DONE, _event, _priority)

/*  Send event - done                                                        */

int 
lsend_ggscrp_done (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  Job id                           */
    const void *script_source);     /*  Script structure                 */

#define send_ggscrp_done(_to,                                                  \
            job,                                                             \
            script_source)                                                   \
       lsend_ggscrp_done(_to,                                                  \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            script_source)


typedef struct {
    void *job;                          /*  Job id                           */
    char *error_name;                   /*  Error file name                  */
    word  error_line;                   /*  Error line                       */
    char *error_text;                   /*  Error message text               */
} struct_ggscrp_error;

int
put_ggscrp_error (
          byte **_buffer,
    const void *job,                    /*  Job id                           */
    const char *error_name,             /*  Error file name                  */
    const word  error_line,             /*  Error line                       */
    const char *error_text);            /*  Error message text               */

int
get_ggscrp_error (
    byte *_buffer,
    struct_ggscrp_error **params);

void
free_ggscrp_error (
    struct_ggscrp_error **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for error - Error reply.
 *---------------------------------------------------------------------------*/

extern char *GGSCRP_ERROR;

#define declare_ggscrp_error(_event, _priority)                                \
    method_declare (agent, GGSCRP_ERROR, _event, _priority)

/*  Send event - error                                                       */

int 
lsend_ggscrp_error (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  Job id                           */
    const char *error_name,         /*  Error file name                  */
    const word  error_line,         /*  Error line                       */
    const char *error_text);        /*  Error message text               */

#define send_ggscrp_error(_to,                                                 \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)                                                      \
       lsend_ggscrp_error(_to,                                                 \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)



#endif                                  /*  Included                         */
/*===========================================================================*
 *                                                                           *
 *  ggcomm.h - Common functions                                              *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGCOMM_INCLUDED                 /*  Allow multiple inclusions        */
#define GGCOMM_INCLUDED

/*- Macros ------------------------------------------------------------------*/

#define LONG_WIDTH 10
#define PATH       "PATH"

#define BLOCK_START_MARKER 1
#define BLOCK_END_MARKER   2
#define BLOCK_DONE_MARKER  3

#define init_result_node(n)                                                   \
    (n)-> next         = NULL;                                                \
    (n)-> parent       = NULL;                                                \
    (n)-> scope        = NULL;                                                \
    (n)-> name         = NULL;                                                \
    (n)-> op1          = NULL;                                                \
    (n)-> op2          = NULL;                                                \
    (n)-> as           = NULL;                                                \
    (n)-> to           = NULL;                                                \
    (n)-> before       = NULL;                                                \
    (n)-> after        = NULL;                                                \
    (n)-> script_node  = NULL;                                                \
    (n)-> operand      = NULL;                                                \
    (n)-> scope_block  = NULL;                                                \
    (n)-> macro        = NULL;                                                \
    (n)-> gsl_function = NULL;                                                \
    (n)-> argc         = 0;                                                   \
    (n)-> argv         = NULL;                                                \
    (n)-> culprit      = NULL;                                                \
    (n)-> indent       = 0;                                                   \
    (n)-> width        = 0;                                                   \
    (n)-> constant     = FALSE;                                               \
    init_value_node ((n)-> value);


#define copy_value(d,s) copy_value_ (NULL, d, s)

/*- Type definitions --------------------------------------------------------*/

typedef struct _SCOPE_BLOCK     SCOPE_BLOCK;
typedef struct _SCOPE_ITEM      SCOPE_ITEM;
typedef struct _SCOPE_STACK_REF SCOPE_STACK_REF;

struct _SCOPE_ITEM {
    SCOPE_ITEM
        *next,
        *prev;
    XML_ITEM
        *xml_item;                      /*  Data for this item               */
    long
        item;                           /*  XML item number                  */
    VALUE
        sort_key;
};

struct _SCOPE_BLOCK {
    SCOPE_BLOCK
        *next,
        *prev;
    SCRIPT_NODE_TYPE
        scope_type;
    char *name;                         /*  Scope name                       */
    LIST
        item_list;                      /*  List of items to iterate through */
    SCOPE_ITEM
        *scope_item;                    /*  Current item in for list         */
    XML_ITEM
        *xml_item;                      /*  Data for this item               */
    long
        total,                          /*  Total number of items in loop    */
        index;                          /*  Loop index                       */
    Bool
        stacked;                        /*  Is scope 'stacked'?              */
};

struct _SCOPE_STACK_REF {
    SCOPE_STACK_REF
        *next,
        *prev;
    LIST
        *scope_stack;
};

typedef enum {
    PARM_VALUE,
    PARM_REFERENCE,
    PARM_SIMPLE_SCOPE,
    PARM_EXTENDED_SCOPE,
    PARM_EXPRESSION
} PARM_TYPE;

typedef
    PARM_TYPE PARM_LIST [];

typedef struct _RESULT_NODE RESULT_NODE;

typedef int EVAL_FUNCTION (int argc,
                           RESULT_NODE **argv, 
                           RESULT_NODE *result,
                           THREAD *gsl_thread);

typedef struct {
    char
       *name;
    int
        min_parmc,
        max_parmc,
        cnt_parmt;
    PARM_LIST
       *parmt;
    Bool
        immediate;
    EVAL_FUNCTION
       *evaluate;
} GSL_FUNCTION;

struct _RESULT_NODE {
    RESULT_NODE
        *next,                          /*  In stack or cache                */
        *parent,
        *scope,
        *name,
        *op1,
        *op2,
        *as,
        *to,
        *before,
        *after,
        *operand;                       /*  Result of evaluating operand     */
    SCRIPT_NODE
        *script_node;                   /*  Corresponding parse node         */
    SCOPE_BLOCK
        *scope_block;
    SCRIPT_MACRO
        *macro;
    GSL_FUNCTION
        *gsl_function;
    int
        argc;
    RESULT_NODE
      **argv;
    char
        *culprit;
    int
        indent,                         /*  Leading spaces after shuffling   */
        width,                          /*  Width of last line of result     */
        item_nbr;
    VALUE          
        value;                          /*  Result                           */
    Bool
        constant;                       /*  Is result constant?              */
};


/*- Global variables --------------------------------------------------------*/

extern LIST
    all_scopes;

/*- Functions ---------------------------------------------------------------*/

SCOPE_BLOCK *lookup_simple_scope        (LIST  *scope_stack,
                                         VALUE *scope_value,
                                         Bool  ignorecase,
                                         char  **error_text);
char *       name_the_symbol            (RESULT_NODE *node);
void         undefined_expression_error (RESULT_NODE *node,
                                         char **error_text);
XML_ITEM    *extended_scope_xml         (LIST *scope_stack,
                                         RESULT_NODE *scope,
                                         Bool ignorecase,
                                         char **error_text);
char        *extended_scope_string      (RESULT_NODE *scope);
XML_ITEM *  symbol_xml_parent           (LIST *scope_stack, 
                                         RESULT_NODE *symbol, 
                                         Bool ignorecase,   
                                         char **error_text);
char        *symbol_value               (LIST *scope_stack,
                                         RESULT_NODE *symbol,
                                         Bool ignorecase,
                                         char **error_text);
char        *compound_item_value        (XML_ITEM *item);
Bool         store_symbol_definition    (LIST  *scope_stack,
                                         Bool  ignorecase,
                                         RESULT_NODE *symbol,
                                         VALUE *value,
                                         char **error_text);
void         put_numeric_attr           (XML_ITEM *item,
                                         const char *name, long value);
void         put_char_attr              (XML_ITEM *item,
                                         const char *name, char value);
void         copy_value_                (MEMTRN *memtrn,
                                         VALUE  *dest,
                                         VALUE  *source);
void         copy_result                (RESULT_NODE *dest,
                                         RESULT_NODE *source);
RESULT_NODE *new_result_node            (void);
void         destroy_result             (RESULT_NODE *node);

void         remove_scope_references_to_xml
                                        (XML_ITEM *xml_delete);

SCOPE_BLOCK *create_scope_block         (LIST *scope_stack,
                                         SCRIPT_NODE_TYPE scope_type,
                                         const char *alias);
void         destroy_scope_block        (LIST *scope_stack);
SCOPE_BLOCK *first_scope_block          (LIST *scope_stack);
SCOPE_BLOCK *last_scope_block           (LIST *scope_stack);

SCOPE_ITEM  *create_scope_item          (SCOPE_BLOCK *scope_block,
                                         XML_ITEM *xml_item,
                                         long item);
void         destroy_scope_item         (SCOPE_ITEM *scope_item);

Bool         first_scope_item           (SCOPE_BLOCK *scope_block);
Bool         next_scope_item            (SCOPE_BLOCK *scope_block);

void         copy_scope_stack           (LIST *to,
                                         LIST *from);

char        *string_value               (VALUE *value);
double       number_value               (VALUE *value);
int          format_output              (char *buffer, size_t max,
                                         RESULT_NODE *node,
                                         char **error_text);
int          pretty_print               (VALUE *result,
                                         RESULT_NODE *pretty,
                                         char *example,
                                         int  space,
                                         char **error_text);
size_t       strllen                    (const char *s);
char        *concatenate_results        (RESULT_NODE *r,
                                         int shuffle,
                                         Bool convert_indent);
void         destroy_caches             (void);

/*---------------------------------------------------------------------------*/

#endif
/*===========================================================================*
 *                                                                           *
 *  ggcode.h - Code generator functions                                      *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGCODE_INCLUDED                /*  Allow multiple inclusions        */
#define GGCODE_INCLUDED


/*---------------------------------------------------------------------------*/

typedef void (OUTPUT_FCT) (qbyte, const char *);
typedef void (HANDLER_FCT) (void);

typedef struct                          /*  Thread context block:            */
{
    THREAD
        *thread;
    MEMTRN
        *scratch_memtrn;
    void *
        job;
    XML_ITEM
        *xml_gsl,                       /*  GSL internal data                */
        *xml_switches,                  /*  Flat switches from caller        */
        **xml_root,                     /*  Array of initial XML items       */
        *xml_junk;                      /*  Parent for various XML items     */
    int
        xml_count;                      /*  Number of initial XML items      */
    QUEUE
        *replyq;
    int
        output_line,                    /*  Line number in output file       */
        last_line,                      /*  Most recently written line       */
        shuffle,                        /*  How to shuffle blank space       */
        execute_level;
    char
        *script_name,
        *script_text,
        *output_name,
        *me,
        *terminator;                    /*  Line terminator                  */
    FILE
        *output;
    SCRIPT_NODE
        *script_root,
        *script_node,
        *evaluate_node,
        *operand_node,
        *fake_for_node;
    RESULT_NODE
       **result_ptr,
        *result_root,
        *result_node,
       *output_buffer;
    RESULT_NODE
        call_result;
    Bool
        template,
        ignorecase,
        stdout_echo,                    /*  Copy to stdout                   */
        execute_full,
        robust,                         /*  Recover from bad XML input?      */
        stepping,
        error_occurred;
    SCRIPT_SOURCE
        *script_source;
    SCRIPT_LINE
        *script_line;
    LIST
        scope_stack,
        script_stack;
    RESULT_NODE
        *node_stack;
    SCOPE_STACK_REF
        *scope_stack_ref;
    OUTPUT_FCT
        *output_fct;                    /*  Redirector function              */
    SYMTAB
        *macros;
    DATA_TYPE
        sort_type;
} GGCODE_TCB;


/*- Function prototypes -----------------------------------------------------*/

int     gsl_init         (long size);

THREAD *gsl_execute      (QUEUE    *replyqueue,
                          qbyte     job,
                          XML_ITEM *switches,
                          int       count,
                          /* XML_ITEM *xml */ ...);
THREAD *gsl_start        (QUEUE    *replyqueue,
                          qbyte     job,
                          XML_ITEM *switches,
                          int       count,
                          /* XML_ITEM *xml */ ...);
void    gsl_continue     (THREAD   *gsl_thread,
                          QUEUE    *replyqueue);
void    gsl_next         (THREAD   *gsl_thread,
                          QUEUE    *replyqueue);
void    gsl_command      (THREAD   *gsl_thread,
                          char     *command,
                          Bool      terminate,
                          QUEUE    *replyqueue);
int     gsl_function     (THREAD   *gsl_thread,
                          QUEUE    *replyqueue,
                          char     *function,
                          int       parm_count,
                          char     *parm_value[]);
THREAD *gsl_spawn        (THREAD   *gsl_thread,
                          char     *command);
void    gsl_finish       (THREAD   *gsl_thread);

char   *gsl_cur_script   (THREAD *gsl_thread);
int     gsl_cur_line     (THREAD *gsl_thread);
char   *gsl_cur_text     (THREAD *gsl_thread);

int  gsl_term         (void);

void gg_send_output   (THREAD *gsl_thread, OUTPUT_FCT *output_fct, Bool echo);
void gg_set_handler   (HANDLER_FCT *handler_fct, int event);

/*  These are the events that we can provide handlers for                    */

typedef enum {
    EVENT_ABORT
} GG_EVENT;


/*---------------------------------------------------------------------------*/

#endif
/*---------------------------------------------------------------------------
 *  ggcodem.h - prototypes for GGCODE messages.
 *
 *  Generated from ggcode.xml by smtmesg.gsl using GSL.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/
#ifndef INCLUDE_GGCODEM
#define INCLUDE_GGCODEM

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for ggcode - GSLGen GGCODE agent.
 *---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for execute - Execute script.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_EXECUTE;

#define declare_ggcode_execute(_event, _priority)                              \
    method_declare (agent, GGCODE_EXECUTE, _event, _priority)

/*  Send event - execute                                                     */

#define lsend_ggcode_execute(_to, _from,                                       \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_EXECUTE,                                            \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_execute(_to)                                               \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_EXECUTE,                                            \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for start - Start thread.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_START;

#define declare_ggcode_start(_event, _priority)                                \
    method_declare (agent, GGCODE_START, _event, _priority)

/*  Send event - start                                                       */

#define lsend_ggcode_start(_to, _from,                                         \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_START,                                              \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_start(_to)                                                 \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_START,                                              \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for continue - Continue thread.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_CONTINUE;

#define declare_ggcode_continue(_event, _priority)                             \
    method_declare (agent, GGCODE_CONTINUE, _event, _priority)

/*  Send event - continue                                                    */

#define lsend_ggcode_continue(_to, _from,                                      \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_CONTINUE,                                           \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_continue(_to)                                              \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_CONTINUE,                                           \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for next - Execute next line.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_NEXT;

#define declare_ggcode_next(_event, _priority)                                 \
    method_declare (agent, GGCODE_NEXT, _event, _priority)

/*  Send event - next                                                        */

#define lsend_ggcode_next(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_NEXT,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_next(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_NEXT,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for step - Step next line.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_STEP;

#define declare_ggcode_step(_event, _priority)                                 \
    method_declare (agent, GGCODE_STEP, _event, _priority)

/*  Send event - step                                                        */

#define lsend_ggcode_step(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_STEP,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_step(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_STEP,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for finish - Finish thread.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_FINISH;

#define declare_ggcode_finish(_event, _priority)                               \
    method_declare (agent, GGCODE_FINISH, _event, _priority)

/*  Send event - finish                                                      */

#define lsend_ggcode_finish(_to, _from,                                        \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_FINISH,                                             \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_finish(_to)                                                \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_FINISH,                                             \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


typedef struct {
    char *command;                      /*  GSL command line                 */
} struct_ggcode_gsl;

int
put_ggcode_gsl (
          byte **_buffer,
    const char *command);               /*  GSL command line                 */

int
get_ggcode_gsl (
    byte *_buffer,
    struct_ggcode_gsl **params);

void
free_ggcode_gsl (
    struct_ggcode_gsl **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for gsl - Execute command.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_GSL;

#define declare_ggcode_gsl(_event, _priority)                                  \
    method_declare (agent, GGCODE_GSL, _event, _priority)

/*  Send event - gsl                                                         */

int 
lsend_ggcode_gsl (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const char *command);           /*  GSL command line                 */

#define send_ggcode_gsl(_to,                                                   \
            command)                                                         \
       lsend_ggcode_gsl(_to,                                                   \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            command)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for call - Call GSL function.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_CALL;

#define declare_ggcode_call(_event, _priority)                                 \
    method_declare (agent, GGCODE_CALL, _event, _priority)

/*  Send event - call                                                        */

#define lsend_ggcode_call(_to, _from,                                          \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_CALL,                                               \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_call(_to)                                                  \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_CALL,                                               \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)


typedef struct {
    void *job;                          /*  Job id                           */
} struct_ggcode_job;

int
put_ggcode_job (
          byte **_buffer,
    const void *job);                   /*  Job id                           */

int
get_ggcode_job (
    byte *_buffer,
    struct_ggcode_job **params);

void
free_ggcode_job (
    struct_ggcode_job **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for ok - OK reply.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_OK;

#define declare_ggcode_ok(_event, _priority)                                   \
    method_declare (agent, GGCODE_OK, _event, _priority)

/*  Send event - ok                                                          */

int 
lsend_ggcode_ok (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job);               /*  Job id                           */

#define send_ggcode_ok(_to,                                                    \
            job)                                                             \
       lsend_ggcode_ok(_to,                                                    \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job)


typedef struct {
    void *job;                          /*  Job id                           */
    char *error_name;                   /*  Error file name                  */
    word  error_line;                   /*  Error line                       */
    char *error_text;                   /*  Error message text               */
} struct_ggcode_error_reply;

int
put_ggcode_error_reply (
          byte **_buffer,
    const void *job,                    /*  Job id                           */
    const char *error_name,             /*  Error file name                  */
    const word  error_line,             /*  Error line                       */
    const char *error_text);            /*  Error message text               */

int
get_ggcode_error_reply (
    byte *_buffer,
    struct_ggcode_error_reply **params);

void
free_ggcode_error_reply (
    struct_ggcode_error_reply **params);

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for error - Error reply.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_ERROR;

#define declare_ggcode_error(_event, _priority)                                \
    method_declare (agent, GGCODE_ERROR, _event, _priority)

/*  Send event - error                                                       */

int 
lsend_ggcode_error (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  Job id                           */
    const char *error_name,         /*  Error file name                  */
    const word  error_line,         /*  Error line                       */
    const char *error_text);        /*  Error message text               */

#define send_ggcode_error(_to,                                                 \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)                                                      \
       lsend_ggcode_error(_to,                                                 \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)

/*---------------------------------------------------------------------------
 *  Definitions and prototypes for fatal - Fatal reply.
 *---------------------------------------------------------------------------*/

extern char *GGCODE_FATAL;

#define declare_ggcode_fatal(_event, _priority)                                \
    method_declare (agent, GGCODE_FATAL, _event, _priority)

/*  Send event - fatal                                                       */

int 
lsend_ggcode_fatal (
    const QID  *_to,
    const QID  *_from,
          char *_accept,
          char *_reject,
          char *_expire,
          word _timeout,
    const void *job,                /*  Job id                           */
    const char *error_name,         /*  Error file name                  */
    const word  error_line,         /*  Error line                       */
    const char *error_text);        /*  Error message text               */

#define send_ggcode_fatal(_to,                                                 \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)                                                      \
       lsend_ggcode_fatal(_to,                                                 \
            &thread-> queue-> qid,                                           \
            NULL, NULL, NULL, 0,                                             \
            job,                                                             \
            error_name,                                                      \
            error_line,                                                      \
            error_text)


/*---------------------------------------------------------------------------
 *  Definitions and prototypes for result - .
 *---------------------------------------------------------------------------*/

extern char *GGCODE_RESULT;

#define declare_ggcode_result(_event, _priority)                               \
    method_declare (agent, GGCODE_RESULT, _event, _priority)

/*  Send event - result                                                      */

#define lsend_ggcode_result(_to, _from,                                        \
    _accept, _reject, _expire, _timeout)                                     \
        event_send (_to,                                                     \
                    _from,                                                   \
                    GGCODE_RESULT,                                             \
                    NULL, 0,                                                 \
                    _accept, _reject, _expire, _timeout)
#define send_ggcode_result(_to)                                                \
        event_send (_to,                                                     \
                    &thread-> queue-> qid,                                   \
                    GGCODE_RESULT,                                             \
                    NULL, 0,                                                 \
                    NULL, NULL, NULL, 0)



#endif                                  /*  Included                         */
/*===========================================================================*
 *                                                                           *
 *  ggobjt.h - Object functions                                              *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGOBJT_INCLUDED                 /*  Allow multiple inclusions        */
#define GGOBJT_INCLUDED

/*- Global variables --------------------------------------------------------*/

extern char
    object_error [LINE_MAX + 1];

/*- Functions ---------------------------------------------------------------*/

void          initialise_objects     (void);
void          destroy_objects        (void);
int           object_register        (char *name,
                                      GSL_FUNCTION *gsl_functions,
                                      int size, function destructor);
GSL_FUNCTION *locate_method          (RESULT_NODE *node);
int           build_method_arguments (SCRIPT_NODE *fn_node,
                                      RESULT_NODE ***arg);
Bool          arguments_are_defined  (int argc,
                                      RESULT_NODE **argv,
                                      RESULT_NODE *result);

/*---------------------------------------------------------------------------*/

#endif
/*===========================================================================*
 *                                                                           *
 *  ggthrd.h - Thread object functions                                       *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGTHRD_INCLUDED                 /*  Allow multiple inclusions        */
#define GGTHRD_INCLUDED


/*- Functions ---------------------------------------------------------------*/

int  register_thread_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggenvt.h - GSL/environment package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggenvt
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGENVT_INCLUDED
#define GGENVT_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_env_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggfile.h - GSL/file package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggfile
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGFILE_INCLUDED
#define GGFILE_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_file_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggconv.h - GSL/conv package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggconv
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGCONV_INCLUDED
#define GGCONV_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_conv_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggmath.h - GSL/math package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggmath
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGMATH_INCLUDED
#define GGMATH_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_math_functions (void);

#endif
/*===========================================================================*
 *                                                                           *
 *  ggmail.h - Mail object functions                                         *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGMAIL_INCLUDED                 /*  Allow multiple inclusions        */
#define GGMAIL_INCLUDED


/*- Functions ---------------------------------------------------------------*/

int  register_mail_functions (void);

#endif
/*===========================================================================*
 *                                                                           *
 *  ggsock.h - Socket object functions                                       *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGSOCK_INCLUDED                 /*  Allow multiple inclusions        */
#define GGSOCK_INCLUDED


/*- Functions ---------------------------------------------------------------*/

int  register_sock_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggstrn.h - GSL/string package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggstrn
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGSTRN_INCLUDED
#define GGSTRN_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_string_functions (void);

#endif
/*===========================================================================*
 *                                                                           *
 *  ggthrd.h - Thread object functions                                       *
 *                                                                           *
 *  Copyright (c) 1991-2009 iMatix Corporation                               *
 *                                                                           *
 *  ------------------ GPL Licensed Source Code ------------------           *
 *  iMatix makes this software available under the GNU General               *
 *  Public License (GPL) license for open source projects.  For              *
 *  details of the GPL license please see www.gnu.org or read the            *
 *  file license.gpl provided in this package.                               *
 *                                                                           *
 *  This program is free software; you can redistribute it and/or            *
 *  modify it under the terms of the GNU General Public License as           *
 *  published by the Free Software Foundation; either version 2 of           *
 *  the License, or (at your option) any later version.                      *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 *  GNU General Public License for more details.                             *
 *                                                                           *
 *  You should have received a copy of the GNU General Public                *
 *  License along with this program in the file 'license.gpl'; if            *
 *  not, write to the Free Software Foundation, Inc., 59 Temple              *
 *  Place - Suite 330, Boston, MA 02111-1307, USA.                           *
 *                                                                           *
 *  You can also license this software under iMatix's General Terms          *
 *  of Business (GTB) for commercial projects.  If you have not              *
 *  explicitly licensed this software under the iMatix GTB you may           *
 *  only use it under the terms of the GNU General Public License.           *
 *                                                                           *
 *  For more information, send an email to info@imatix.com.                  *
 *  --------------------------------------------------------------           *
 *===========================================================================*/

#ifndef GGTHRD_INCLUDED                 /*  Allow multiple inclusions        */
#define GGTHRD_INCLUDED


/*- Functions ---------------------------------------------------------------*/

int  register_thread_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggzip.h - GSL/zip package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggzip
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGZIP_INCLUDED
#define GGZIP_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_zip_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggdate.h - GSL/date package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggdate
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGDATE_INCLUDED
#define GGDATE_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_date_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggtime.h - GSL/time package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggtime
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGTIME_INCLUDED
#define GGTIME_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_time_functions (void);

#endif
/*---------------------------------------------------------------------------
 *  ggdir.h - GSL/dir package header
 *
 *  Generated on 2010/10/06, 19:29:59 from ggdir
 *  by ggobjt.gsl using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#ifndef GGDIR_INCLUDED
#define GGDIR_INCLUDED

/*- Function prototypes -----------------------------------------------------*/

int register_dir_functions (void);

#endif

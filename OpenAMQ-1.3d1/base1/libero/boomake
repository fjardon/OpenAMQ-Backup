#!/bin/sh
#
#   Boom builder for Libero 2.41
#   Generated by iMatix Boom from standard.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [lr]: $* - stop" 1>&2
    else
        echo "boom E: [lr]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [lr]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="2.41"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,st on all platforms except Linux and Solaris.
#
if [ -s /usr/bin/uname ]; then BOOM_PLATFORM=`/usr/bin/uname`; fi
if [ -s /bin/uname ];     then BOOM_PLATFORM=`/bin/uname`;     fi
if [ -z "$BOOM_MODEL" ]; then
    if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
        BOOM_MODEL=release,mt
    else
        BOOM_MODEL=release,st
    fi
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
        if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
            BOOM_MODEL_MT=1
            BOOM_MODEL="$BOOM_MODEL,mt"
        else
            BOOM_MODEL_ST=1
            BOOM_MODEL="$BOOM_MODEL,st"
        fi
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where Libero should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# --------------------------   BUILD BINARY FILES   ---------------------------

a_build_binary_files() {
:
    carp "Building Libero..."
    #   To prevent compatibility warnings...
    INCDIR=
    LIBDIR=
    export LIBDIR INCDIR
    if [ "$BOOM_TRACE" ]; then
        MY_COPTS=-v
    else
        MY_COPTS=-q
    fi
    if [ ! -z "$_LOCAL_BASE" ]; then
        MY_COPTS="$MY_COPTS -li $_LOCAL_BASE/include -ll $_LOCAL_BASE/lib"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lr"
    c $MY_COPTS lr || croak "\"c $MY_COPTS lr\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrcalc"
    c $MY_COPTS lrcalc || croak "\"c $MY_COPTS lrcalc\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lreval"
    c $MY_COPTS lreval || croak "\"c $MY_COPTS lreval\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrcode"
    c $MY_COPTS lrcode || croak "\"c $MY_COPTS lrcode\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrload"
    c $MY_COPTS lrload || croak "\"c $MY_COPTS lrload\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrdump"
    c $MY_COPTS lrdump || croak "\"c $MY_COPTS lrdump\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrfree"
    c $MY_COPTS lrfree || croak "\"c $MY_COPTS lrfree\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrsort"
    c $MY_COPTS lrsort || croak "\"c $MY_COPTS lrsort\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrglib"
    c $MY_COPTS lrglib || croak "\"c $MY_COPTS lrglib\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrlibr"
    c $MY_COPTS lrlibr || croak "\"c $MY_COPTS lrlibr\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lroptn"
    c $MY_COPTS lroptn || croak "\"c $MY_COPTS lroptn\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS lrsymb"
    c $MY_COPTS lrsymb || croak "\"c $MY_COPTS lrsymb\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrcalc"
    c $MY_COPTS -r liblr lrcalc || croak "\"c $MY_COPTS -r liblr lrcalc\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lreval"
    c $MY_COPTS -r liblr lreval || croak "\"c $MY_COPTS -r liblr lreval\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrcode"
    c $MY_COPTS -r liblr lrcode || croak "\"c $MY_COPTS -r liblr lrcode\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrload"
    c $MY_COPTS -r liblr lrload || croak "\"c $MY_COPTS -r liblr lrload\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrdump"
    c $MY_COPTS -r liblr lrdump || croak "\"c $MY_COPTS -r liblr lrdump\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrfree"
    c $MY_COPTS -r liblr lrfree || croak "\"c $MY_COPTS -r liblr lrfree\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrsort"
    c $MY_COPTS -r liblr lrsort || croak "\"c $MY_COPTS -r liblr lrsort\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrglib"
    c $MY_COPTS -r liblr lrglib || croak "\"c $MY_COPTS -r liblr lrglib\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrlibr"
    c $MY_COPTS -r liblr lrlibr || croak "\"c $MY_COPTS -r liblr lrlibr\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lroptn"
    c $MY_COPTS -r liblr lroptn || croak "\"c $MY_COPTS -r liblr lroptn\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r liblr lrsymb"
    c $MY_COPTS -r liblr lrsymb || croak "\"c $MY_COPTS -r liblr lrsymb\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L lr"
    c $MY_COPTS -L lr || croak "\"c $MY_COPTS -L lr\" failed"
}

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "libero/version.h" ]; then
        echo libero/version.h>>_package.lst
    fi
    if [ -f "libero/lr.c" ]; then
        echo libero/lr.c>>_package.lst
    fi
    if [ -f "libero/lrcalc.c" ]; then
        echo libero/lrcalc.c>>_package.lst
    fi
    if [ -f "libero/lreval.c" ]; then
        echo libero/lreval.c>>_package.lst
    fi
    if [ -f "libero/lrcode.c" ]; then
        echo libero/lrcode.c>>_package.lst
    fi
    if [ -f "libero/lrload.c" ]; then
        echo libero/lrload.c>>_package.lst
    fi
    if [ -f "libero/lrdump.c" ]; then
        echo libero/lrdump.c>>_package.lst
    fi
    if [ -f "libero/lrfree.c" ]; then
        echo libero/lrfree.c>>_package.lst
    fi
    if [ -f "libero/lrsort.c" ]; then
        echo libero/lrsort.c>>_package.lst
    fi
    if [ -f "libero/lrglib.c" ]; then
        echo libero/lrglib.c>>_package.lst
    fi
    if [ -f "libero/lrlibr.c" ]; then
        echo libero/lrlibr.c>>_package.lst
    fi
    if [ -f "libero/lroptn.c" ]; then
        echo libero/lroptn.c>>_package.lst
    fi
    if [ -f "libero/lrsymb.c" ]; then
        echo libero/lrsymb.c>>_package.lst
    fi
    if [ -f "libero/lrpriv.h" ]; then
        echo libero/lrpriv.h>>_package.lst
    fi
    if [ -f "libero/lrschema.asm" ]; then
        echo libero/lrschema.asm>>_package.lst
    fi
    if [ -f "libero/lrschema.awk" ]; then
        echo libero/lrschema.awk>>_package.lst
    fi
    if [ -f "libero/lrschema.bsh" ]; then
        echo libero/lrschema.bsh>>_package.lst
    fi
    if [ -f "libero/lrschema.c" ]; then
        echo libero/lrschema.c>>_package.lst
    fi
    if [ -f "libero/lrschema.c99" ]; then
        echo libero/lrschema.c99>>_package.lst
    fi
    if [ -f "libero/lrschema.cob" ]; then
        echo libero/lrschema.cob>>_package.lst
    fi
    if [ -f "libero/lrschema.cpp" ]; then
        echo libero/lrschema.cpp>>_package.lst
    fi
    if [ -f "libero/lrschema.csh" ]; then
        echo libero/lrschema.csh>>_package.lst
    fi
    if [ -f "libero/lrschema.jav" ]; then
        echo libero/lrschema.jav>>_package.lst
    fi
    if [ -f "libero/lrschema.ksh" ]; then
        echo libero/lrschema.ksh>>_package.lst
    fi
    if [ -f "libero/lrschema.mst" ]; then
        echo libero/lrschema.mst>>_package.lst
    fi
    if [ -f "libero/lrschema.pas" ]; then
        echo libero/lrschema.pas>>_package.lst
    fi
    if [ -f "libero/lrschema.pl" ]; then
        echo libero/lrschema.pl>>_package.lst
    fi
    if [ -f "libero/lrservice.pl" ]; then
        echo libero/lrservice.pl>>_package.lst
    fi
    if [ -f "libero/lrschema.py" ]; then
        echo libero/lrschema.py>>_package.lst
    fi
    if [ -f "libero/lrschema.php" ]; then
        echo libero/lrschema.php>>_package.lst
    fi
    if [ -f "libero/lrschema.rex" ]; then
        echo libero/lrschema.rex>>_package.lst
    fi
    if [ -f "libero/lrschema.sh" ]; then
        echo libero/lrschema.sh>>_package.lst
    fi
    if [ -f "libero/lrschema.sql" ]; then
        echo libero/lrschema.sql>>_package.lst
    fi
    if [ -f "libero/lrschema.vb" ]; then
        echo libero/lrschema.vb>>_package.lst
    fi
    if [ -f "libero/lrmesg.txt" ]; then
        echo libero/lrmesg.txt>>_package.lst
    fi
    if [ -f "libero/prelude.h" ]; then
        echo libero/prelude.h>>_package.lst
    fi
    if [ -f "libero/lr.ini" ]; then
        echo libero/lr.ini>>_package.lst
    fi
    if [ -f "libero/lr_eg.ini" ]; then
        echo libero/lr_eg.ini>>_package.lst
    fi
    if [ -f "libero/template" ]; then
        echo libero/template>>_package.lst
    fi
    if [ -f "libero/prelude.pdl" ]; then
        echo libero/prelude.pdl>>_package.lst
    fi
    if [ -f "libero/license.gpl" ]; then
        echo libero/license.gpl>>_package.lst
    fi
    if [ -f "libero/project.pdl" ]; then
        echo libero/project.pdl>>_package.lst
    fi
    if [ -f "libero/readme.txt" ]; then
        echo libero/readme.txt>>_package.lst
    fi
    if [ -f "libero/lrcalc.l" ]; then
        echo libero/lrcalc.l>>_package.lst
    fi
    if [ -f "libero/lrcalc.i" ]; then
        echo libero/lrcalc.i>>_package.lst
    fi
    if [ -f "libero/lrcalc.d" ]; then
        echo libero/lrcalc.d>>_package.lst
    fi
    if [ -f "libero/lreval.l" ]; then
        echo libero/lreval.l>>_package.lst
    fi
    if [ -f "libero/lreval.i" ]; then
        echo libero/lreval.i>>_package.lst
    fi
    if [ -f "libero/lreval.d" ]; then
        echo libero/lreval.d>>_package.lst
    fi
    if [ -f "libero/lrcode.l" ]; then
        echo libero/lrcode.l>>_package.lst
    fi
    if [ -f "libero/lrcode.i" ]; then
        echo libero/lrcode.i>>_package.lst
    fi
    if [ -f "libero/lrcode.d" ]; then
        echo libero/lrcode.d>>_package.lst
    fi
    if [ -f "libero/lrload.l" ]; then
        echo libero/lrload.l>>_package.lst
    fi
    if [ -f "libero/lrload.i" ]; then
        echo libero/lrload.i>>_package.lst
    fi
    if [ -f "libero/lrload.d" ]; then
        echo libero/lrload.d>>_package.lst
    fi
    if [ -f "libero/lrglib.h" ]; then
        echo libero/lrglib.h>>_package.lst
    fi
    if [ -f "libero/lrlibr.h" ]; then
        echo libero/lrlibr.h>>_package.lst
    fi
    if [ -f "libero/lroptn.h" ]; then
        echo libero/lroptn.h>>_package.lst
    fi
    if [ -f "libero/lrsymb.h" ]; then
        echo libero/lrsymb.h>>_package.lst
    fi
    if [ -f "libero/stamp_generate" ]; then
        echo libero/stamp_generate>>_package.lst
    fi
    if [ -f "libero/configure" ]; then
        echo libero/configure>>_package.lst
    fi
    if [ -f "libero/Makefile.unix" ]; then
        echo libero/Makefile.unix>>_package.lst
    fi
    if [ -f "libero/boomake" ]; then
        echo libero/boomake>>_package.lst
    fi
    if [ -f "libero/configure.bat" ]; then
        echo libero/configure.bat>>_package.lst
    fi
    if [ -f "libero/Makefile.win32" ]; then
        echo libero/Makefile.win32>>_package.lst
    fi
    if [ -f "libero/boomake.bat" ]; then
        echo libero/boomake.bat>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building lr-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d lr-$MY_VERSION
    rm -f lr-$MY_VERSION-src.tar.gz
    tar -cf  lr-$MY_VERSION-src.tar lr-$MY_VERSION
    gzip lr-$MY_VERSION-src.tar
    rm -f lr-$MY_VERSION-src.zip
    carp "Building lr-$MY_VERSION-src.zip..."
    zip -lrmq lr-$MY_VERSION-src.zip lr-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "lr.c" ]; then
        croak "lr.c is missing"
    fi
    if [ ! -f "lrcalc.c" ]; then
        croak "lrcalc.c is missing"
    fi
    if [ ! -f "lreval.c" ]; then
        croak "lreval.c is missing"
    fi
    if [ ! -f "lrcode.c" ]; then
        croak "lrcode.c is missing"
    fi
    if [ ! -f "lrload.c" ]; then
        croak "lrload.c is missing"
    fi
    if [ ! -f "lrdump.c" ]; then
        croak "lrdump.c is missing"
    fi
    if [ ! -f "lrfree.c" ]; then
        croak "lrfree.c is missing"
    fi
    if [ ! -f "lrsort.c" ]; then
        croak "lrsort.c is missing"
    fi
    if [ ! -f "lrglib.c" ]; then
        croak "lrglib.c is missing"
    fi
    if [ ! -f "lrlibr.c" ]; then
        croak "lrlibr.c is missing"
    fi
    if [ ! -f "lroptn.c" ]; then
        croak "lroptn.c is missing"
    fi
    if [ ! -f "lrsymb.c" ]; then
        croak "lrsymb.c is missing"
    fi
    if [ ! -f "lrpriv.h" ]; then
        croak "lrpriv.h is missing"
    fi
    if [ ! -f "lrschema.asm" ]; then
        croak "lrschema.asm is missing"
    fi
    if [ ! -f "lrschema.awk" ]; then
        croak "lrschema.awk is missing"
    fi
    if [ ! -f "lrschema.bsh" ]; then
        croak "lrschema.bsh is missing"
    fi
    if [ ! -f "lrschema.c" ]; then
        croak "lrschema.c is missing"
    fi
    if [ ! -f "lrschema.c99" ]; then
        croak "lrschema.c99 is missing"
    fi
    if [ ! -f "lrschema.cob" ]; then
        croak "lrschema.cob is missing"
    fi
    if [ ! -f "lrschema.cpp" ]; then
        croak "lrschema.cpp is missing"
    fi
    if [ ! -f "lrschema.csh" ]; then
        croak "lrschema.csh is missing"
    fi
    if [ ! -f "lrschema.jav" ]; then
        croak "lrschema.jav is missing"
    fi
    if [ ! -f "lrschema.ksh" ]; then
        croak "lrschema.ksh is missing"
    fi
    if [ ! -f "lrschema.mst" ]; then
        croak "lrschema.mst is missing"
    fi
    if [ ! -f "lrschema.pas" ]; then
        croak "lrschema.pas is missing"
    fi
    if [ ! -f "lrschema.pl" ]; then
        croak "lrschema.pl is missing"
    fi
    if [ ! -f "lrservice.pl" ]; then
        croak "lrservice.pl is missing"
    fi
    if [ ! -f "lrschema.py" ]; then
        croak "lrschema.py is missing"
    fi
    if [ ! -f "lrschema.php" ]; then
        croak "lrschema.php is missing"
    fi
    if [ ! -f "lrschema.rex" ]; then
        croak "lrschema.rex is missing"
    fi
    if [ ! -f "lrschema.sh" ]; then
        croak "lrschema.sh is missing"
    fi
    if [ ! -f "lrschema.sql" ]; then
        croak "lrschema.sql is missing"
    fi
    if [ ! -f "lrschema.vb" ]; then
        croak "lrschema.vb is missing"
    fi
    if [ ! -f "lrmesg.txt" ]; then
        croak "lrmesg.txt is missing"
    fi
    if [ ! -f "prelude.h" ]; then
        croak "prelude.h is missing"
    fi
    if [ ! -f "lr.ini" ]; then
        croak "lr.ini is missing"
    fi
    if [ ! -f "lr_eg.ini" ]; then
        croak "lr_eg.ini is missing"
    fi
    if [ ! -f "template" ]; then
        croak "template is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "lrcalc.l" ]; then
        croak "lrcalc.l is missing"
    fi
    if [ ! -f "lrcalc.i" ]; then
        croak "lrcalc.i is missing"
    fi
    if [ ! -f "lrcalc.d" ]; then
        croak "lrcalc.d is missing"
    fi
    if [ ! -f "lreval.l" ]; then
        croak "lreval.l is missing"
    fi
    if [ ! -f "lreval.i" ]; then
        croak "lreval.i is missing"
    fi
    if [ ! -f "lreval.d" ]; then
        croak "lreval.d is missing"
    fi
    if [ ! -f "lrcode.l" ]; then
        croak "lrcode.l is missing"
    fi
    if [ ! -f "lrcode.i" ]; then
        croak "lrcode.i is missing"
    fi
    if [ ! -f "lrcode.d" ]; then
        croak "lrcode.d is missing"
    fi
    if [ ! -f "lrload.l" ]; then
        croak "lrload.l is missing"
    fi
    if [ ! -f "lrload.i" ]; then
        croak "lrload.i is missing"
    fi
    if [ ! -f "lrload.d" ]; then
        croak "lrload.d is missing"
    fi
    if [ ! -f "lrglib.h" ]; then
        croak "lrglib.h is missing"
    fi
    if [ ! -f "lrlibr.h" ]; then
        croak "lrlibr.h is missing"
    fi
    if [ ! -f "lroptn.h" ]; then
        croak "lroptn.h is missing"
    fi
    if [ ! -f "lrsymb.h" ]; then
        croak "lrsymb.h is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK BINARY FILES EXIST   ------------------------

a_check_binary_files_exist() {
:
    if [ ! -f "lrschema.asm" ]; then
        croak "lrschema.asm is missing"
    fi
    if [ ! -f "lrschema.awk" ]; then
        croak "lrschema.awk is missing"
    fi
    if [ ! -f "lrschema.bsh" ]; then
        croak "lrschema.bsh is missing"
    fi
    if [ ! -f "lrschema.c" ]; then
        croak "lrschema.c is missing"
    fi
    if [ ! -f "lrschema.c99" ]; then
        croak "lrschema.c99 is missing"
    fi
    if [ ! -f "lrschema.cob" ]; then
        croak "lrschema.cob is missing"
    fi
    if [ ! -f "lrschema.cpp" ]; then
        croak "lrschema.cpp is missing"
    fi
    if [ ! -f "lrschema.csh" ]; then
        croak "lrschema.csh is missing"
    fi
    if [ ! -f "lrschema.jav" ]; then
        croak "lrschema.jav is missing"
    fi
    if [ ! -f "lrschema.ksh" ]; then
        croak "lrschema.ksh is missing"
    fi
    if [ ! -f "lrschema.mst" ]; then
        croak "lrschema.mst is missing"
    fi
    if [ ! -f "lrschema.pas" ]; then
        croak "lrschema.pas is missing"
    fi
    if [ ! -f "lrschema.pl" ]; then
        croak "lrschema.pl is missing"
    fi
    if [ ! -f "lrservice.pl" ]; then
        croak "lrservice.pl is missing"
    fi
    if [ ! -f "lrschema.py" ]; then
        croak "lrschema.py is missing"
    fi
    if [ ! -f "lrschema.php" ]; then
        croak "lrschema.php is missing"
    fi
    if [ ! -f "lrschema.rex" ]; then
        croak "lrschema.rex is missing"
    fi
    if [ ! -f "lrschema.sh" ]; then
        croak "lrschema.sh is missing"
    fi
    if [ ! -f "lrschema.sql" ]; then
        croak "lrschema.sql is missing"
    fi
    if [ ! -f "lrschema.vb" ]; then
        croak "lrschema.vb is missing"
    fi
    if [ ! -f "lrmesg.txt" ]; then
        croak "lrmesg.txt is missing"
    fi
    if [ ! -f "lr" ]; then
        croak "lr is missing"
    fi
    if [ ! -f "lr.ini" ]; then
        croak "lr.ini is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "lr.c" ]; then
        croak "lr.c is missing"
    fi
    if [ ! -f "lrcalc.c" ]; then
        croak "lrcalc.c is missing"
    fi
    if [ ! -f "lreval.c" ]; then
        croak "lreval.c is missing"
    fi
    if [ ! -f "lrcode.c" ]; then
        croak "lrcode.c is missing"
    fi
    if [ ! -f "lrload.c" ]; then
        croak "lrload.c is missing"
    fi
    if [ ! -f "lrdump.c" ]; then
        croak "lrdump.c is missing"
    fi
    if [ ! -f "lrfree.c" ]; then
        croak "lrfree.c is missing"
    fi
    if [ ! -f "lrsort.c" ]; then
        croak "lrsort.c is missing"
    fi
    if [ ! -f "lrglib.c" ]; then
        croak "lrglib.c is missing"
    fi
    if [ ! -f "lrlibr.c" ]; then
        croak "lrlibr.c is missing"
    fi
    if [ ! -f "lroptn.c" ]; then
        croak "lroptn.c is missing"
    fi
    if [ ! -f "lrsymb.c" ]; then
        croak "lrsymb.c is missing"
    fi
    if [ ! -f "lrpriv.h" ]; then
        croak "lrpriv.h is missing"
    fi
    if [ ! -f "lrschema.asm" ]; then
        croak "lrschema.asm is missing"
    fi
    if [ ! -f "lrschema.awk" ]; then
        croak "lrschema.awk is missing"
    fi
    if [ ! -f "lrschema.bsh" ]; then
        croak "lrschema.bsh is missing"
    fi
    if [ ! -f "lrschema.c" ]; then
        croak "lrschema.c is missing"
    fi
    if [ ! -f "lrschema.c99" ]; then
        croak "lrschema.c99 is missing"
    fi
    if [ ! -f "lrschema.cob" ]; then
        croak "lrschema.cob is missing"
    fi
    if [ ! -f "lrschema.cpp" ]; then
        croak "lrschema.cpp is missing"
    fi
    if [ ! -f "lrschema.csh" ]; then
        croak "lrschema.csh is missing"
    fi
    if [ ! -f "lrschema.jav" ]; then
        croak "lrschema.jav is missing"
    fi
    if [ ! -f "lrschema.ksh" ]; then
        croak "lrschema.ksh is missing"
    fi
    if [ ! -f "lrschema.mst" ]; then
        croak "lrschema.mst is missing"
    fi
    if [ ! -f "lrschema.pas" ]; then
        croak "lrschema.pas is missing"
    fi
    if [ ! -f "lrschema.pl" ]; then
        croak "lrschema.pl is missing"
    fi
    if [ ! -f "lrservice.pl" ]; then
        croak "lrservice.pl is missing"
    fi
    if [ ! -f "lrschema.py" ]; then
        croak "lrschema.py is missing"
    fi
    if [ ! -f "lrschema.php" ]; then
        croak "lrschema.php is missing"
    fi
    if [ ! -f "lrschema.rex" ]; then
        croak "lrschema.rex is missing"
    fi
    if [ ! -f "lrschema.sh" ]; then
        croak "lrschema.sh is missing"
    fi
    if [ ! -f "lrschema.sql" ]; then
        croak "lrschema.sql is missing"
    fi
    if [ ! -f "lrschema.vb" ]; then
        croak "lrschema.vb is missing"
    fi
    if [ ! -f "lrmesg.txt" ]; then
        croak "lrmesg.txt is missing"
    fi
    if [ ! -f "prelude.h" ]; then
        croak "prelude.h is missing"
    fi
    if [ ! -f "lr.ini" ]; then
        croak "lr.ini is missing"
    fi
    if [ ! -f "lr_eg.ini" ]; then
        croak "lr_eg.ini is missing"
    fi
    if [ ! -f "template" ]; then
        croak "template is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "lrcalc.l" ]; then
        croak "lrcalc.l is missing"
    fi
    if [ ! -f "lreval.l" ]; then
        croak "lreval.l is missing"
    fi
    if [ ! -f "lrcode.l" ]; then
        croak "lrcode.l is missing"
    fi
    if [ ! -f "lrload.l" ]; then
        croak "lrload.l is missing"
    fi
    if [ ! -f "lrglib.h" ]; then
        croak "lrglib.h is missing"
    fi
    if [ ! -f "lrlibr.h" ]; then
        croak "lrlibr.h is missing"
    fi
    if [ ! -f "lroptn.h" ]; then
        croak "lroptn.h is missing"
    fi
    if [ ! -f "lrsymb.h" ]; then
        croak "lrsymb.h is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "lr.c" ]; then
        croak "lr.c is missing"
    fi
    if [ ! -f "lrcalc.c" ]; then
        croak "lrcalc.c is missing"
    fi
    if [ ! -f "lreval.c" ]; then
        croak "lreval.c is missing"
    fi
    if [ ! -f "lrcode.c" ]; then
        croak "lrcode.c is missing"
    fi
    if [ ! -f "lrload.c" ]; then
        croak "lrload.c is missing"
    fi
    if [ ! -f "lrdump.c" ]; then
        croak "lrdump.c is missing"
    fi
    if [ ! -f "lrfree.c" ]; then
        croak "lrfree.c is missing"
    fi
    if [ ! -f "lrsort.c" ]; then
        croak "lrsort.c is missing"
    fi
    if [ ! -f "lrglib.c" ]; then
        croak "lrglib.c is missing"
    fi
    if [ ! -f "lrlibr.c" ]; then
        croak "lrlibr.c is missing"
    fi
    if [ ! -f "lroptn.c" ]; then
        croak "lroptn.c is missing"
    fi
    if [ ! -f "lrsymb.c" ]; then
        croak "lrsymb.c is missing"
    fi
    if [ ! -f "lrpriv.h" ]; then
        croak "lrpriv.h is missing"
    fi
    if [ ! -f "lrschema.asm" ]; then
        croak "lrschema.asm is missing"
    fi
    if [ ! -f "lrschema.awk" ]; then
        croak "lrschema.awk is missing"
    fi
    if [ ! -f "lrschema.bsh" ]; then
        croak "lrschema.bsh is missing"
    fi
    if [ ! -f "lrschema.c" ]; then
        croak "lrschema.c is missing"
    fi
    if [ ! -f "lrschema.c99" ]; then
        croak "lrschema.c99 is missing"
    fi
    if [ ! -f "lrschema.cob" ]; then
        croak "lrschema.cob is missing"
    fi
    if [ ! -f "lrschema.cpp" ]; then
        croak "lrschema.cpp is missing"
    fi
    if [ ! -f "lrschema.csh" ]; then
        croak "lrschema.csh is missing"
    fi
    if [ ! -f "lrschema.jav" ]; then
        croak "lrschema.jav is missing"
    fi
    if [ ! -f "lrschema.ksh" ]; then
        croak "lrschema.ksh is missing"
    fi
    if [ ! -f "lrschema.mst" ]; then
        croak "lrschema.mst is missing"
    fi
    if [ ! -f "lrschema.pas" ]; then
        croak "lrschema.pas is missing"
    fi
    if [ ! -f "lrschema.pl" ]; then
        croak "lrschema.pl is missing"
    fi
    if [ ! -f "lrservice.pl" ]; then
        croak "lrservice.pl is missing"
    fi
    if [ ! -f "lrschema.py" ]; then
        croak "lrschema.py is missing"
    fi
    if [ ! -f "lrschema.php" ]; then
        croak "lrschema.php is missing"
    fi
    if [ ! -f "lrschema.rex" ]; then
        croak "lrschema.rex is missing"
    fi
    if [ ! -f "lrschema.sh" ]; then
        croak "lrschema.sh is missing"
    fi
    if [ ! -f "lrschema.sql" ]; then
        croak "lrschema.sql is missing"
    fi
    if [ ! -f "lrschema.vb" ]; then
        croak "lrschema.vb is missing"
    fi
    if [ ! -f "lrmesg.txt" ]; then
        croak "lrmesg.txt is missing"
    fi
    if [ ! -f "prelude.h" ]; then
        croak "prelude.h is missing"
    fi
    if [ ! -f "lr.ini" ]; then
        croak "lr.ini is missing"
    fi
    if [ ! -f "lr_eg.ini" ]; then
        croak "lr_eg.ini is missing"
    fi
    if [ ! -f "template" ]; then
        croak "template is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "lrcalc.l" ]; then
        croak "lrcalc.l is missing"
    fi
    if [ ! -f "lrcalc.i" ]; then
        croak "lrcalc.i is missing"
    fi
    if [ ! -f "lrcalc.d" ]; then
        croak "lrcalc.d is missing"
    fi
    if [ ! -f "lreval.l" ]; then
        croak "lreval.l is missing"
    fi
    if [ ! -f "lreval.i" ]; then
        croak "lreval.i is missing"
    fi
    if [ ! -f "lreval.d" ]; then
        croak "lreval.d is missing"
    fi
    if [ ! -f "lrcode.l" ]; then
        croak "lrcode.l is missing"
    fi
    if [ ! -f "lrcode.i" ]; then
        croak "lrcode.i is missing"
    fi
    if [ ! -f "lrcode.d" ]; then
        croak "lrcode.d is missing"
    fi
    if [ ! -f "lrload.l" ]; then
        croak "lrload.l is missing"
    fi
    if [ ! -f "lrload.i" ]; then
        croak "lrload.i is missing"
    fi
    if [ ! -f "lrload.d" ]; then
        croak "lrload.d is missing"
    fi
    if [ ! -f "lrglib.h" ]; then
        croak "lrglib.h is missing"
    fi
    if [ ! -f "lrlibr.h" ]; then
        croak "lrlibr.h is missing"
    fi
    if [ ! -f "lroptn.h" ]; then
        croak "lroptn.h is missing"
    fi
    if [ ! -f "lrsymb.h" ]; then
        croak "lrsymb.h is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing Libero into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp lrschema.asm $_INSTALL_ROOT/bin/"
    cp lrschema.asm $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.asm $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.asm"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.asm || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.asm\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.awk $_INSTALL_ROOT/bin/"
    cp lrschema.awk $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.awk $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.awk"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.awk || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.awk\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.bsh $_INSTALL_ROOT/bin/"
    cp lrschema.bsh $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.bsh $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.bsh"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.bsh || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.bsh\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.c $_INSTALL_ROOT/bin/"
    cp lrschema.c $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.c $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.c"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.c || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.c\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.c99 $_INSTALL_ROOT/bin/"
    cp lrschema.c99 $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.c99 $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.c99"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.c99 || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.c99\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.cob $_INSTALL_ROOT/bin/"
    cp lrschema.cob $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.cob $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.cob"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.cob || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.cob\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.cpp $_INSTALL_ROOT/bin/"
    cp lrschema.cpp $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.cpp $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.cpp"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.cpp || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.cpp\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.csh $_INSTALL_ROOT/bin/"
    cp lrschema.csh $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.csh $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.csh"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.csh || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.csh\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.jav $_INSTALL_ROOT/bin/"
    cp lrschema.jav $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.jav $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.jav"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.jav || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.jav\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.ksh $_INSTALL_ROOT/bin/"
    cp lrschema.ksh $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.ksh $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.ksh"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.ksh || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.ksh\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.mst $_INSTALL_ROOT/bin/"
    cp lrschema.mst $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.mst $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.mst"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.mst || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.mst\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.pas $_INSTALL_ROOT/bin/"
    cp lrschema.pas $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.pas $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.pas"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.pas || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.pas\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.pl $_INSTALL_ROOT/bin/"
    cp lrschema.pl $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.pl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.pl"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.pl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.pl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrservice.pl $_INSTALL_ROOT/bin/"
    cp lrservice.pl $_INSTALL_ROOT/bin/ || croak "\"cp lrservice.pl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrservice.pl"
    chmod 0644 $_INSTALL_ROOT/bin/lrservice.pl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrservice.pl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.py $_INSTALL_ROOT/bin/"
    cp lrschema.py $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.py $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.py"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.py || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.py\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.php $_INSTALL_ROOT/bin/"
    cp lrschema.php $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.php $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.php"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.php || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.php\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.rex $_INSTALL_ROOT/bin/"
    cp lrschema.rex $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.rex $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.rex"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.rex || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.rex\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.sh $_INSTALL_ROOT/bin/"
    cp lrschema.sh $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.sh $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.sh"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.sh || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.sh\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.sql $_INSTALL_ROOT/bin/"
    cp lrschema.sql $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.sql $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.sql"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.sql || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.sql\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrschema.vb $_INSTALL_ROOT/bin/"
    cp lrschema.vb $_INSTALL_ROOT/bin/ || croak "\"cp lrschema.vb $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrschema.vb"
    chmod 0644 $_INSTALL_ROOT/bin/lrschema.vb || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrschema.vb\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lrmesg.txt $_INSTALL_ROOT/bin/"
    cp lrmesg.txt $_INSTALL_ROOT/bin/ || croak "\"cp lrmesg.txt $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lrmesg.txt"
    chmod 0644 $_INSTALL_ROOT/bin/lrmesg.txt || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lrmesg.txt\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lr $_INSTALL_ROOT/bin/"
    cp lr $_INSTALL_ROOT/bin/ || croak "\"cp lr $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/lr"
    chmod 0755 $_INSTALL_ROOT/bin/lr || croak "\"chmod 0755 $_INSTALL_ROOT/bin/lr\" failed"
    [ "$BOOM_TRACE" ] && echo "cp lr.ini $_INSTALL_ROOT/bin/"
    cp lr.ini $_INSTALL_ROOT/bin/ || croak "\"cp lr.ini $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/lr.ini"
    chmod 0644 $_INSTALL_ROOT/bin/lr.ini || croak "\"chmod 0644 $_INSTALL_ROOT/bin/lr.ini\" failed"
    mkdir -p $_INSTALL_ROOT/doc/Libero/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/Libero/"
    cp readme.txt $_INSTALL_ROOT/doc/Libero/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/Libero/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Libero/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/Libero/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Libero/readme.txt\" failed"
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrcalc.l"
    lr -quiet lrcalc.l || croak "\"lr -quiet lrcalc.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lreval.l"
    lr -quiet lreval.l || croak "\"lr -quiet lreval.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrcode.l"
    lr -quiet lrcode.l || croak "\"lr -quiet lrcode.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrload.l"
    lr -quiet lrload.l || croak "\"lr -quiet lrload.l\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrcalc.l"
    lr -quiet lrcalc.l || croak "\"lr -quiet lrcalc.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lreval.l"
    lr -quiet lreval.l || croak "\"lr -quiet lreval.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrcode.l"
    lr -quiet lrcode.l || croak "\"lr -quiet lrcode.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet lrload.l"
    lr -quiet lrload.l || croak "\"lr -quiet lrload.l\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED BINARIES   -----------------------

a_remove_generated_binaries() {
:
    rm -f lr
    rm -f lr.o
    rm -f lr
    rm -f lrcalc.o
    rm -f lreval.o
    rm -f lrcode.o
    rm -f lrload.o
    rm -f lrdump.o
    rm -f lrfree.o
    rm -f lrsort.o
    rm -f lrglib.o
    rm -f lrlibr.o
    rm -f lroptn.o
    rm -f lrsymb.o
    rm -f liblr.a
    #   Remove byproducts of typical work
    rm -f core* 
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f lrcalc.i
    rm -f lrcalc.d
    rm -f lreval.i
    rm -f lreval.d
    rm -f lrcode.i
    rm -f lrcode.d
    rm -f lrload.i
    rm -f lrload.d
    rm -f stamp_generate
    rm -f lr_*.zip
    rm -f lr_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "lr-2.41"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files, and"
    echo "    compiles all source files."
echo "compile:"
    echo "  From the raw project sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the raw project sources, removes all generated"
    echo "    source and binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project.  Note that binary"
    echo "    distributions can only be created at the product level."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  From the packaged sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  From the stripped-down packaged sources, compiles all source files"
    echo "    without any code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
    echo "    This action is only valid after a successful build."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

#
#   Makefile for SFL
#
#   Generated by iMatix Boom
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Default values for object, library, and executable extensions.
#
OBJ = .o
LIB = .a
EXE =
CC  = c -q

#   Reset the suffixes that will be considered to just our own list.
#
#   Make programs use the .SUFFIXES psuedo rule for this

.SUFFIXES:
.SUFFIXES: $(EXE) $(LIB) $(OBJ) .c .d .i .l

#   Objects depend on source files with the same name; and are compiled
#   with the iMatix c script without any arguments.
#
.c$(OBJ):
	$(CC) $<
#   And .c files _do_not_ depend on .l files (.l files are Libero files,
#   not lex input files as the default rules think).
#
#   The semicolon forces make to accept the rule as an override.
#
.l.c: ;

#
#   Default rule -- all depends on everything.
#   We do this so that we can define the rule at the end.
#
all: everything
#
#   The following targets are not files. Mark them as such.
#
.PHONY: all generate everything install regen clean
#
#   Dependencies
#
libsfl$(LIB): sflbits$(OBJ) sflcomp$(OBJ) sflcons$(OBJ) sflconv$(OBJ) sflcryp$(OBJ) sfldate$(OBJ) sfldescr$(OBJ) sfldir$(OBJ) sflenv$(OBJ) sflexdr$(OBJ) sflfile$(OBJ) sflfind$(OBJ) sflfort$(OBJ) sflheap$(OBJ) sflhttp$(OBJ) sflini$(OBJ) sfllang$(OBJ) sfllbuf$(OBJ) sfllist$(OBJ) sflmail$(OBJ) sflmath$(OBJ) sflmem$(OBJ) sflmesg$(OBJ) sflmime$(OBJ) sflnode$(OBJ) sflprint$(OBJ) sflproc$(OBJ) sflsearch$(OBJ) sflsha$(OBJ) sflslot$(OBJ) sflsort$(OBJ) sflstr$(OBJ) sflsymb$(OBJ) sflsyst$(OBJ) sfltok$(OBJ) sfltree$(OBJ) sfltron$(OBJ) sfluid$(OBJ) sflxml$(OBJ) sflxmll$(OBJ) sflxmls$(OBJ) sflsock$(OBJ) sflcvbs$(OBJ) sflcvdp$(OBJ) sflcvds$(OBJ) sflcvns$(OBJ) sflcvsb$(OBJ) sflcvsd$(OBJ) sflcvsn$(OBJ) sflcvst$(OBJ) sflcvtp$(OBJ) sflcvts$(OBJ) sflscrit$(OBJ) 
	$(CC) -r libsfl$(LIB) sflbits$(OBJ) sflcomp$(OBJ) sflcons$(OBJ) sflconv$(OBJ) sflcryp$(OBJ) sfldate$(OBJ) sfldescr$(OBJ) sfldir$(OBJ) sflenv$(OBJ) sflexdr$(OBJ) sflfile$(OBJ) sflfind$(OBJ) sflfort$(OBJ) sflheap$(OBJ) sflhttp$(OBJ) sflini$(OBJ) sfllang$(OBJ) sfllbuf$(OBJ) sfllist$(OBJ) sflmail$(OBJ) sflmath$(OBJ) sflmem$(OBJ) sflmesg$(OBJ) sflmime$(OBJ) sflnode$(OBJ) sflprint$(OBJ) sflproc$(OBJ) sflsearch$(OBJ) sflsha$(OBJ) sflslot$(OBJ) sflsort$(OBJ) sflstr$(OBJ) sflsymb$(OBJ) sflsyst$(OBJ) sfltok$(OBJ) sfltree$(OBJ) sfltron$(OBJ) sfluid$(OBJ) sflxml$(OBJ) sflxmll$(OBJ) sflxmls$(OBJ) sflsock$(OBJ) sflcvbs$(OBJ) sflcvdp$(OBJ) sflcvds$(OBJ) sflcvns$(OBJ) sflcvsb$(OBJ) sflcvsd$(OBJ) sflcvsn$(OBJ) sflcvst$(OBJ) sflcvtp$(OBJ) sflcvts$(OBJ) sflscrit$(OBJ) 
sflbits$(OBJ): sflbits.c prelude.h sflcomp.h sfllist.h sflmem.h sflmime.h sflbits.h
sflcomp$(OBJ): sflcomp.c
sflcons$(OBJ): sflcons.c sflfile.h sflstr.h sfldate.h sflprint.h sflcons.h
sflconv$(OBJ): sflconv.c sflconv.h
sflcryp$(OBJ): sflcryp.c sflcryp.h
sfldate$(OBJ): sfldate.c sflsymb.h sflenv.h sflfind.h
sfldescr$(OBJ): sfldescr.c sfldescr.h
sfldir$(OBJ): sfldir.c sfluid.h sfldir.h
sflenv$(OBJ): sflenv.c
sflexdr$(OBJ): sflexdr.c sflexdr.h
sflfile$(OBJ): sflfile.c sflnode.h sfltok.h
sflfind$(OBJ): sflfind.c
sflfort$(OBJ): sflfort.c sflfort.h sflsock.h
sflheap$(OBJ): sflheap.c sflheap.h
sflhttp$(OBJ): sflhttp.c sflhttp.h
sflini$(OBJ): sflini.c sfltron.h sflini.h
sfllang$(OBJ): sfllang.c sfllang.h sflunic.h
sfllbuf$(OBJ): sfllbuf.c sfllbuf.h
sfllist$(OBJ): sfllist.c
sflmail$(OBJ): sflmail.c sflmail.h
sflmath$(OBJ): sflmath.c sflmath.h
sflmem$(OBJ): sflmem.c
sflmesg$(OBJ): sflmesg.c sflmesg.h
sflmime$(OBJ): sflmime.c
sflnode$(OBJ): sflnode.c
sflprint$(OBJ): sflprint.c
sflproc$(OBJ): sflproc.c sflproc.h sflprocx.h sflprocu.imp sflprocx.imp sflproco.imp sflprocw.imp sflprocv.imp
sflsearch$(OBJ): sflsearch.c sflsort.h sflsearch.h
sflsha$(OBJ): sflsha.c sflsha.h
sflslot$(OBJ): sflslot.c sflslot.h
sflsort$(OBJ): sflsort.c sflxml.h sflxmll.h
sflstr$(OBJ): sflstr.c
sflsymb$(OBJ): sflsymb.c
sflsyst$(OBJ): sflsyst.c sflsyst.h
sfltok$(OBJ): sfltok.c
sfltree$(OBJ): sfltree.c sfltree.h
sfltron$(OBJ): sfltron.c
sfluid$(OBJ): sfluid.c
sflxml$(OBJ): sflxml.c
sflxmll$(OBJ): sflxmll.c
sflxmls$(OBJ): sflxmls.c sflxmls.h
sflsock$(OBJ): sflsock.c
sflcvbs$(OBJ): sflcvbs.c
sflcvdp$(OBJ): sflcvdp.c
sflcvds$(OBJ): sflcvds.c
sflcvns$(OBJ): sflcvns.c
sflcvsb$(OBJ): sflcvsb.c
sflcvsd$(OBJ): sflcvsd.c
sflcvsn$(OBJ): sflcvsn.c
sflcvst$(OBJ): sflcvst.c sflcvst.d sflcvst.i
sflcvtp$(OBJ): sflcvtp.c
sflcvts$(OBJ): sflcvts.c
sflscrit$(OBJ): sflscrit.c sflscrit.d sflscrit.i
testall$(OBJ): testall.c sfl.h
testall$(EXE): testall$(OBJ) libsfl$(LIB) 
	$(CC) -L testall
testbits$(OBJ): testbits.c
testbits$(EXE): testbits$(OBJ) libsfl$(LIB) 
	$(CC) -L testbits
testcgi$(OBJ): testcgi.c
testcgi$(EXE): testcgi$(OBJ) libsfl$(LIB) 
	$(CC) -L testcgi
testcomp$(OBJ): testcomp.c
testcomp$(EXE): testcomp$(OBJ) libsfl$(LIB) 
	$(CC) -L testcomp
testconv$(OBJ): testconv.c
testconv$(EXE): testconv$(OBJ) libsfl$(LIB) 
	$(CC) -L testconv
testcryp$(OBJ): testcryp.c
testcryp$(EXE): testcryp$(OBJ) libsfl$(LIB) 
	$(CC) -L testcryp
testdate$(OBJ): testdate.c
testdate$(EXE): testdate$(OBJ) libsfl$(LIB) 
	$(CC) -L testdate
testdir$(OBJ): testdir.c
testdir$(EXE): testdir$(OBJ) libsfl$(LIB) 
	$(CC) -L testdir
testenv$(OBJ): testenv.c
testenv$(EXE): testenv$(OBJ) libsfl$(LIB) 
	$(CC) -L testenv
testexdr$(OBJ): testexdr.c
testexdr$(EXE): testexdr$(OBJ) libsfl$(LIB) 
	$(CC) -L testexdr
testfile$(OBJ): testfile.c
testfile$(EXE): testfile$(OBJ) libsfl$(LIB) 
	$(CC) -L testfile
testfind$(OBJ): testfind.c
testfind$(EXE): testfind$(OBJ) libsfl$(LIB) 
	$(CC) -L testfind
testfort$(OBJ): testfort.c
testfort$(EXE): testfort$(OBJ) libsfl$(LIB) 
	$(CC) -L testfort
testheap$(OBJ): testheap.c
testheap$(EXE): testheap$(OBJ) libsfl$(LIB) 
	$(CC) -L testheap
testhttp$(OBJ): testhttp.c
testhttp$(EXE): testhttp$(OBJ) libsfl$(LIB) 
	$(CC) -L testhttp
testini$(OBJ): testini.c
testini$(EXE): testini$(OBJ) libsfl$(LIB) 
	$(CC) -L testini
testlang$(OBJ): testlang.c
testlang$(EXE): testlang$(OBJ) libsfl$(LIB) 
	$(CC) -L testlang
testmem$(OBJ): testmem.c
testmem$(EXE): testmem$(OBJ) libsfl$(LIB) 
	$(CC) -L testmem
testmime$(OBJ): testmime.c
testmime$(EXE): testmime$(OBJ) libsfl$(LIB) 
	$(CC) -L testmime
testproc$(OBJ): testproc.c
testproc$(EXE): testproc$(OBJ) libsfl$(LIB) 
	$(CC) -L testproc
teststr$(OBJ): teststr.c
teststr$(EXE): teststr$(OBJ) libsfl$(LIB) 
	$(CC) -L teststr
testsym$(OBJ): testsym.c
testsym$(EXE): testsym$(OBJ) libsfl$(LIB) 
	$(CC) -L testsym
testtok$(OBJ): testtok.c
testtok$(EXE): testtok$(OBJ) libsfl$(LIB) 
	$(CC) -L testtok
testtree$(OBJ): testtree.c
testtree$(EXE): testtree$(OBJ) libsfl$(LIB) 
	$(CC) -L testtree
testtron$(OBJ): testtron.c
testtron$(EXE): testtron$(OBJ) libsfl$(LIB) 
	$(CC) -L testtron
testuid$(OBJ): testuid.c
testuid$(EXE): testuid$(OBJ) libsfl$(LIB) 
	$(CC) -L testuid
testxml$(OBJ): testxml.c
testxml$(EXE): testxml$(OBJ) libsfl$(LIB) 
	$(CC) -L testxml
testxmls$(OBJ): testxmls.c
testxmls$(EXE): testxmls$(OBJ) libsfl$(LIB) 
	$(CC) -L testxmls
testsearch$(OBJ): testsearch.c
testsearch$(EXE): testsearch$(OBJ) libsfl$(LIB) 
	$(CC) -L testsearch
dos2unix$(OBJ): dos2unix.c
dos2unix$(EXE): dos2unix$(OBJ) libsfl$(LIB) 
	$(CC) -L dos2unix
sflcvst.i: sflcvst.l
	lr -quiet sflcvst.l
sflcvst.d: sflcvst.l
	lr -quiet sflcvst.l
sflscrit.i: sflscrit.l
	lr -quiet sflscrit.l
sflscrit.d: sflscrit.l
	lr -quiet sflscrit.l

everything: generate libsfl$(LIB) testall$(EXE) testbits$(EXE) testcgi$(EXE) testcomp$(EXE) testconv$(EXE) testcryp$(EXE) testdate$(EXE) testdir$(EXE) testenv$(EXE) testexdr$(EXE) testfile$(EXE) testfind$(EXE) testfort$(EXE) testheap$(EXE) testhttp$(EXE) testini$(EXE) testlang$(EXE) testmem$(EXE) testmime$(EXE) testproc$(EXE) teststr$(EXE) testsym$(EXE) testtok$(EXE) testtree$(EXE) testtron$(EXE) testuid$(EXE) testxml$(EXE) testxmls$(EXE) testsearch$(EXE) dos2unix$(EXE) 
install:
	sh boomake install
generate: stamp_generate
stamp_generate:
	sh boomake regen
regen:
	sh boomake regen
clean:
	sh boomake clean


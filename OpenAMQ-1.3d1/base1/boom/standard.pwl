<?xml version="1.0"?>
<!--
    Copyright (c) 1996-2009 iMatix Corporation

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or (at
    your option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    For information on alternative licensing for OEMs, please contact
    iMatix Corporation.
-->

<pwl name = "standard">
This is the standard Boom workflow for projects containing
generated code, and compiled into binary executables or libraries.

<include filename = "targets.pwl" />

<state name = "initial">
  <event name = "ok" internal = "1" nextstate = "initial check" >
    <action name = "check operating context" />
  </event>
</state>

<state name = "initial check">
  <event name = "repository" internal = "1" nextstate = "repository"  />
  <event name = "source"     internal = "1" nextstate = "source"  />
  <event name = "stripped"   internal = "1" nextstate = "stripped"  />
</state>

<state name = "repository" inherit = "default">
  <event name = "build">
  From the raw project sources, produces all generated files, and
  compiles all source files.
    <action name = "check project files exist" />
    <action name = "produce generated files"   />
    <action name = "check source files exist"  />
    <action name = "build binary files"        />
  </event> 
  <event name = "compile">
  From the raw project sources, compiles all source files without any
  code generation.
    <action name = "check source files exist"  />
    <action name = "build binary files"        />
  </event>
  <event name = "clean">
  When working with the raw project sources, removes all generated
  source and binary files from the project directory.
    <action name = "remove generated sources"  />
    <action name = "remove generated binaries" />
  </event>
  <event name = "regen">
  Produces generated files required for building using the 
  current model.
    <action name = "check project files exist" />
    <action name = "produce generated files"   />
  </event>
  <event name = "allgen">
  Produces all generated files.
    <action name = "check project files exist"     />
    <action name = "produce all generated files"   />
  </event>
  <event name = "distrib">
  Creates a source distribution for the project.  Note that binary
  distributions can only be created at the product level.
    <action name = "produce all generated files"   />
    <action name = "check all source files exist"  />
    <action name = "build source packages"         />
  </event>
  <event name = "distsrc">
  Equivalent to distrib, provided for compatibility.
    <action name = "produce all generated files"   />
    <action name = "check all source files exist"  />
    <action name = "build source packages"         />
  </event>
  <event name = "distrev">
  Creates a source distribution for the project.  Builds distribution
  packages based on source control version number. Note that binary
  distributions can only be created at the product level.
    <action name = "produce all generated files"   />
    <action name = "check all source files exist"  />
    <action name = "use source control revision"   />
    <action name = "build source packages"         />
  </event>
</state>

<state name = "source" inherit = "default">
  <event name = "build">
  From the packaged sources, compiles all source files without any
  code generation.
    <action name = "check source files exist"  />
    <action name = "build binary files"        />
  </event>
  <event name = "clean">
  When working with the packaged sources, removes all generated
  binary files from the project directory.
    <action name = "remove generated binaries" />
  </event>
  <event name = "regen">
  Produces generated files required for building using the 
  current model.
    <action name = "check project files exist" />
    <action name = "produce generated files"   />
  </event>
  <event name = "allgen">
  Produces all generated files.
    <action name = "check project files exist"     />
    <action name = "produce all generated files"   />
  </event>
</state>

<state name = "stripped" inherit = "default">
  <event name = "build">
  From the stripped-down packaged sources, compiles all source files
  without any code generation.
    <action name = "build binary files"        />
  </event>
  <event name = "clean">
  When working with the packaged sources, removes all generated
  binary files from the project directory.
    <action name = "remove generated binaries" />
  </event>
</state>

<state name = "default">
  <event name = "install">
  Installs deliverables into the final or temporary install tree.
  This action is only valid after a successful build.
    <action name = "check binary files exist"  />
    <action name = "install deliverables"      />
  </event>
  <event name = "test">
  Runs regression tests for the project.
    <action name = "check binary files exist"  />
    <action name = "run regression tests"      />
  </event>
  <event name = "help">
  Shows a list of the commands allowed on the project.
    <action name = "report help information"   />
  </event>
  <event name = "version">
  Show project version.
    <action name = "report project version"    />
  </event>
  <event name = "empty"  internal = "1" >
    <action name = "report help information"   />
  </event>
</state>
</pwl>

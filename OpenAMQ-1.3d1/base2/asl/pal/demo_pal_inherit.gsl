#   'Inherit' engine for demo_pal
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function inherit_pal ([pal])
    my.entity = my.[pal]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_pal ? 0
       echo "<inherit_pal location = \"$(my.location)\""
    endif

    for my.[pal].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[pal].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[pal].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[pal].[macro] as [macro]
        inherit_macro ([macro])
    endfor

    for my.[pal].[include] as [include]
        inherit_include ([include])
    endfor

    for my.[pal].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[pal].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[pal].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[pal].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[pal].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[pal].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[pal].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[pal].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[pal].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[pal].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[pal].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[pal].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[pal].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[pal].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[pal].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[pal].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[pal].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[pal].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[pal].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[pal].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[pal].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[pal].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[pal].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[pal].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[pal].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[pal].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[pal].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[pal].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[pal].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[pal].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[pal].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[pal].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[pal].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[pal].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[pal].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[pal].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[pal].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_doc ([doc])
    my.entity = my.[doc]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<inherit_doc location = \"$(my.location)\""
    endif

endfunction

function inherit_include ([include])
    my.entity = my.[include]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<inherit_include location = \"$(my.location)\""
    endif

endfunction

function inherit_macro ([macro])
    my.entity = my.[macro]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_macro ? 0
       echo "<inherit_macro location = \"$(my.location)\""
    endif

endfunction

function inherit_scripting ([scripting])
    my.entity = my.[scripting]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_scripting ? 0
       echo "<inherit_scripting location = \"$(my.location)\""
    endif

    for my.[scripting].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[scripting].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[scripting].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[scripting].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[scripting].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[scripting].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[scripting].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[scripting].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[scripting].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[scripting].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[scripting].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[scripting].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[scripting].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[scripting].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[scripting].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[scripting].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[scripting].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[scripting].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[scripting].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[scripting].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[scripting].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[scripting].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[scripting].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[scripting].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[scripting].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[scripting].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[scripting].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[scripting].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[scripting].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[scripting].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[scripting].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[scripting].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[scripting].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[scripting].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[scripting].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[scripting].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[scripting].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_session ([session])
    my.entity = my.[session]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_session ? 0
       echo "<inherit_session location = \"$(my.location)\""
    endif

    for my.[session].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[session].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[session].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[session].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[session].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[session].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[session].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[session].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[session].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[session].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[session].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[session].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[session].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[session].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[session].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[session].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[session].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[session].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[session].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[session].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[session].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[session].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[session].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[session].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[session].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[session].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[session].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[session].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[session].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[session].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[session].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[session].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[session].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[session].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[session].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[session].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[session].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_invoke ([invoke])
    my.entity = my.[invoke]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_invoke ? 0
       echo "<inherit_invoke location = \"$(my.location)\""
    endif

    for my.[invoke].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[invoke].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[invoke].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[invoke].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[invoke].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[invoke].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[invoke].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[invoke].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[invoke].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[invoke].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[invoke].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[invoke].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[invoke].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[invoke].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[invoke].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[invoke].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[invoke].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[invoke].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[invoke].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[invoke].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[invoke].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[invoke].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[invoke].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[invoke].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[invoke].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[invoke].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[invoke].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[invoke].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[invoke].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[invoke].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[invoke].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[invoke].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[invoke].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[invoke].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[invoke].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[invoke].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[invoke].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_server ([server])
    my.entity = my.[server]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_server ? 0
       echo "<inherit_server location = \"$(my.location)\""
    endif

    for my.[server].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[server].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[server].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[server].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[server].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[server].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[server].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[server].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[server].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[server].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[server].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[server].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[server].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[server].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[server].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[server].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[server].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[server].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[server].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[server].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[server].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[server].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[server].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[server].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[server].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[server].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[server].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[server].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[server].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[server].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[server].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[server].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[server].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[server].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[server].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[server].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[server].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_timer ([timer])
    my.entity = my.[timer]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_timer ? 0
       echo "<inherit_timer location = \"$(my.location)\""
    endif

endfunction

function inherit_set ([set])
    my.entity = my.[set]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_set ? 0
       echo "<inherit_set location = \"$(my.location)\""
    endif

endfunction

function inherit_inc ([inc])
    my.entity = my.[inc]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_inc ? 0
       echo "<inherit_inc location = \"$(my.location)\""
    endif

endfunction

function inherit_dec ([dec])
    my.entity = my.[dec]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_dec ? 0
       echo "<inherit_dec location = \"$(my.location)\""
    endif

endfunction

function inherit_read ([read])
    my.entity = my.[read]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_read ? 0
       echo "<inherit_read location = \"$(my.location)\""
    endif

endfunction

function inherit_random ([random])
    my.entity = my.[random]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_random ? 0
       echo "<inherit_random location = \"$(my.location)\""
    endif

endfunction

function inherit_echo ([echo])
    my.entity = my.[echo]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_echo ? 0
       echo "<inherit_echo location = \"$(my.location)\""
    endif

endfunction

function inherit_assert ([assert])
    my.entity = my.[assert]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<inherit_assert location = \"$(my.location)\""
    endif

endfunction

function inherit_repeat ([repeat])
    my.entity = my.[repeat]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_repeat ? 0
       echo "<inherit_repeat location = \"$(my.location)\""
    endif

    for my.[repeat].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[repeat].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[repeat].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[repeat].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[repeat].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[repeat].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[repeat].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[repeat].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[repeat].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[repeat].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[repeat].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[repeat].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[repeat].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[repeat].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[repeat].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[repeat].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[repeat].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[repeat].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[repeat].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[repeat].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[repeat].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[repeat].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[repeat].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[repeat].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[repeat].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[repeat].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[repeat].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[repeat].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[repeat].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[repeat].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[repeat].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[repeat].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[repeat].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[repeat].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[repeat].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[repeat].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[repeat].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_while ([while])
    my.entity = my.[while]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_while ? 0
       echo "<inherit_while location = \"$(my.location)\""
    endif

    for my.[while].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[while].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[while].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[while].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[while].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[while].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[while].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[while].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[while].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[while].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[while].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[while].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[while].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[while].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[while].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[while].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[while].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[while].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[while].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[while].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[while].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[while].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[while].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[while].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[while].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[while].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[while].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[while].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[while].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[while].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[while].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[while].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[while].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[while].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[while].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[while].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[while].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_if ([if])
    my.entity = my.[if]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_if ? 0
       echo "<inherit_if location = \"$(my.location)\""
    endif

    for my.[if].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[if].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[if].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[if].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[if].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[if].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[if].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[if].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[if].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[if].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[if].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[if].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[if].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[if].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[if].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[if].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[if].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[if].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[if].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[if].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[if].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[if].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[if].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[if].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[if].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[if].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[if].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[if].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[if].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[if].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[if].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[if].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[if].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[if].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[if].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[if].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[if].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_else ([else])
    my.entity = my.[else]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_else ? 0
       echo "<inherit_else location = \"$(my.location)\""
    endif

    for my.[else].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[else].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[else].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[else].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[else].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[else].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[else].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[else].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[else].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[else].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[else].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[else].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[else].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[else].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[else].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[else].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[else].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[else].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[else].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[else].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[else].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[else].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[else].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[else].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[else].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[else].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[else].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[else].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[else].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[else].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[else].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[else].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[else].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[else].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[else].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[else].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[else].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_elsif ([elsif])
    my.entity = my.[elsif]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_elsif ? 0
       echo "<inherit_elsif location = \"$(my.location)\""
    endif

    for my.[elsif].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[elsif].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[elsif].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[elsif].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[elsif].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[elsif].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[elsif].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[elsif].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[elsif].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[elsif].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[elsif].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[elsif].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[elsif].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[elsif].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[elsif].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[elsif].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[elsif].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[elsif].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[elsif].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[elsif].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[elsif].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[elsif].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[elsif].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[elsif].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[elsif].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[elsif].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[elsif].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[elsif].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[elsif].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[elsif].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[elsif].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[elsif].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[elsif].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[elsif].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[elsif].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[elsif].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[elsif].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_wait ([wait])
    my.entity = my.[wait]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_wait ? 0
       echo "<inherit_wait location = \"$(my.location)\""
    endif

endfunction

function inherit_sleep ([sleep])
    my.entity = my.[sleep]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_sleep ? 0
       echo "<inherit_sleep location = \"$(my.location)\""
    endif

endfunction

function inherit_break ([break])
    my.entity = my.[break]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_break ? 0
       echo "<inherit_break location = \"$(my.location)\""
    endif

endfunction

function inherit_abort ([abort])
    my.entity = my.[abort]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_abort ? 0
       echo "<inherit_abort location = \"$(my.location)\""
    endif

endfunction

function inherit_exit ([exit])
    my.entity = my.[exit]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exit ? 0
       echo "<inherit_exit location = \"$(my.location)\""
    endif

endfunction

function inherit_channel_flow ([channel_flow])
    my.entity = my.[channel_flow]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_channel_flow ? 0
       echo "<inherit_channel_flow location = \"$(my.location)\""
    endif

endfunction

function inherit_channel_flow_ok ([channel_flow_ok])
    my.entity = my.[channel_flow_ok]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_channel_flow_ok ? 0
       echo "<inherit_channel_flow_ok location = \"$(my.location)\""
    endif

endfunction

function inherit_exchange_declare ([exchange_declare])
    my.entity = my.[exchange_declare]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exchange_declare ? 0
       echo "<inherit_exchange_declare location = \"$(my.location)\""
    endif

endfunction

function inherit_exchange_delete ([exchange_delete])
    my.entity = my.[exchange_delete]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exchange_delete ? 0
       echo "<inherit_exchange_delete location = \"$(my.location)\""
    endif

endfunction

function inherit_queue_declare ([queue_declare])
    my.entity = my.[queue_declare]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_declare ? 0
       echo "<inherit_queue_declare location = \"$(my.location)\""
    endif

endfunction

function inherit_queue_bind ([queue_bind])
    my.entity = my.[queue_bind]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_bind ? 0
       echo "<inherit_queue_bind location = \"$(my.location)\""
    endif

    for my.[queue_bind].[arguments] as [queue_bind_arguments]
        inherit_queue_bind_arguments ([queue_bind_arguments])
    endfor

endfunction

function inherit_queue_bind_arguments ([queue_bind_arguments])
    my.entity = my.[queue_bind_arguments]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_bind_arguments ? 0
       echo "<inherit_queue_bind_arguments location = \"$(my.location)\""
    endif

    for my.[queue_bind_arguments].[field] as [table field]
        inherit_table_field ([table field])
    endfor

endfunction

function inherit_table_field ([table field])
    my.entity = my.[table field]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_table_field ? 0
       echo "<inherit_table_field location = \"$(my.location)\""
    endif

endfunction

function inherit_queue_purge ([queue_purge])
    my.entity = my.[queue_purge]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_purge ? 0
       echo "<inherit_queue_purge location = \"$(my.location)\""
    endif

endfunction

function inherit_queue_delete ([queue_delete])
    my.entity = my.[queue_delete]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_delete ? 0
       echo "<inherit_queue_delete location = \"$(my.location)\""
    endif

endfunction

function inherit_basic_consume ([basic_consume])
    my.entity = my.[basic_consume]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_consume ? 0
       echo "<inherit_basic_consume location = \"$(my.location)\""
    endif

endfunction

function inherit_basic_cancel ([basic_cancel])
    my.entity = my.[basic_cancel]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_cancel ? 0
       echo "<inherit_basic_cancel location = \"$(my.location)\""
    endif

endfunction

function inherit_basic_publish ([basic_publish])
    my.entity = my.[basic_publish]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_publish ? 0
       echo "<inherit_basic_publish location = \"$(my.location)\""
    endif

endfunction

function inherit_basic_get ([basic_get])
    my.entity = my.[basic_get]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_get ? 0
       echo "<inherit_basic_get location = \"$(my.location)\""
    endif

endfunction

function inherit_basic_content ([basic_content])
    my.entity = my.[basic_content]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_content ? 0
       echo "<inherit_basic_content location = \"$(my.location)\""
    endif

    for my.[basic_content].[headers] as [basic_content_headers]
        inherit_basic_content_headers ([basic_content_headers])
    endfor

endfunction

function inherit_basic_content_headers ([basic_content_headers])
    my.entity = my.[basic_content_headers]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_content_headers ? 0
       echo "<inherit_basic_content_headers location = \"$(my.location)\""
    endif

    for my.[basic_content_headers].[field] as [table field]
        inherit_table_field ([table field])
    endfor

endfunction

function inherit_basic_arrived ([basic_arrived])
    my.entity = my.[basic_arrived]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_arrived ? 0
       echo "<inherit_basic_arrived location = \"$(my.location)\""
    endif

    for my.[basic_arrived].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[basic_arrived].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[basic_arrived].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[basic_arrived].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[basic_arrived].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[basic_arrived].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[basic_arrived].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[basic_arrived].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[basic_arrived].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[basic_arrived].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[basic_arrived].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[basic_arrived].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[basic_arrived].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[basic_arrived].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[basic_arrived].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[basic_arrived].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[basic_arrived].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[basic_arrived].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[basic_arrived].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[basic_arrived].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[basic_arrived].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[basic_arrived].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[basic_arrived].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[basic_arrived].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[basic_arrived].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[basic_arrived].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[basic_arrived].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[basic_arrived].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[basic_arrived].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[basic_arrived].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[basic_arrived].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[basic_arrived].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[basic_arrived].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[basic_arrived].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[basic_arrived].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[basic_arrived].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[basic_arrived].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_basic_returned ([basic_returned])
    my.entity = my.[basic_returned]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_returned ? 0
       echo "<inherit_basic_returned location = \"$(my.location)\""
    endif

    for my.[basic_returned].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[basic_returned].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[basic_returned].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[basic_returned].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[basic_returned].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[basic_returned].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[basic_returned].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[basic_returned].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[basic_returned].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[basic_returned].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[basic_returned].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[basic_returned].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[basic_returned].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[basic_returned].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[basic_returned].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[basic_returned].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[basic_returned].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[basic_returned].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[basic_returned].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[basic_returned].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[basic_returned].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[basic_returned].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[basic_returned].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[basic_returned].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[basic_returned].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[basic_returned].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[basic_returned].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[basic_returned].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[basic_returned].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[basic_returned].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[basic_returned].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[basic_returned].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[basic_returned].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[basic_returned].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[basic_returned].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[basic_returned].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[basic_returned].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_empty ([empty])
    my.entity = my.[empty]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_empty ? 0
       echo "<inherit_empty location = \"$(my.location)\""
    endif

    for my.[empty].[session] as [session]
        inherit_session ([session])
    endfor

    for my.[empty].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[empty].[server] as [server]
        inherit_server ([server])
    endfor

    for my.[empty].[timer] as [timer]
        inherit_timer ([timer])
    endfor

    for my.[empty].[set] as [set]
        inherit_set ([set])
    endfor

    for my.[empty].[inc] as [inc]
        inherit_inc ([inc])
    endfor

    for my.[empty].[dec] as [dec]
        inherit_dec ([dec])
    endfor

    for my.[empty].[read] as [read]
        inherit_read ([read])
    endfor

    for my.[empty].[random] as [random]
        inherit_random ([random])
    endfor

    for my.[empty].[echo] as [echo]
        inherit_echo ([echo])
    endfor

    for my.[empty].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[empty].[repeat] as [repeat]
        inherit_repeat ([repeat])
    endfor

    for my.[empty].[while] as [while]
        inherit_while ([while])
    endfor

    for my.[empty].[break] as [break]
        inherit_break ([break])
    endfor

    for my.[empty].[if] as [if]
        inherit_if ([if])
    endfor

    for my.[empty].[else] as [else]
        inherit_else ([else])
    endfor

    for my.[empty].[elsif] as [elsif]
        inherit_elsif ([elsif])
    endfor

    for my.[empty].[wait] as [wait]
        inherit_wait ([wait])
    endfor

    for my.[empty].[sleep] as [sleep]
        inherit_sleep ([sleep])
    endfor

    for my.[empty].[abort] as [abort]
        inherit_abort ([abort])
    endfor

    for my.[empty].[exit] as [exit]
        inherit_exit ([exit])
    endfor

    for my.[empty].[channel_flow] as [channel_flow]
        inherit_channel_flow ([channel_flow])
    endfor

    for my.[empty].[channel_flow_ok] as [channel_flow_ok]
        inherit_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[empty].[exchange_declare] as [exchange_declare]
        inherit_exchange_declare ([exchange_declare])
    endfor

    for my.[empty].[exchange_delete] as [exchange_delete]
        inherit_exchange_delete ([exchange_delete])
    endfor

    for my.[empty].[queue_declare] as [queue_declare]
        inherit_queue_declare ([queue_declare])
    endfor

    for my.[empty].[queue_bind] as [queue_bind]
        inherit_queue_bind ([queue_bind])
    endfor

    for my.[empty].[queue_purge] as [queue_purge]
        inherit_queue_purge ([queue_purge])
    endfor

    for my.[empty].[queue_delete] as [queue_delete]
        inherit_queue_delete ([queue_delete])
    endfor

    for my.[empty].[basic_consume] as [basic_consume]
        inherit_basic_consume ([basic_consume])
    endfor

    for my.[empty].[basic_cancel] as [basic_cancel]
        inherit_basic_cancel ([basic_cancel])
    endfor

    for my.[empty].[basic_publish] as [basic_publish]
        inherit_basic_publish ([basic_publish])
    endfor

    for my.[empty].[basic_get] as [basic_get]
        inherit_basic_get ([basic_get])
    endfor

    for my.[empty].[basic_content] as [basic_content]
        inherit_basic_content ([basic_content])
    endfor

    for my.[empty].[basic_arrived] as [basic_arrived]
        inherit_basic_arrived ([basic_arrived])
    endfor

    for my.[empty].[basic_returned] as [basic_returned]
        inherit_basic_returned ([basic_returned])
    endfor

    for my.[empty].[empty] as [empty]
        inherit_empty ([empty])
    endfor

endfunction

function inherit_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    for my.[inherit].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_option ([option])
    my.entity = my.[option]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<inherit_option location = \"$(my.location)\""
    endif

endfunction


function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

function inherit_top ([pal])
    my.entity = my.[pal]
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_pal ? 0
       echo "<inherit_top location = \"$(my.location)\""
    endif

    for my.[pal].inherit
        if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
            if switches.trace ? 0 | switches.trace_pal ? 0
                echo "Loading $(name)"
            endif
            my.inherit_file = xml.load_file (name + ".pal") ? abort_xml_error ()
            my.inherit_file._filename ?= name
            if my.inherit_file.multiple ? 0 > 0 | !defined (global.top.have_inherit_$(inherit.name))
                for inherit.option
                    copy option to my.inherit_file
                endfor
                scope my.inherit_file as pal
                    preproc_pal (my.inherit_file)
                    inherit_top (my.inherit_file)
                endscope
                global.top.have_inherit_$(inherit.name) = 1
            
                move my.inherit_file to global.inherit
            endif
        endif
    endfor
endfunction

function sort_top_inherits ()
    my.location = location ("pal")

    my.sorted = xml.new ("sorted")
    for global.inherit.pal
        my.[before] =
        my.[after]  =
        if switches.trace ? 0 | switches.trace_pal ? 0
            echo "Inserting $(pal._key)"
        endif
        for my.sorted.pal as sorted

            if ((sorted.role    = class.[before]) ? 0)   | ((sorted.[after] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_pal ? 0
                    echo "    before: $(sorted.name)"
                endif
                my.[before] ?= sorted
            endif
            if ((sorted.role    = class.[after]) ? 0)   | ((sorted.[before] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_pal ? 0
                    echo "    after: $(sorted.name)"
                endif
                if defined (my.[before])
                    preproc_error ("Incoherent inherit order$(my.location)")
                    last
                endif
                my.[after] = sorted
            endif
        endfor
            
        if defined (my.[before])
            move pal before my.[before]
        elsif defined (my.[after])
            move pal after my.[after]
        else
            my.any = my.sorted->?
            if defined (my.any)
                move pal before my.any
            else
                move pal to my.sorted
            endif
        endif
    endfor
    
    for my.sorted.pal
        if switches.trace ? 0 | switches.trace_pal ? 0
            echo "Inheriting $(pal.name)"
        endif
        perform_inherit_pal_item (global.top, pal)
    endfor

endfunction

function perform_inherit_pal (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_pal ? 0
       my.location = location ("pal")
       echo "<inherit_pal location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[pal] ?
    for my.source.[pal] as [pal]
        if [pal].export ? "default" <> "none"
        my.existing = my.target->[pal] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_pal_item (my.existing, [pal])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert) & [pal].export ? "default" <> "after"
                    copy [pal] before my.insert
                else
                    copy [pal] to my.target
                endif
            else
                if defined (my.insert) & [pal].export ? "default" = "before"
                    copy [pal] before my.insert
                else
                    copy [pal] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_pal

function perform_inherit_doc (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_doc ? 0
       my.location = location ("pal")
       echo "<inherit_doc location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[doc] ?
    for my.source.[doc] as [doc]
        if my.inherit = "overlay"
            my.existing = my.target->[doc] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_doc_item (my.existing, [doc])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [doc] before my.insert
                else
                    copy [doc] to my.target
                endif
            else
                copy [doc] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_doc

function perform_inherit_include (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("pal")
       echo "<inherit_include location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[include] ?
    for my.source.[include] as [include]
        if my.inherit = "overlay"
            my.existing = my.target->[include] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_include_item (my.existing, [include])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [include] before my.insert
                else
                    copy [include] to my.target
                endif
            else
                copy [include] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_include

function perform_inherit_macro (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_macro ? 0
       my.location = location ("pal")
       echo "<inherit_macro location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[macro] ?
    for my.source.[macro] as [macro]
        my.existing = my.target->[macro] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_macro_item (my.existing, [macro])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [macro] before my.insert
                else
                    copy [macro] to my.target
                endif
            else
                copy [macro] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_macro

function perform_inherit_scripting (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_scripting ? 0
       my.location = location ("pal")
       echo "<inherit_scripting location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[scripting] ?
    for my.source.[scripting] as [scripting]
        if my.inherit = "overlay"
            my.existing = my.target->[scripting] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_scripting_item (my.existing, [scripting])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [scripting] before my.insert
                else
                    copy [scripting] to my.target
                endif
            else
                copy [scripting] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_scripting

function perform_inherit_session (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_session ? 0
       my.location = location ("pal")
       echo "<inherit_session location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[session] ?
    for my.source.[session] as [session]
        if my.inherit = "overlay"
            my.existing = my.target->[session] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_session_item (my.existing, [session])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [session] before my.insert
                else
                    copy [session] to my.target
                endif
            else
                copy [session] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_session

function perform_inherit_invoke (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_invoke ? 0
       my.location = location ("pal")
       echo "<inherit_invoke location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[invoke] ?
    for my.source.[invoke] as [invoke]
        if my.inherit = "overlay"
            my.existing = my.target->[invoke] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_invoke_item (my.existing, [invoke])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [invoke] before my.insert
                else
                    copy [invoke] to my.target
                endif
            else
                copy [invoke] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_invoke

function perform_inherit_server (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_server ? 0
       my.location = location ("pal")
       echo "<inherit_server location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[server] ?
    for my.source.[server] as [server]
        my.existing = my.target->[server] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_server_item (my.existing, [server])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [server] before my.insert
                else
                    copy [server] to my.target
                endif
            else
                copy [server] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_server

function perform_inherit_timer (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_timer ? 0
       my.location = location ("pal")
       echo "<inherit_timer location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[timer] ?
    for my.source.[timer] as [timer]
        if my.inherit = "overlay"
            my.existing = my.target->[timer] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_timer_item (my.existing, [timer])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [timer] before my.insert
                else
                    copy [timer] to my.target
                endif
            else
                copy [timer] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_timer

function perform_inherit_set (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_set ? 0
       my.location = location ("pal")
       echo "<inherit_set location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[set] ?
    for my.source.[set] as [set]
        my.existing = my.target->[set] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_set_item (my.existing, [set])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [set] before my.insert
                else
                    copy [set] to my.target
                endif
            else
                copy [set] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_set

function perform_inherit_inc (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inc ? 0
       my.location = location ("pal")
       echo "<inherit_inc location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inc] ?
    for my.source.[inc] as [inc]
        my.existing = my.target->[inc] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inc_item (my.existing, [inc])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inc] before my.insert
                else
                    copy [inc] to my.target
                endif
            else
                copy [inc] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inc

function perform_inherit_dec (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_dec ? 0
       my.location = location ("pal")
       echo "<inherit_dec location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[dec] ?
    for my.source.[dec] as [dec]
        my.existing = my.target->[dec] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_dec_item (my.existing, [dec])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [dec] before my.insert
                else
                    copy [dec] to my.target
                endif
            else
                copy [dec] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_dec

function perform_inherit_read (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_read ? 0
       my.location = location ("pal")
       echo "<inherit_read location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[read] ?
    for my.source.[read] as [read]
        my.existing = my.target->[read] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_read_item (my.existing, [read])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [read] before my.insert
                else
                    copy [read] to my.target
                endif
            else
                copy [read] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_read

function perform_inherit_random (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_random ? 0
       my.location = location ("pal")
       echo "<inherit_random location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[random] ?
    for my.source.[random] as [random]
        my.existing = my.target->[random] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_random_item (my.existing, [random])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [random] before my.insert
                else
                    copy [random] to my.target
                endif
            else
                copy [random] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_random

function perform_inherit_echo (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_echo ? 0
       my.location = location ("pal")
       echo "<inherit_echo location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[echo] ?
    for my.source.[echo] as [echo]
        if my.inherit = "overlay"
            my.existing = my.target->[echo] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_echo_item (my.existing, [echo])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [echo] before my.insert
                else
                    copy [echo] to my.target
                endif
            else
                copy [echo] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_echo

function perform_inherit_assert (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("pal")
       echo "<inherit_assert location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[assert] ?
    for my.source.[assert] as [assert]
        if my.inherit = "overlay"
            my.existing = my.target->[assert] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_assert_item (my.existing, [assert])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [assert] before my.insert
                else
                    copy [assert] to my.target
                endif
            else
                copy [assert] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_assert

function perform_inherit_repeat (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_repeat ? 0
       my.location = location ("pal")
       echo "<inherit_repeat location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[repeat] ?
    for my.source.[repeat] as [repeat]
        if my.inherit = "overlay"
            my.existing = my.target->[repeat] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_repeat_item (my.existing, [repeat])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [repeat] before my.insert
                else
                    copy [repeat] to my.target
                endif
            else
                copy [repeat] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_repeat

function perform_inherit_while (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_while ? 0
       my.location = location ("pal")
       echo "<inherit_while location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[while] ?
    for my.source.[while] as [while]
        if my.inherit = "overlay"
            my.existing = my.target->[while] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_while_item (my.existing, [while])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [while] before my.insert
                else
                    copy [while] to my.target
                endif
            else
                copy [while] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_while

function perform_inherit_if (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_if ? 0
       my.location = location ("pal")
       echo "<inherit_if location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[if] ?
    for my.source.[if] as [if]
        if my.inherit = "overlay"
            my.existing = my.target->[if] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_if_item (my.existing, [if])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [if] before my.insert
                else
                    copy [if] to my.target
                endif
            else
                copy [if] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_if

function perform_inherit_else (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_else ? 0
       my.location = location ("pal")
       echo "<inherit_else location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[else] ?
    for my.source.[else] as [else]
        if my.inherit = "overlay"
            my.existing = my.target->[else] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_else_item (my.existing, [else])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [else] before my.insert
                else
                    copy [else] to my.target
                endif
            else
                copy [else] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_else

function perform_inherit_elsif (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_elsif ? 0
       my.location = location ("pal")
       echo "<inherit_elsif location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[elsif] ?
    for my.source.[elsif] as [elsif]
        if my.inherit = "overlay"
            my.existing = my.target->[elsif] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_elsif_item (my.existing, [elsif])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [elsif] before my.insert
                else
                    copy [elsif] to my.target
                endif
            else
                copy [elsif] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_elsif

function perform_inherit_wait (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_wait ? 0
       my.location = location ("pal")
       echo "<inherit_wait location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[wait] ?
    for my.source.[wait] as [wait]
        if my.inherit = "overlay"
            my.existing = my.target->[wait] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_wait_item (my.existing, [wait])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [wait] before my.insert
                else
                    copy [wait] to my.target
                endif
            else
                copy [wait] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_wait

function perform_inherit_sleep (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_sleep ? 0
       my.location = location ("pal")
       echo "<inherit_sleep location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[sleep] ?
    for my.source.[sleep] as [sleep]
        if my.inherit = "overlay"
            my.existing = my.target->[sleep] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_sleep_item (my.existing, [sleep])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [sleep] before my.insert
                else
                    copy [sleep] to my.target
                endif
            else
                copy [sleep] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_sleep

function perform_inherit_break (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_break ? 0
       my.location = location ("pal")
       echo "<inherit_break location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[break] ?
    for my.source.[break] as [break]
        if my.inherit = "overlay"
            my.existing = my.target->[break] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_break_item (my.existing, [break])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [break] before my.insert
                else
                    copy [break] to my.target
                endif
            else
                copy [break] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_break

function perform_inherit_abort (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_abort ? 0
       my.location = location ("pal")
       echo "<inherit_abort location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[abort] ?
    for my.source.[abort] as [abort]
        if my.inherit = "overlay"
            my.existing = my.target->[abort] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_abort_item (my.existing, [abort])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [abort] before my.insert
                else
                    copy [abort] to my.target
                endif
            else
                copy [abort] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_abort

function perform_inherit_exit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_exit ? 0
       my.location = location ("pal")
       echo "<inherit_exit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[exit] ?
    for my.source.[exit] as [exit]
        if my.inherit = "overlay"
            my.existing = my.target->[exit] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_exit_item (my.existing, [exit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [exit] before my.insert
                else
                    copy [exit] to my.target
                endif
            else
                copy [exit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_exit

function perform_inherit_channel_flow (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_channel_flow ? 0
       my.location = location ("pal")
       echo "<inherit_channel_flow location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[channel_flow] ?
    for my.source.[channel_flow] as [channel_flow]
        if my.inherit = "overlay"
            my.existing = my.target->[channel_flow] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_channel_flow_item (my.existing, [channel_flow])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [channel_flow] before my.insert
                else
                    copy [channel_flow] to my.target
                endif
            else
                copy [channel_flow] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_channel_flow

function perform_inherit_channel_flow_ok (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_channel_flow_ok ? 0
       my.location = location ("pal")
       echo "<inherit_channel_flow_ok location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[channel_flow_ok] ?
    for my.source.[channel_flow_ok] as [channel_flow_ok]
        if my.inherit = "overlay"
            my.existing = my.target->[channel_flow_ok] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_channel_flow_ok_item (my.existing, [channel_flow_ok])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [channel_flow_ok] before my.insert
                else
                    copy [channel_flow_ok] to my.target
                endif
            else
                copy [channel_flow_ok] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_channel_flow_ok

function perform_inherit_exchange_declare (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_exchange_declare ? 0
       my.location = location ("pal")
       echo "<inherit_exchange_declare location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[exchange_declare] ?
    for my.source.[exchange_declare] as [exchange_declare]
        if my.inherit = "overlay"
            my.existing = my.target->[exchange_declare] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_exchange_declare_item (my.existing, [exchange_declare])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [exchange_declare] before my.insert
                else
                    copy [exchange_declare] to my.target
                endif
            else
                copy [exchange_declare] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_exchange_declare

function perform_inherit_exchange_delete (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_exchange_delete ? 0
       my.location = location ("pal")
       echo "<inherit_exchange_delete location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[exchange_delete] ?
    for my.source.[exchange_delete] as [exchange_delete]
        if my.inherit = "overlay"
            my.existing = my.target->[exchange_delete] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_exchange_delete_item (my.existing, [exchange_delete])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [exchange_delete] before my.insert
                else
                    copy [exchange_delete] to my.target
                endif
            else
                copy [exchange_delete] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_exchange_delete

function perform_inherit_queue_declare (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_queue_declare ? 0
       my.location = location ("pal")
       echo "<inherit_queue_declare location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[queue_declare] ?
    for my.source.[queue_declare] as [queue_declare]
        if my.inherit = "overlay"
            my.existing = my.target->[queue_declare] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_queue_declare_item (my.existing, [queue_declare])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [queue_declare] before my.insert
                else
                    copy [queue_declare] to my.target
                endif
            else
                copy [queue_declare] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_queue_declare

function perform_inherit_queue_bind (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_queue_bind ? 0
       my.location = location ("pal")
       echo "<inherit_queue_bind location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[queue_bind] ?
    for my.source.[queue_bind] as [queue_bind]
        if my.inherit = "overlay"
            my.existing = my.target->[queue_bind] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_queue_bind_item (my.existing, [queue_bind])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [queue_bind] before my.insert
                else
                    copy [queue_bind] to my.target
                endif
            else
                copy [queue_bind] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_queue_bind

function perform_inherit_queue_bind_arguments (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_queue_bind_arguments ? 0
       my.location = location ("pal")
       echo "<inherit_queue_bind_arguments location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[arguments] ?
    for my.source.[arguments] as [queue_bind_arguments]
        if my.inherit = "overlay"
            my.existing = my.target->[arguments] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_queue_bind_arguments_item (my.existing, [queue_bind_arguments])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [queue_bind_arguments] before my.insert
                else
                    copy [queue_bind_arguments] to my.target
                endif
            else
                copy [queue_bind_arguments] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_queue_bind_arguments

function perform_inherit_table_field (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_table_field ? 0
       my.location = location ("pal")
       echo "<inherit_table_field location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[field] ?
    for my.source.[field] as [table field]
        my.existing = my.target->[field] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_table_field_item (my.existing, [table field])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [table field] before my.insert
                else
                    copy [table field] to my.target
                endif
            else
                copy [table field] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_table_field

function perform_inherit_queue_purge (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_queue_purge ? 0
       my.location = location ("pal")
       echo "<inherit_queue_purge location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[queue_purge] ?
    for my.source.[queue_purge] as [queue_purge]
        if my.inherit = "overlay"
            my.existing = my.target->[queue_purge] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_queue_purge_item (my.existing, [queue_purge])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [queue_purge] before my.insert
                else
                    copy [queue_purge] to my.target
                endif
            else
                copy [queue_purge] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_queue_purge

function perform_inherit_queue_delete (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_queue_delete ? 0
       my.location = location ("pal")
       echo "<inherit_queue_delete location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[queue_delete] ?
    for my.source.[queue_delete] as [queue_delete]
        if my.inherit = "overlay"
            my.existing = my.target->[queue_delete] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_queue_delete_item (my.existing, [queue_delete])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [queue_delete] before my.insert
                else
                    copy [queue_delete] to my.target
                endif
            else
                copy [queue_delete] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_queue_delete

function perform_inherit_basic_consume (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_consume ? 0
       my.location = location ("pal")
       echo "<inherit_basic_consume location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_consume] ?
    for my.source.[basic_consume] as [basic_consume]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_consume] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_consume_item (my.existing, [basic_consume])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_consume] before my.insert
                else
                    copy [basic_consume] to my.target
                endif
            else
                copy [basic_consume] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_consume

function perform_inherit_basic_cancel (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_cancel ? 0
       my.location = location ("pal")
       echo "<inherit_basic_cancel location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_cancel] ?
    for my.source.[basic_cancel] as [basic_cancel]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_cancel] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_cancel_item (my.existing, [basic_cancel])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_cancel] before my.insert
                else
                    copy [basic_cancel] to my.target
                endif
            else
                copy [basic_cancel] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_cancel

function perform_inherit_basic_publish (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_publish ? 0
       my.location = location ("pal")
       echo "<inherit_basic_publish location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_publish] ?
    for my.source.[basic_publish] as [basic_publish]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_publish] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_publish_item (my.existing, [basic_publish])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_publish] before my.insert
                else
                    copy [basic_publish] to my.target
                endif
            else
                copy [basic_publish] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_publish

function perform_inherit_basic_get (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_get ? 0
       my.location = location ("pal")
       echo "<inherit_basic_get location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_get] ?
    for my.source.[basic_get] as [basic_get]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_get] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_get_item (my.existing, [basic_get])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_get] before my.insert
                else
                    copy [basic_get] to my.target
                endif
            else
                copy [basic_get] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_get

function perform_inherit_basic_content (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_content ? 0
       my.location = location ("pal")
       echo "<inherit_basic_content location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_content] ?
    for my.source.[basic_content] as [basic_content]
        my.existing = my.target->[basic_content] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_content_item (my.existing, [basic_content])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_content] before my.insert
                else
                    copy [basic_content] to my.target
                endif
            else
                copy [basic_content] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_content

function perform_inherit_basic_content_headers (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_content_headers ? 0
       my.location = location ("pal")
       echo "<inherit_basic_content_headers location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[headers] ?
    for my.source.[headers] as [basic_content_headers]
        if my.inherit = "overlay"
            my.existing = my.target->[headers] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_content_headers_item (my.existing, [basic_content_headers])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_content_headers] before my.insert
                else
                    copy [basic_content_headers] to my.target
                endif
            else
                copy [basic_content_headers] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_content_headers

function perform_inherit_basic_arrived (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_arrived ? 0
       my.location = location ("pal")
       echo "<inherit_basic_arrived location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_arrived] ?
    for my.source.[basic_arrived] as [basic_arrived]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_arrived] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_arrived_item (my.existing, [basic_arrived])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_arrived] before my.insert
                else
                    copy [basic_arrived] to my.target
                endif
            else
                copy [basic_arrived] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_arrived

function perform_inherit_basic_returned (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_basic_returned ? 0
       my.location = location ("pal")
       echo "<inherit_basic_returned location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[basic_returned] ?
    for my.source.[basic_returned] as [basic_returned]
        if my.inherit = "overlay"
            my.existing = my.target->[basic_returned] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_basic_returned_item (my.existing, [basic_returned])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [basic_returned] before my.insert
                else
                    copy [basic_returned] to my.target
                endif
            else
                copy [basic_returned] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_basic_returned

function perform_inherit_empty (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_empty ? 0
       my.location = location ("pal")
       echo "<inherit_empty location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[empty] ?
    for my.source.[empty] as [empty]
        if my.inherit = "overlay"
            my.existing = my.target->[empty] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_empty_item (my.existing, [empty])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [empty] before my.insert
                else
                    copy [empty] to my.target
                endif
            else
                copy [empty] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_empty

function perform_inherit_inherit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("pal")
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inherit] ?
    for my.source.[inherit] as [inherit]
        my.existing = my.target->[inherit] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inherit_item (my.existing, [inherit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inherit] before my.insert
                else
                    copy [inherit] to my.target
                endif
            else
                copy [inherit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inherit

function perform_inherit_option (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("pal")
       echo "<inherit_option location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[option] ?
    for my.source.[option] as [option]
        my.existing = my.target->[option] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_option_item (my.existing, [option])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [option] before my.insert
                else
                    copy [option] to my.target
                endif
            else
                copy [option] to my.target
            endif
        endif
            #   Export option to parent and all children
    if !defined (my.target.$(name))
        define_throughout (my.target, option)
    endif
    endfor
endfunction perform_inherit_option

function perform_inherit_pal_item (target, source)
    if switches.trace ? 0 | switches.trace_pal ? 0
       my.location = location ("pal")
       echo "<inherit_pal_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        my.target.[before] ?= my.source.[before] ?
        my.target.[after] ?= my.source.[after] ?
        my.target.[copyright] ?= my.source.[copyright] ?
        my.target.[license] ?= my.source.[license] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[comment] ?= my.source.[comment] ?
        my.target.[target] ?= my.source.[target] ?
        my.target.[export] ?= my.source.[export] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_doc (my.target, my.source, , )
        perform_inherit_macro (my.target, my.source, , )
        perform_inherit_include (my.target, my.source, , )
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_doc_item (target, source)
    if switches.trace ? 0 | switches.trace_doc ? 0
       my.location = location ("pal")
       echo "<inherit_doc_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_include_item (target, source)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("pal")
       echo "<inherit_include_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[filename] ?= my.source.[filename] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_macro_item (target, source)
    if switches.trace ? 0 | switches.trace_macro ? 0
       my.location = location ("pal")
       echo "<inherit_macro_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_scripting_item (target, source)
    if switches.trace ? 0 | switches.trace_scripting ? 0
       my.location = location ("pal")
       echo "<inherit_scripting_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_session_item (target, source)
    if switches.trace ? 0 | switches.trace_session ? 0
       my.location = location ("pal")
       echo "<inherit_session_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[virtual_host] ?= my.source.[virtual_host] ?
        my.target.[server] ?= my.source.[server] ?
        my.target.[timeout] ?= my.source.[timeout] ?
        my.target.[failover] ?= my.source.[failover] ?
        my.target.[direct] ?= my.source.[direct] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_invoke_item (target, source)
    if switches.trace ? 0 | switches.trace_invoke ? 0
       my.location = location ("pal")
       echo "<inherit_invoke_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[macro] ?= my.source.[macro] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_server_item (target, source)
    if switches.trace ? 0 | switches.trace_server ? 0
       my.location = location ("pal")
       echo "<inherit_server_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[port] ?= my.source.[port] ?
        my.target.[stdout] ?= my.source.[stdout] ?
        my.target.[stderr] ?= my.source.[stderr] ?
        my.target.[where] ?= my.source.[where] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_timer_item (target, source)
    if switches.trace ? 0 | switches.trace_timer ? 0
       my.location = location ("pal")
       echo "<inherit_timer_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[action] ?= my.source.[action] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_set_item (target, source)
    if switches.trace ? 0 | switches.trace_set ? 0
       my.location = location ("pal")
       echo "<inherit_set_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[type] ?= my.source.[type] ?
        my.target.[cmdline] ?= my.source.[cmdline] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inc_item (target, source)
    if switches.trace ? 0 | switches.trace_inc ? 0
       my.location = location ("pal")
       echo "<inherit_inc_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_dec_item (target, source)
    if switches.trace ? 0 | switches.trace_dec ? 0
       my.location = location ("pal")
       echo "<inherit_dec_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_read_item (target, source)
    if switches.trace ? 0 | switches.trace_read ? 0
       my.location = location ("pal")
       echo "<inherit_read_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[prompt] ?= my.source.[prompt] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_random_item (target, source)
    if switches.trace ? 0 | switches.trace_random ? 0
       my.location = location ("pal")
       echo "<inherit_random_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[min] ?= my.source.[min] ?
        my.target.[max] ?= my.source.[max] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_echo_item (target, source)
    if switches.trace ? 0 | switches.trace_echo ? 0
       my.location = location ("pal")
       echo "<inherit_echo_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[trace] ?= my.source.[trace] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_assert_item (target, source)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("pal")
       echo "<inherit_assert_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[test] ?= my.source.[test] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_repeat_item (target, source)
    if switches.trace ? 0 | switches.trace_repeat ? 0
       my.location = location ("pal")
       echo "<inherit_repeat_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[counter] ?= my.source.[counter] ?
        my.target.[times] ?= my.source.[times] ?
        my.target.[progress] ?= my.source.[progress] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_while_item (target, source)
    if switches.trace ? 0 | switches.trace_while ? 0
       my.location = location ("pal")
       echo "<inherit_while_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[test] ?= my.source.[test] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[counter] ?= my.source.[counter] ?
        my.target.[progress] ?= my.source.[progress] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_if_item (target, source)
    if switches.trace ? 0 | switches.trace_if ? 0
       my.location = location ("pal")
       echo "<inherit_if_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[test] ?= my.source.[test] ?
        my.target.[value] ?= my.source.[value] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_else_item (target, source)
    if switches.trace ? 0 | switches.trace_else ? 0
       my.location = location ("pal")
       echo "<inherit_else_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_elsif_item (target, source)
    if switches.trace ? 0 | switches.trace_elsif ? 0
       my.location = location ("pal")
       echo "<inherit_elsif_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[test] ?= my.source.[test] ?
        my.target.[value] ?= my.source.[value] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_wait_item (target, source)
    if switches.trace ? 0 | switches.trace_wait ? 0
       my.location = location ("pal")
       echo "<inherit_wait_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[timeout] ?= my.source.[timeout] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_sleep_item (target, source)
    if switches.trace ? 0 | switches.trace_sleep ? 0
       my.location = location ("pal")
       echo "<inherit_sleep_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[timeout] ?= my.source.[timeout] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_break_item (target, source)
    if switches.trace ? 0 | switches.trace_break ? 0
       my.location = location ("pal")
       echo "<inherit_break_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_abort_item (target, source)
    if switches.trace ? 0 | switches.trace_abort ? 0
       my.location = location ("pal")
       echo "<inherit_abort_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_exit_item (target, source)
    if switches.trace ? 0 | switches.trace_exit ? 0
       my.location = location ("pal")
       echo "<inherit_exit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[status] ?= my.source.[status] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_channel_flow_item (target, source)
    if switches.trace ? 0 | switches.trace_channel_flow ? 0
       my.location = location ("pal")
       echo "<inherit_channel_flow_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[active] ?= my.source.[active] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_channel_flow_ok_item (target, source)
    if switches.trace ? 0 | switches.trace_channel_flow_ok ? 0
       my.location = location ("pal")
       echo "<inherit_channel_flow_ok_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[active] ?= my.source.[active] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_exchange_declare_item (target, source)
    if switches.trace ? 0 | switches.trace_exchange_declare ? 0
       my.location = location ("pal")
       echo "<inherit_exchange_declare_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[exchange] ?= my.source.[exchange] ?
        my.target.[type] ?= my.source.[type] ?
        my.target.[passive] ?= my.source.[passive] ?
        my.target.[durable] ?= my.source.[durable] ?
        my.target.[auto_delete] ?= my.source.[auto_delete] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_exchange_delete_item (target, source)
    if switches.trace ? 0 | switches.trace_exchange_delete ? 0
       my.location = location ("pal")
       echo "<inherit_exchange_delete_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[exchange] ?= my.source.[exchange] ?
        my.target.[if_unused] ?= my.source.[if_unused] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_queue_declare_item (target, source)
    if switches.trace ? 0 | switches.trace_queue_declare ? 0
       my.location = location ("pal")
       echo "<inherit_queue_declare_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        my.target.[passive] ?= my.source.[passive] ?
        my.target.[durable] ?= my.source.[durable] ?
        my.target.[exclusive] ?= my.source.[exclusive] ?
        my.target.[auto_delete] ?= my.source.[auto_delete] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_queue_bind_item (target, source)
    if switches.trace ? 0 | switches.trace_queue_bind ? 0
       my.location = location ("pal")
       echo "<inherit_queue_bind_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        my.target.[exchange] ?= my.source.[exchange] ?
        perform_inherit_queue_bind_arguments (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_queue_bind_arguments_item (target, source)
    if switches.trace ? 0 | switches.trace_queue_bind_arguments ? 0
       my.location = location ("pal")
       echo "<inherit_queue_bind_arguments_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        perform_inherit_table_field (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_table_field_item (target, source)
    if switches.trace ? 0 | switches.trace_table_field ? 0
       my.location = location ("pal")
       echo "<inherit_table_field_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[type] ?= my.source.[type] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_queue_purge_item (target, source)
    if switches.trace ? 0 | switches.trace_queue_purge ? 0
       my.location = location ("pal")
       echo "<inherit_queue_purge_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_queue_delete_item (target, source)
    if switches.trace ? 0 | switches.trace_queue_delete ? 0
       my.location = location ("pal")
       echo "<inherit_queue_delete_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        my.target.[if_unused] ?= my.source.[if_unused] ?
        my.target.[if_empty] ?= my.source.[if_empty] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_consume_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_consume ? 0
       my.location = location ("pal")
       echo "<inherit_basic_consume_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_cancel_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_cancel ? 0
       my.location = location ("pal")
       echo "<inherit_basic_cancel_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[consumer_tag] ?= my.source.[consumer_tag] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_publish_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_publish ? 0
       my.location = location ("pal")
       echo "<inherit_basic_publish_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[content] ?= my.source.[content] ?
        my.target.[exchange] ?= my.source.[exchange] ?
        my.target.[routing_key] ?= my.source.[routing_key] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_get_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_get ? 0
       my.location = location ("pal")
       echo "<inherit_basic_get_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[queue] ?= my.source.[queue] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_content_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_content ? 0
       my.location = location ("pal")
       echo "<inherit_basic_content_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[size] ?= my.source.[size] ?
        my.target.[fill] ?= my.source.[fill] ?
        my.target.[exec] ?= my.source.[exec] ?
        my.target.[headers] ?= my.source.[headers] ?
        my.target.[read] ?= my.source.[read] ?
        my.target.[content_type] ?= my.source.[content_type] ?
        my.target.[content_encoding] ?= my.source.[content_encoding] ?
        my.target.[reply_to] ?= my.source.[reply_to] ?
        my.target.[message_id] ?= my.source.[message_id] ?
        my.target.[correlation_id] ?= my.source.[correlation_id] ?
        perform_inherit_basic_content_headers (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_content_headers_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_content_headers ? 0
       my.location = location ("pal")
       echo "<inherit_basic_content_headers_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        perform_inherit_table_field (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_arrived_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_arrived ? 0
       my.location = location ("pal")
       echo "<inherit_basic_arrived_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[counter] ?= my.source.[counter] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_basic_returned_item (target, source)
    if switches.trace ? 0 | switches.trace_basic_returned ? 0
       my.location = location ("pal")
       echo "<inherit_basic_returned_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[counter] ?= my.source.[counter] ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_empty_item (target, source)
    if switches.trace ? 0 | switches.trace_empty ? 0
       my.location = location ("pal")
       echo "<inherit_empty_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        perform_inherit_session (my.target, my.source, "none", )
        perform_inherit_invoke (my.target, my.source, "none", )
        perform_inherit_server (my.target, my.source, "none", )
        perform_inherit_timer (my.target, my.source, "none", )
        perform_inherit_set (my.target, my.source, "none", )
        perform_inherit_inc (my.target, my.source, "none", )
        perform_inherit_dec (my.target, my.source, "none", )
        perform_inherit_read (my.target, my.source, "none", )
        perform_inherit_random (my.target, my.source, "none", )
        perform_inherit_echo (my.target, my.source, "none", )
        perform_inherit_assert (my.target, my.source, "none", )
        perform_inherit_repeat (my.target, my.source, "none", )
        perform_inherit_while (my.target, my.source, "none", )
        perform_inherit_break (my.target, my.source, "none", )
        perform_inherit_if (my.target, my.source, "none", )
        perform_inherit_else (my.target, my.source, "none", )
        perform_inherit_elsif (my.target, my.source, "none", )
        perform_inherit_wait (my.target, my.source, "none", )
        perform_inherit_sleep (my.target, my.source, "none", )
        perform_inherit_abort (my.target, my.source, "none", )
        perform_inherit_exit (my.target, my.source, "none", )
        perform_inherit_channel_flow (my.target, my.source, "none", )
        perform_inherit_channel_flow_ok (my.target, my.source, "none", )
        perform_inherit_exchange_declare (my.target, my.source, "none", )
        perform_inherit_exchange_delete (my.target, my.source, "none", )
        perform_inherit_queue_declare (my.target, my.source, "none", )
        perform_inherit_queue_bind (my.target, my.source, "none", )
        perform_inherit_queue_purge (my.target, my.source, "none", )
        perform_inherit_queue_delete (my.target, my.source, "none", )
        perform_inherit_basic_consume (my.target, my.source, "none", )
        perform_inherit_basic_cancel (my.target, my.source, "none", )
        perform_inherit_basic_publish (my.target, my.source, "none", )
        perform_inherit_basic_get (my.target, my.source, "none", )
        perform_inherit_basic_content (my.target, my.source, "none", )
        perform_inherit_basic_arrived (my.target, my.source, "none", )
        perform_inherit_basic_returned (my.target, my.source, "none", )
        perform_inherit_empty (my.target, my.source, "none", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inherit_item (target, source)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("pal")
       echo "<inherit_inherit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_option_item (target, source)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("pal")
       echo "<inherit_option_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction



function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

#   'Preproc' engine for asl
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function preproc_asl ([asl])
    my.entity = my.[asl]
    my.[asl]._entity = "asl"
    my.[asl]._key = my.[asl].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_asl ? 0
       echo "<preproc_asl location = \"$(my.location)\""
    endif

    if my.asl = global.top
        if defined (switches.target)
            global.top.target = switches.target
        endif
    endif
    if defined (my.entity.role)
        global.have_role_$(my.entity.role) = 1
    endif
    for my.[asl].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[asl].[include] as [include]
        preproc_include ([include])
    endfor

    for my.[asl].[constant] as [constant]
        preproc_constant ([constant])
    endfor

    for my.[asl].[class] as [class]
        preproc_class ([class])
    endfor

    for my.[asl].[domain] as [domain]
        preproc_domain ([domain])
    endfor

    for my.[asl].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[asl].deleted ()
        my.[asl]._key = my.[asl].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_include ([include])
    my.entity = my.[include]
    my.[include]._entity = "include"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<preproc_include location = \"$(my.location)\""
    endif

    if !defined (my.[include].[filename])
        preproc_error ("Required attribute 'filename' not defined$(my.location)")
    endif
        if !defined (asl.load_file (filename))
        preproc_error ("Error loading include file: $(filename): $(xml.error?)")
    endif
    if !my.[include].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_constant ([constant])
    my.entity = my.[constant]
    my.[constant]._entity = "constant"
    my.[constant]._key = my.[constant].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constant ? 0
       echo "<preproc_constant location = \"$(my.location)\""
    endif

    if !my.[constant].deleted ()
        my.[constant]._key = my.[constant].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_class ([class])
    my.entity = my.[class]
    my.[class]._entity = "class"
    my.[class]._key = my.[class].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_class ? 0
       echo "<preproc_class location = \"$(my.location)\""
    endif

    if !defined (my.[class].[template])
        my.[class].[template] = "template"
    endif
            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[class].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[class].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[class].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[class].[see] as [see]
        preproc_see ([see])
    endfor

    for my.[class].[chassis] as [chassis]
        preproc_chassis ([chassis])
    endfor

    for my.[class].[field] as [field]
        preproc_field ([field])
    endfor

    for my.[class].[method] as [method]
        preproc_method ([method])
    endfor

    for my.[class].[context] as [context]
        preproc_context ([context])
    endfor

    for my.[class].[action] as [action]
        preproc_action ([action])
    endfor

    for my.[class].[constructor] as [constructor]
        preproc_constructor ([constructor])
    endfor

    for my.[class].[destructor] as [destructor]
        preproc_destructor ([destructor])
    endfor

    for my.[class].[todo] as [todo]
        preproc_todo ([todo])
    endfor

    if !my.[class].deleted ()
        my.[class]._key = my.[class].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_doc ([doc])
    my.entity = my.[doc]
    my.[doc]._entity = "doc"
    my.[doc]._key = my.[doc].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<preproc_doc location = \"$(my.location)\""
    endif

    if !my.[doc].deleted ()
        my.[doc]._key = my.[doc].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_see ([see])
    my.entity = my.[see]
    my.[see]._entity = "see"
    my.[see]._key = my.[see].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_see ? 0
       echo "<preproc_see location = \"$(my.location)\""
    endif

    if !my.[see].deleted ()
        my.[see]._key = my.[see].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_chassis ([chassis])
    my.entity = my.[chassis]
    my.[chassis]._entity = "chassis"
    my.[chassis]._key = my.[chassis].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_chassis ? 0
       echo "<preproc_chassis location = \"$(my.location)\""
    endif

    if !my.[chassis].deleted ()
        my.[chassis]._key = my.[chassis].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_method ([method])
    my.entity = my.[method]
    my.[method]._entity = "method"
    my.[method]._key = my.[method].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<preproc_method location = \"$(my.location)\""
    endif

    if !defined (my.[method].[template])
        my.[method].[template] = "template"
    endif
            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[method].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[method].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[method].[see] as [see]
        preproc_see ([see])
    endfor

    for my.[method].[chassis] as [chassis]
        preproc_chassis ([chassis])
    endfor

    for my.[method].[field] as [field]
        preproc_field ([field])
    endfor

    for my.[method].[response] as [response]
        preproc_response ([response])
    endfor

    if !my.[method].deleted ()
        my.[method]._key = my.[method].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_response ([response])
    my.entity = my.[response]
    my.[response]._entity = "response"
    my.[response]._key = my.[response].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_response ? 0
       echo "<preproc_response location = \"$(my.location)\""
    endif

    if !my.[response].deleted ()
        my.[response]._key = my.[response].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_field ([field])
    my.entity = my.[field]
    my.[field]._entity = "field"
    my.[field]._key = my.[field].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_field ? 0
       echo "<preproc_field location = \"$(my.location)\""
    endif

    for my.[field].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[field].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[field].[see] as [see]
        preproc_see ([see])
    endfor

    if !my.[field].deleted ()
        my.[field]._key = my.[field].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_domain ([domain])
    my.entity = my.[domain]
    my.[domain]._entity = "domain"
    my.[domain]._key = my.[domain].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_domain ? 0
       echo "<preproc_domain location = \"$(my.location)\""
    endif

    for my.[domain].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[domain].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[domain].[see] as [see]
        preproc_see ([see])
    endfor

    if !my.[domain].deleted ()
        my.[domain]._key = my.[domain].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_assert ([assert])
    my.entity = my.[assert]
    my.[assert]._entity = "assert"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<preproc_assert location = \"$(my.location)\""
    endif

    for my.[assert].[value] as [value]
        preproc_value ([value])
    endfor

    if !my.[assert].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_value ([value])
    my.entity = my.[value]
    my.[value]._entity = "value"
    my.[value]._key = my.[value].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_value ? 0
       echo "<preproc_value location = \"$(my.location)\""
    endif

    if !my.[value].deleted ()
        my.[value]._key = my.[value].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_context ([context])
    my.entity = my.[context]
    my.[context]._entity = "context"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<preproc_context location = \"$(my.location)\""
    endif

    if !my.[context].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_action ([action])
    my.entity = my.[action]
    my.[action]._entity = "action"
    my.[action]._key = my.[action].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_action ? 0
       echo "<preproc_action location = \"$(my.location)\""
    endif

    for my.[action].[local] as [local]
        preproc_local ([local])
    endfor

    for my.[action].[header] as [header]
        preproc_header ([header])
    endfor

    for my.[action].[footer] as [footer]
        preproc_footer ([footer])
    endfor

    if !my.[action].deleted ()
        my.[action]._key = my.[action].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_local ([local])
    my.entity = my.[local]
    my.[local]._entity = "local"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<preproc_local location = \"$(my.location)\""
    endif

    if !my.[local].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_header ([header])
    my.entity = my.[header]
    my.[header]._entity = "header"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<preproc_header location = \"$(my.location)\""
    endif

    if !my.[header].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_footer ([footer])
    my.entity = my.[footer]
    my.[footer]._entity = "footer"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<preproc_footer location = \"$(my.location)\""
    endif

    if !my.[footer].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_constructor ([constructor])
    my.entity = my.[constructor]
    my.[constructor]._entity = "constructor"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constructor ? 0
       echo "<preproc_constructor location = \"$(my.location)\""
    endif

    if !my.[constructor].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_destructor ([destructor])
    my.entity = my.[destructor]
    my.[destructor]._entity = "destructor"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_destructor ? 0
       echo "<preproc_destructor location = \"$(my.location)\""
    endif

    if !my.[destructor].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_todo ([todo])
    my.entity = my.[todo]
    my.[todo]._entity = "todo"
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<preproc_todo location = \"$(my.location)\""
    endif

    if !my.[todo].deleted ()
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_inherit ([inherit])
    my.entity = my.[inherit]
    my.[inherit]._entity = "inherit"
    my.[inherit]._key = my.[inherit].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<preproc_inherit location = \"$(my.location)\""
    endif

        #   Fudge for backwards compatibility  
        inherit.name ?= inherit.$(name($(-1))) ?
        if defined (inherit.name)
            inherit.name = gsl.exec (inherit.name, 1)
        endif
        inherit._key ?= inherit.name ?
    if !defined (my.[inherit].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[inherit].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[inherit].deleted ()
        my.[inherit]._key = my.[inherit].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction

function preproc_option ([option])
    my.entity = my.[option]
    my.[option]._entity = "option"
    my.[option]._key = my.[option].[name] ?
    my.entity._asl ?= [asl]._key ?
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<preproc_option location = \"$(my.location)\""
    endif

    if !defined (my.[option].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[option].[value])
        preproc_error ("Required attribute 'value' not defined$(my.location)")
    endif
    #   Export option to parent and all children
    my.parent = my.option.parent ()
    if defined (my.parent.$(my.option.name)) & my.parent.$(my.option.name) <> my.option.value
        preproc_error ("Option '$(my.option.name)' is already defined in $(name(my.parent)): $(my.parent._key?)")
    else
        define_throughout (my.parent, my.option)
    endif
    if !my.[option].deleted ()
        my.[option]._key = my.[option].[name] ?
        my.entity._asl ?= [asl]._key ?
    endif
endfunction


function preproc_error (message)
    echo (my.message)
    global.errno = 1
endfunction

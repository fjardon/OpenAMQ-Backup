#   'Inherit' engine for xnf
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function inherit_xnf ([xnf])
    my.entity = my.[xnf]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf ? 0
       echo "<inherit_xnf location = \"$(my.location)\""
    endif

    for my.[xnf].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[xnf].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[xnf].[include] as [include]
        inherit_include ([include])
    endfor

    for my.[xnf].[produce] as [produce]
        inherit_produce ([produce])
    endfor

    for my.[xnf].[entity] as [entity]
        inherit_entity ([entity])
    endfor

    for my.[xnf].[errorhandler] as [errorhandler]
        inherit_errorhandler ([errorhandler])
    endfor

    for my.[xnf].[rule] as [xnf rule]
        inherit_xnf_rule ([xnf rule])
    endfor

endfunction

function inherit_include ([include])
    my.entity = my.[include]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<inherit_include location = \"$(my.location)\""
    endif

endfunction

function inherit_produce ([produce])
    my.entity = my.[produce]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_produce ? 0
       echo "<inherit_produce location = \"$(my.location)\""
    endif

endfunction

function inherit_entity ([entity])
    my.entity = my.[entity]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity ? 0
       echo "<inherit_entity location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[entity].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("entity", "entity", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Entity '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_entity_item (my.[entity], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[entity].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[entity].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[entity].[allow] as [allow]
        inherit_allow ([allow])
    endfor

    for my.[entity].[rule] as [entity rule]
        inherit_entity_rule ([entity rule])
    endfor

    for my.[entity].[attr] as [attr]
        inherit_attr ([attr])
    endfor

    for my.[entity].[link] as [link]
        inherit_link ([link])
    endfor

endfunction

function inherit_allow ([allow])
    my.entity = my.[allow]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_allow ? 0
       echo "<inherit_allow location = \"$(my.location)\""
    endif

endfunction

function inherit_entity_rule ([entity rule])
    my.entity = my.[entity rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity_rule ? 0
       echo "<inherit_entity_rule location = \"$(my.location)\""
    endif

endfunction

function inherit_link ([link])
    my.entity = my.[link]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link ? 0
       echo "<inherit_link location = \"$(my.location)\""
    endif

    for my.[link].[rule] as [link rule]
        inherit_link_rule ([link rule])
    endfor

endfunction

function inherit_link_rule ([link rule])
    my.entity = my.[link rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link_rule ? 0
       echo "<inherit_link_rule location = \"$(my.location)\""
    endif

endfunction

function inherit_attr ([attr])
    my.entity = my.[attr]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_attr ? 0
       echo "<inherit_attr location = \"$(my.location)\""
    endif

    for my.[attr].[restrict] as [restrict]
        inherit_restrict ([restrict])
    endfor

endfunction

function inherit_restrict ([restrict])
    my.entity = my.[restrict]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_restrict ? 0
       echo "<inherit_restrict location = \"$(my.location)\""
    endif

endfunction

function inherit_xnf_rule ([xnf rule])
    my.entity = my.[xnf rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf_rule ? 0
       echo "<inherit_xnf_rule location = \"$(my.location)\""
    endif

endfunction

function inherit_errorhandler ([errorhandler])
    my.entity = my.[errorhandler]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_errorhandler ? 0
       echo "<inherit_errorhandler location = \"$(my.location)\""
    endif

endfunction

function inherit_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    for my.[inherit].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_option ([option])
    my.entity = my.[option]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<inherit_option location = \"$(my.location)\""
    endif

endfunction


function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

function inherit_top ([xnf])
    my.entity = my.[xnf]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf ? 0
       echo "<inherit_top location = \"$(my.location)\""
    endif

    for my.[xnf].inherit
        if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
            if switches.trace ? 0 | switches.trace_xnf ? 0
                echo "Loading $(name)"
            endif
            my.inherit_file = xml.load_file (name + ".xnf") ? abort_xml_error ()
            my.inherit_file._filename ?= name
            if my.inherit_file.multiple ? 0 > 0 | !defined (global.top.have_inherit_$(inherit.name))
                for inherit.option
                    copy option to my.inherit_file
                endfor
                scope my.inherit_file as xnf
                    preproc_xnf (my.inherit_file)
                    inherit_top (my.inherit_file)
                endscope
                global.top.have_inherit_$(inherit.name) = 1
            
                move my.inherit_file to global.inherit
            endif
        endif
    endfor
endfunction

function sort_top_inherits ()
    my.location = location ("xnf")

    my.sorted = xml.new ("sorted")
    for global.inherit.xnf
        my.[before] =
        my.[after]  =
        if switches.trace ? 0 | switches.trace_xnf ? 0
            echo "Inserting $(xnf._key)"
        endif
        for my.sorted.xnf as sorted

            if ((sorted.role    = class.[before]) ? 0)   | ((sorted.[after] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_xnf ? 0
                    echo "    before: $(sorted.name)"
                endif
                my.[before] ?= sorted
            endif
            if ((sorted.role    = class.[after]) ? 0)   | ((sorted.[before] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_xnf ? 0
                    echo "    after: $(sorted.name)"
                endif
                if defined (my.[before])
                    preproc_error ("Incoherent inherit order$(my.location)")
                    last
                endif
                my.[after] = sorted
            endif
        endfor
            
        if defined (my.[before])
            move xnf before my.[before]
        elsif defined (my.[after])
            move xnf after my.[after]
        else
            my.any = my.sorted->?
            if defined (my.any)
                move xnf before my.any
            else
                move xnf to my.sorted
            endif
        endif
    endfor
    
    for my.sorted.xnf
        if switches.trace ? 0 | switches.trace_xnf ? 0
            echo "Inheriting $(xnf.name)"
        endif
        perform_inherit_xnf_item (global.top, xnf)
    endfor

endfunction

function perform_inherit_xnf (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_xnf ? 0
       my.location = location ("xnf")
       echo "<inherit_xnf location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[xnf] ?
    for my.source.[xnf] as [xnf]
        my.existing = my.target->[xnf] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_xnf_item (my.existing, [xnf])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [xnf] before my.insert
                else
                    copy [xnf] to my.target
                endif
            else
                copy [xnf] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_xnf

function perform_inherit_include (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("xnf")
       echo "<inherit_include location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[include] ?
    for my.source.[include] as [include]
        my.existing = my.target->[include] (0.[filename] ?= -1.[filename]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_include_item (my.existing, [include])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [include] before my.insert
                else
                    copy [include] to my.target
                endif
            else
                copy [include] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_include

function perform_inherit_produce (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_produce ? 0
       my.location = location ("xnf")
       echo "<inherit_produce location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[produce] ?
    for my.source.[produce] as [produce]
        my.existing = my.target->[produce] (0.[type] ?= -1.[type]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_produce_item (my.existing, [produce])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [produce] before my.insert
                else
                    copy [produce] to my.target
                endif
            else
                copy [produce] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_produce

function perform_inherit_entity (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_entity ? 0
       my.location = location ("xnf")
       echo "<inherit_entity location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[entity] ?
    for my.source.[entity] as [entity]
        if [entity].export ? "default" <> "none"
        my.existing = my.target->[entity] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_entity_item (my.existing, [entity])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert) & [entity].export ? "default" <> "after"
                    copy [entity] before my.insert
                else
                    copy [entity] to my.target
                endif
            else
                if defined (my.insert) & [entity].export ? "default" = "before"
                    copy [entity] before my.insert
                else
                    copy [entity] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_entity

function perform_inherit_allow (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_allow ? 0
       my.location = location ("xnf")
       echo "<inherit_allow location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[allow] ?
    for my.source.[allow] as [allow]
        if [allow].export ? "default" <> "none"
        my.existing = my.target->[allow] (0.[entity] ?= -1.[entity]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_allow_item (my.existing, [allow])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert) & [allow].export ? "default" <> "after"
                    copy [allow] before my.insert
                else
                    copy [allow] to my.target
                endif
            else
                if defined (my.insert) & [allow].export ? "default" = "before"
                    copy [allow] before my.insert
                else
                    copy [allow] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_allow

function perform_inherit_entity_rule (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_entity_rule ? 0
       my.location = location ("xnf")
       echo "<inherit_entity_rule location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[rule] ?
    for my.source.[rule] as [entity rule]
        if my.inherit = "overlay"
            my.existing = my.target->[rule] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_entity_rule_item (my.existing, [entity rule])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [entity rule] before my.insert
                else
                    copy [entity rule] to my.target
                endif
            else
                copy [entity rule] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_entity_rule

function perform_inherit_link (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_link ? 0
       my.location = location ("xnf")
       echo "<inherit_link location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[link] ?
    for my.source.[link] as [link]
        my.existing = my.target->[link] (0.[entity] ?= -1.[entity]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_link_item (my.existing, [link])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [link] before my.insert
                else
                    copy [link] to my.target
                endif
            else
                copy [link] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_link

function perform_inherit_link_rule (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_link_rule ? 0
       my.location = location ("xnf")
       echo "<inherit_link_rule location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[rule] ?
    for my.source.[rule] as [link rule]
        if my.inherit = "overlay"
            my.existing = my.target->[rule] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_link_rule_item (my.existing, [link rule])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [link rule] before my.insert
                else
                    copy [link rule] to my.target
                endif
            else
                copy [link rule] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_link_rule

function perform_inherit_attr (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_attr ? 0
       my.location = location ("xnf")
       echo "<inherit_attr location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[attr] ?
    for my.source.[attr] as [attr]
        my.existing = my.target->[attr] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_attr_item (my.existing, [attr])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [attr] before my.insert
                else
                    copy [attr] to my.target
                endif
            else
                copy [attr] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_attr

function perform_inherit_restrict (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_restrict ? 0
       my.location = location ("xnf")
       echo "<inherit_restrict location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[restrict] ?
    for my.source.[restrict] as [restrict]
        my.existing = my.target->[restrict] (0.[value] ?= -1.[value]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_restrict_item (my.existing, [restrict])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [restrict] before my.insert
                else
                    copy [restrict] to my.target
                endif
            else
                copy [restrict] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_restrict

function perform_inherit_xnf_rule (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_xnf_rule ? 0
       my.location = location ("xnf")
       echo "<inherit_xnf_rule location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[rule] ?
    for my.source.[rule] as [xnf rule]
        if my.inherit = "overlay"
            my.existing = my.target->[rule] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_xnf_rule_item (my.existing, [xnf rule])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [xnf rule] before my.insert
                else
                    copy [xnf rule] to my.target
                endif
            else
                copy [xnf rule] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_xnf_rule

function perform_inherit_errorhandler (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_errorhandler ? 0
       my.location = location ("xnf")
       echo "<inherit_errorhandler location = \"$(my.location)\""
    endif

    my.inherit ?= "none"
    my.insert = my.target->[errorhandler] ?
    for my.source.[errorhandler] as [errorhandler]
        if my.inherit = "overlay"
            my.existing = my.target->[errorhandler] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_errorhandler_item (my.existing, [errorhandler])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [errorhandler] before my.insert
                else
                    copy [errorhandler] to my.target
                endif
            else
                copy [errorhandler] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_errorhandler

function perform_inherit_inherit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("xnf")
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inherit] ?
    for my.source.[inherit] as [inherit]
        my.existing = my.target->[inherit] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inherit_item (my.existing, [inherit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inherit] before my.insert
                else
                    copy [inherit] to my.target
                endif
            else
                copy [inherit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inherit

function perform_inherit_option (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("xnf")
       echo "<inherit_option location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[option] ?
    for my.source.[option] as [option]
        my.existing = my.target->[option] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_option_item (my.existing, [option])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [option] before my.insert
                else
                    copy [option] to my.target
                endif
            else
                copy [option] to my.target
            endif
        endif
            #   Export option to parent and all children
    if !defined (my.target.$(name))
        define_throughout (my.target, option)
    endif
    endfor
endfunction perform_inherit_option

function perform_inherit_xnf_item (target, source)
    if switches.trace ? 0 | switches.trace_xnf ? 0
       my.location = location ("xnf")
       echo "<inherit_xnf_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        my.target.[before] ?= my.source.[before] ?
        my.target.[after] ?= my.source.[after] ?
        my.target.[copyright] ?= my.source.[copyright] ?
        my.target.[license] ?= my.source.[license] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[script] ?= my.source.[script] ?
        my.target.[version] ?= my.source.[version] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_include (my.target, my.source, , )
        perform_inherit_produce (my.target, my.source, , )
        perform_inherit_entity (my.target, my.source, "overlay", "after")
        perform_inherit_errorhandler (my.target, my.source, "none", )
        perform_inherit_xnf_rule (my.target, my.source, "insert", "after")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_include_item (target, source)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("xnf")
       echo "<inherit_include_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[filename] ?= my.source.[filename] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_produce_item (target, source)
    if switches.trace ? 0 | switches.trace_produce ? 0
       my.location = location ("xnf")
       echo "<inherit_produce_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[filename] ?= my.source.[filename] ?
        my.target.[type] ?= my.source.[type] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_entity_item (target, source)
    if switches.trace ? 0 | switches.trace_entity ? 0
       my.location = location ("xnf")
       echo "<inherit_entity_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[tag] ?= my.source.[tag] ?
        my.target.[cdata] ?= my.source.[cdata] ?
        my.target.[key] ?= my.source.[key] ?
        my.target.[unique] ?= my.source.[unique] ?
        my.target.[inherit] ?= my.source.[inherit] ?
        my.target.[sequence] ?= my.source.[sequence] ?
        my.target.[disconnect] ?= my.source.[disconnect] ?
        my.target.[export] ?= my.source.[export] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_allow (my.target, my.source, "overlay", "after")
        perform_inherit_entity_rule (my.target, my.source, "insert", "after")
        perform_inherit_attr (my.target, my.source, , )
        perform_inherit_link (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_allow_item (target, source)
    if switches.trace ? 0 | switches.trace_allow ? 0
       my.location = location ("xnf")
       echo "<inherit_allow_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[entity] ?= my.source.[entity] ?
        my.target.[occurs] ?= my.source.[occurs] ?
        my.target.[inherit] ?= my.source.[inherit] ?
        my.target.[sequence] ?= my.source.[sequence] ?
        my.target.[export] ?= my.source.[export] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_link_item (target, source)
    if switches.trace ? 0 | switches.trace_link ? 0
       my.location = location ("xnf")
       echo "<inherit_link_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[from] ?= my.source.[from] ?
        my.target.[entity] ?= my.source.[entity] ?
        my.target.[field] ?= my.source.[field] ?
        my.target.[required] ?= my.source.[required] ?
        my.target.[disconnect] ?= my.source.[disconnect] ?
        perform_inherit_link_rule (my.target, my.source, "insert", "after")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_attr_item (target, source)
    if switches.trace ? 0 | switches.trace_attr ? 0
       my.location = location ("xnf")
       echo "<inherit_attr_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[required] ?= my.source.[required] ?
        my.target.[default] ?= my.source.[default] ?
        my.target.[inherit] ?= my.source.[inherit] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_restrict (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_restrict_item (target, source)
    if switches.trace ? 0 | switches.trace_restrict ? 0
       my.location = location ("xnf")
       echo "<inherit_restrict_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inherit_item (target, source)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("xnf")
       echo "<inherit_inherit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_option_item (target, source)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("xnf")
       echo "<inherit_option_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction



function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

<?xml version="1.0"?>
<!--
    Copyright (c) 1996-2009 iMatix Corporation

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or (at
    your option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    For information on alternative licensing for OEMs, please contact
    iMatix Corporation.
 -->
<xnf
    name    = "icl_stdc"
    script  = "xnf_gen.gsl"
    version = "1.1c1"
    >
iCL is the iMatix Class Language.  iCL is a fat programming language used to
build and maintain classes, which are packages of code and data.  The goal
of iCL is to provide a standard framework in which to write modular library
functions and classes. iCL is loosely based on object-oriented concepts.

<inherit xnf = "xnf_base" />
<inherit xnf = "icl" />

<produce filename = "icl_gen.gsl"     type = "wrap"    />
<produce filename = "icl_preproc.gsl" type = "preproc" />
<produce filename = "icl_inherit.gsl" type = "inherit" />
<produce filename = "icl_parse.gsl"   type = "parse"   />
<produce filename = "icl_doc.txt"     type = "gurudoc" />

<entity name = "icl" tag = "class">
    <allow entity = "public"    />
    <allow entity = "private"   />
    <allow entity = "context"   />
    <attr name = "target" default = "stdc">
    Specifies the name of the target environment; the target is implemented by
    a GSL script that generates code for a specific language environment.
    The target can be inherited from a parent class.
        <restrict value = "stdc">Standard ANSI C + iMatix runtime</restrict>
        <restrict value = "stdcpp">Standard ANSI C++ wrapper</restrict>
    </attr>
    <attr name = "base" default = "$(name)" short = "prefix for generated method names">
    Generated functions usually begin with the class name.  This can be
    over-ridden by the use of the attribute 'base', which can be set to empty.
    </attr>
    <attr name = "trace" default = "NULL">
    Specifies which trace object to use; default means global trace; 0 means
    no trace.
    </attr>
    <rule phase = "parse" when = "after">
    base = "$(base:c)"
    </rule>
</entity>

<entity name = "public" cdata = "1" inherit = "insert" key = "">
    Public definitions, exported for use by callers of the class.  In
    C, these definitions are copied into the class header file.  Public
    definitions are inherited from the parent classes unless you specify
    inherit = "0".  If the definitions are named, each named block is
    indepedently inherited.
    <allow entity = "doc" />

    <attr name = "name" default = "types" short = "name of block">
    The name of the public block, which really means the place in the
    generated code that this public block shoud be inserted.
        <restrict value = "header"   >issued before class imports, in first pass</restrict>
        <restrict value = "include"  >issued after class imports, in each pass</restrict>
        <restrict value = "types"    >for type definitions</restrict>
        <restrict value = "structure">after structure definition</restrict>
        <restrict value = "functions">for functions prototypes</restrict>
        <restrict value = "inline"   >for inline functions</restrict>
        <restrict value = "footer"   >issued at end of file</restrict>
    </attr>
</entity>

<entity name = "private" cdata = "1" inherit = "insert" key = "">
    Private definitions, used by the class itself. The private definitions
    can include static variables and local functions.  Private definitions
    are inherited from the parent classes unless you specify inherit = "0".
    If the definitions are named, each named block is indepedently inherited.
    <allow entity = "doc" />

    <attr name = "name" default = "body" short = "name of the block">
    The name of the private block, can be "header" to hint the code
    generator to place this at the top of the generated file.
        <restrict value = "defines">issued before class header</restrict>
        <restrict value = "header" >issued after class header</restrict>
        <restrict value = "body"   >issued in middle of source</restrict>
        <restrict value = "footer" >issued at end of source</restrict>
    </attr>
</entity>

<entity name = "context" cdata = "1" inherit = "insert">
    Defines a context block; one or more variables which will be held
    in all class instances.
    <allow entity = "doc" />

    <attr name = "export" default = "default" >
    Specifies how this item may be inherited.
        <restrict value = "none" >may not be inherited</restrict>
        <restrict value = "default">inherited in the default manner</restrict>
        <restrict value = "before" >inherited before existing items</restrict>
        <restrict value = "after" >inherited after existing items</restrict>
    </attr>
</entity>

<entity name = "method" cdata = "1">
    <allow entity = "argument"/>
    <allow entity = "animate" />
    <allow entity = "dismiss" />
    <allow entity = "declare" />
    <allow entity = "local"   />
    <allow entity = "header"  />
    <allow entity = "footer"  />

    <attr name = "cname"  default = "$(expand(method.name):c)">
    The name of the generated C function; by default use the method name.
    </attr>
    <attr name = "base" short = "start of generated function name">
    Generated functions usually begin with the class name.  This can be
    over-ridden by the use of the attribute 'base'.
    </attr>
    <attr name = "return" short = "method return value">
    The name of the returned value. This must be one of the items declared
    in the method body using 'declare'.
    </attr>
    <attr name = "inline" default = "0">
    Specifies whether this method should be created as an inline function.
        <restrict value = "0">Create a normal function.</restrict>
        <restrict value = "1">Create an inline function.</restrict>
    </attr>
    <attr name = "trace">
    Specifies which trace object to use; default means global trace; 0 means
    no trace.
    </attr>
    <rule phase = "parse">
    if !defined (method.base)
        method.base = class.base
    endif
    if method.base <> ""
        method.base += "_"
    endif
    </rule>
</entity>

<entity name = "argument" cdata = "1"
        inherit = "overlay">
    Defines one argument passed to the method. The body of this entity is
    used to document the argument.
    <allow entity = "doc" />

    <inherit name = "condition"/>

    <attr name = "name" required = "1" short = "name of argument">
    The name of the argument.
    </attr>
    <attr name = "type" default = "" short = "type of argument">
    The type of the argument, which is a native type name.
    </attr>
    <attr name = "pass" short = "direction of argument" default = "inout">
    Defines whether argument is to be passed into function, out of it, or both.
    "in" arguments are also to be considered const, i.e. not modified within
    the function.
        <restrict value = "in">Pass argument into the function</restrict>
        <restrict value = "out">Pass argument out of the function</restrict>
        <restrict value = "inout">Pass argument both into the function and out of it</restrict>
    </attr>
    <attr name = "index" short = "index for array argument">
    The index if the argument is to be declared as an array.  An empty
    string gives an indefinite array ('[]')
    </attr>
    <attr name = "default" short = "argument default value">
    The argument default value, used for integer arguments with value zero,
    and string and reference arguments with value null.
    </attr>
    <attr name = "precalc" short = "precalculated argument value">
    The argument is precalculated by a macro in the header.
    </attr>
    <attr name = "animate" default = "1" short = "show argument in animation">
    If set to 0, argument does not show in animation
    </attr>
    <attr name = "ref" default = "0">
    Pass argument by reference.  If this option is selected, the name of the
    argument has a _p appended to it and a * appended to its type.  A
    &lt;declare> is also generated with the original name, type and default
    value of the argument.
        <restrict value = "0">Pass argument by value</restrict>
        <restrict value = "1">Pass argument by reference</restrict>
    </attr>
    <attr name = "export" default = "default" >
    Specifies how this item may be inherited.
        <restrict value = "none" >may not be inherited</restrict>
        <restrict value = "default">inherited in the default manner</restrict>
        <restrict value = "before" >inherited before existing items</restrict>
        <restrict value = "after" >inherited after existing items</restrict>
    </attr>
    <rule phase = "parse" when = "after">
    if my.argument.ref
        /*  Make a declare to replace the argument */
        my.declare = xml.new ("declare")
        my.declare.name = name
        my.declare.type = type
        my.declare.default = "*" + name + "_p"
        my.declare.animate = 1
        my.declare. = "Dereferenced $(argument.?name)"

        my.firstdeclare = method->declare ?
        if defined (my.firstdeclare)
            move my.declare before my.firstdeclare
        else
            move my.declare to method
        endif

        my.argument.deref_name = name
        my.argument.deref_type = type
    endif
    </rule>
</entity>

<entity name = "animate" cdata = "1" inherit = "overlay">
    Defines an additional item (besides argument & declare) to animate.
    <inherit name = "condition"/>
    <attr name = "name"  required = "1" short = "name of animated value">
    The name to output for this value in the animation.
    </attr>
    <attr name = "value" default = "$(name)" short = "value to animate">
    The value to animate.  May be an expression.
    </attr>
    <attr name = "format" required = "1" short = "format for evaluation">
    The format (eg '%s') for outputting the animated value.
    </attr>
</entity>

<entity name = "dismiss" cdata = "1" key = "argument">
    Dismisses an argument: the argument is removed from the API and provided
    with a calculated value.  Argument dismissal can be useful when building
    large classes with multiple parentage, where some arguments are redundant
    and can be removed from the API (thus making life simpler for the caller,
    which is a Good Thing).

    <attr name = "argument" required = "1" short = "name of argument">
    The name of the argument.
    </attr>
    <attr name = "value" required = "1" short = "calculated value">
    The calculated value of the argument.
    </attr>
</entity>

<entity name = "declare" cdata = "1">
    <inherit name = "condition"/>
    Defines data declarations for the code that follows.  All local variables
    used in the code body must be placed in declare tags so that the final
    code can be correctly generated.

    <attr name = "name" required = "1" short = "name of variable">
    The name of the variable.  For non-atomic variables like arrays, this can
    contain the full variable declaration.  Note that only atomic variables can
    be passed as arguments.
    </attr>
    <attr name = "type" required = "1" short = "type of variable">
    The type of the argument, which is a native type name.  To use a reference
    to the the current class (a pointer in C), use the value "$(selftype) *".
    </attr>
    <attr name = "default" short = "default value">
    The default value for the variable.  To define a string value, you must
    enclose it in &amp;quot; symbols.
    </attr>
    <attr name = "precond" short = "Preprocess condition for inclusion">
    Allows code generated from 'declare' entity to be surrounded by a
    preprocessor condition, thus avoiding th annoying 'unused variable'
    compilation warning.
    </attr>
    <attr name = "animate" default = "0" short = "animate at entry">
    If set to 1, value is animated at start of method as well as end.
    </attr>
</entity>

<entity name = "local" cdata = "1" inherit = "insert">
    Variable definitions used by the method itself. The local definitions
    are a simpler way of defining blocks of variables than using declare
    items.  Note you must use a declare for the return value.
    <allow entity = "doc" />
</entity>

<entity name = "header" cdata = "1" inherit = "insert">
    Defines a block of method code that should come before all bodies
    from the current and parent classes.  Do not use for variable
    declarations, use 'local'.
    <attr name = "export" default = "default" >
    Specifies how this item may be inherited.
        <restrict value = "none"   >may not be inherited</restrict>
        <restrict value = "default">inherited in the default manner</restrict>
        <restrict value = "before" >inherited before existing items</restrict>
        <restrict value = "after"  >inherited after existing items</restrict>
    </attr>
</entity>

<entity name = "footer" cdata = "1" inherit = "insert" sequence = "after">
    Defines a block of method code that should come after all bodies
    from the current and parent classes.
    <attr name = "export" default = "default" >
    Specifies how this item may be inherited.
        <restrict value = "none"   >may not be inherited</restrict>
        <restrict value = "default">inherited in the default manner</restrict>
        <restrict value = "before" >inherited before existing items</restrict>
        <restrict value = "after"  >inherited after existing items</restrict>
    </attr>
</entity>

</xnf>

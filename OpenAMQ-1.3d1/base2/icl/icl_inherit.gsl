#   'Inherit' engine for icl_stdc
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function inherit_icl ([icl])
    my.entity = my.[icl]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_icl ? 0
       echo "<inherit_icl location = \"$(my.location)\""
    endif

    for my.[icl].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[icl].[data] as [data]
        inherit_data ([data])
    endfor

    for my.[icl].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

    for my.[icl].[public] as [public]
        inherit_public ([public])
    endfor

    for my.[icl].[private] as [private]
        inherit_private ([private])
    endfor

    for my.[icl].[context] as [context]
        inherit_context ([context])
    endfor

    for my.[icl].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[icl].[import] as [import]
        inherit_import ([import])
    endfor

    for my.[icl].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[icl].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[icl].[method] as [method]
        inherit_method ([method])
    endfor

    for my.[icl].[todo] as [todo]
        inherit_todo ([todo])
    endfor

endfunction

function inherit_public ([public])
    my.entity = my.[public]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_public ? 0
       echo "<inherit_public location = \"$(my.location)\""
    endif

    for my.[public].[doc] as [doc]
        inherit_doc ([doc])
    endfor

endfunction

function inherit_private ([private])
    my.entity = my.[private]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_private ? 0
       echo "<inherit_private location = \"$(my.location)\""
    endif

    for my.[private].[doc] as [doc]
        inherit_doc ([doc])
    endfor

endfunction

function inherit_context ([context])
    my.entity = my.[context]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<inherit_context location = \"$(my.location)\""
    endif

    for my.[context].[doc] as [doc]
        inherit_doc ([doc])
    endfor

endfunction

function inherit_method ([method])
    my.entity = my.[method]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<inherit_method location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[method].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("method", "method", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Method '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_method_item (my.[method], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[method].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[method].[argument] as [argument]
        inherit_argument ([argument])
    endfor

    for my.[method].[animate] as [animate]
        inherit_animate ([animate])
    endfor

    for my.[method].[dismiss] as [dismiss]
        inherit_dismiss ([dismiss])
    endfor

    for my.[method].[declare] as [declare]
        inherit_declare ([declare])
    endfor

    for my.[method].[local] as [local]
        inherit_local ([local])
    endfor

    for my.[method].[header] as [header]
        inherit_header ([header])
    endfor

    for my.[method].[footer] as [footer]
        inherit_footer ([footer])
    endfor

    for my.[method].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[method].[invoke] as [invoke]
        inherit_invoke ([invoke])
    endfor

endfunction

function inherit_argument ([argument])
    my.entity = my.[argument]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_argument ? 0
       echo "<inherit_argument location = \"$(my.location)\""
    endif

    for my.[argument].[doc] as [doc]
        inherit_doc ([doc])
    endfor

endfunction

function inherit_animate ([animate])
    my.entity = my.[animate]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_animate ? 0
       echo "<inherit_animate location = \"$(my.location)\""
    endif

endfunction

function inherit_dismiss ([dismiss])
    my.entity = my.[dismiss]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_dismiss ? 0
       echo "<inherit_dismiss location = \"$(my.location)\""
    endif

endfunction

function inherit_declare ([declare])
    my.entity = my.[declare]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_declare ? 0
       echo "<inherit_declare location = \"$(my.location)\""
    endif

endfunction

function inherit_local ([local])
    my.entity = my.[local]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<inherit_local location = \"$(my.location)\""
    endif

    for my.[local].[doc] as [doc]
        inherit_doc ([doc])
    endfor

endfunction

function inherit_header ([header])
    my.entity = my.[header]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<inherit_header location = \"$(my.location)\""
    endif

endfunction

function inherit_footer ([footer])
    my.entity = my.[footer]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<inherit_footer location = \"$(my.location)\""
    endif

endfunction

function inherit_doc ([doc])
    my.entity = my.[doc]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<inherit_doc location = \"$(my.location)\""
    endif

endfunction

function inherit_import ([import])
    my.entity = my.[import]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_import ? 0
       echo "<inherit_import location = \"$(my.location)\""
    endif

endfunction

function inherit_assert ([assert])
    my.entity = my.[assert]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<inherit_assert location = \"$(my.location)\""
    endif

endfunction

function inherit_data ([data])
    my.entity = my.[data]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_data ? 0
       echo "<inherit_data location = \"$(my.location)\""
    endif

endfunction

function inherit_invoke ([invoke])
    my.entity = my.[invoke]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_invoke ? 0
       echo "<inherit_invoke location = \"$(my.location)\""
    endif

endfunction

function inherit_todo ([todo])
    my.entity = my.[todo]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<inherit_todo location = \"$(my.location)\""
    endif

endfunction

function inherit_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    for my.[inherit].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_option ([option])
    my.entity = my.[option]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<inherit_option location = \"$(my.location)\""
    endif

endfunction


function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

function inherit_top ([icl])
    my.entity = my.[icl]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_icl ? 0
       echo "<inherit_top location = \"$(my.location)\""
    endif

    for my.[icl].inherit
        if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
            if switches.trace ? 0 | switches.trace_icl ? 0
                echo "Loading $(name)"
            endif
            my.inherit_file = xml.load_file (name + ".icl") ? abort_xml_error ()
            my.inherit_file._filename ?= name
            if my.inherit_file.multiple ? 0 > 0 | !defined (global.top.have_inherit_$(inherit.name))
                for inherit.option
                    copy option to my.inherit_file
                endfor
                scope my.inherit_file as icl
                    preproc_icl (my.inherit_file)
                    inherit_top (my.inherit_file)
                endscope
                global.top.have_inherit_$(inherit.name) = 1
            
                move my.inherit_file to global.inherit
            endif
        endif
    endfor
endfunction

function sort_top_inherits ()
    my.location = location ("class")

    my.sorted = xml.new ("sorted")
    for global.inherit.class
        my.[before] =
        my.[after]  =
        if switches.trace ? 0 | switches.trace_icl ? 0
            echo "Inserting $(class._key)"
        endif
        for my.sorted.class as sorted

            if ((sorted.role    = class.[before]) ? 0)   | ((sorted.[after] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_icl ? 0
                    echo "    before: $(sorted.name)"
                endif
                my.[before] ?= sorted
            endif
            if ((sorted.role    = class.[after]) ? 0)   | ((sorted.[before] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_icl ? 0
                    echo "    after: $(sorted.name)"
                endif
                if defined (my.[before])
                    preproc_error ("Incoherent inherit order$(my.location)")
                    last
                endif
                my.[after] = sorted
            endif
        endfor
            
        if defined (my.[before])
            move class before my.[before]
        elsif defined (my.[after])
            move class after my.[after]
        else
            my.any = my.sorted->?
            if defined (my.any)
                move class before my.any
            else
                move class to my.sorted
            endif
        endif
    endfor
    
    for my.sorted.class
        if switches.trace ? 0 | switches.trace_icl ? 0
            echo "Inheriting $(class.name)"
        endif
        perform_inherit_icl_item (global.top, class)
    endfor

endfunction

function perform_inherit_icl (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_icl ? 0
       my.location = location ("class")
       echo "<inherit_icl location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[class] ?
    for my.source.[class] as [icl]
        my.existing = my.target->[class] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_icl_item (my.existing, [icl])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [icl] before my.insert
                else
                    copy [icl] to my.target
                endif
            else
                copy [icl] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_icl

function perform_inherit_public (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_public ? 0
       my.location = location ("class")
       echo "<inherit_public location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[public] ?
    for my.source.[public] as [public]
        if my.inherit = "overlay"
            my.existing = my.target->[public] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_public_item (my.existing, [public])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [public] before my.insert
                else
                    copy [public] to my.target
                endif
            else
                copy [public] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_public

function perform_inherit_private (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_private ? 0
       my.location = location ("class")
       echo "<inherit_private location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[private] ?
    for my.source.[private] as [private]
        if my.inherit = "overlay"
            my.existing = my.target->[private] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_private_item (my.existing, [private])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [private] before my.insert
                else
                    copy [private] to my.target
                endif
            else
                copy [private] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_private

function perform_inherit_context (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_context ? 0
       my.location = location ("class")
       echo "<inherit_context location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[context] ?
    for my.source.[context] as [context]
        if [context].export ? "default" <> "none"
        if my.inherit = "overlay"
            my.existing = my.target->[context] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_context_item (my.existing, [context])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert) & [context].export ? "default" <> "after"
                    copy [context] before my.insert
                else
                    copy [context] to my.target
                endif
            else
                if defined (my.insert) & [context].export ? "default" = "before"
                    copy [context] before my.insert
                else
                    copy [context] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_context

function perform_inherit_method (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("class")
       echo "<inherit_method location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[method] ?
    for my.source.[method] as [method]
        if [method].export ? "default" <> "none"
        my.existing = my.target->[method] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_method_item (my.existing, [method])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert) & [method].export ? "default" <> "after"
                    copy [method] before my.insert
                else
                    copy [method] to my.target
                endif
            else
                if defined (my.insert) & [method].export ? "default" = "before"
                    copy [method] before my.insert
                else
                    copy [method] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_method

function perform_inherit_argument (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_argument ? 0
       my.location = location ("class")
       echo "<inherit_argument location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[argument] ?
    for my.source.[argument] as [argument]
        if [argument].export ? "default" <> "none"
        my.existing = my.target->[argument] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_argument_item (my.existing, [argument])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert) & [argument].export ? "default" <> "after"
                    copy [argument] before my.insert
                else
                    copy [argument] to my.target
                endif
            else
                if defined (my.insert) & [argument].export ? "default" = "before"
                    copy [argument] before my.insert
                else
                    copy [argument] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_argument

function perform_inherit_animate (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_animate ? 0
       my.location = location ("class")
       echo "<inherit_animate location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[animate] ?
    for my.source.[animate] as [animate]
        my.existing = my.target->[animate] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_animate_item (my.existing, [animate])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [animate] before my.insert
                else
                    copy [animate] to my.target
                endif
            else
                copy [animate] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_animate

function perform_inherit_dismiss (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_dismiss ? 0
       my.location = location ("class")
       echo "<inherit_dismiss location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[dismiss] ?
    for my.source.[dismiss] as [dismiss]
        my.existing = my.target->[dismiss] (0.[argument] ?= -1.[argument]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_dismiss_item (my.existing, [dismiss])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [dismiss] before my.insert
                else
                    copy [dismiss] to my.target
                endif
            else
                copy [dismiss] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_dismiss

function perform_inherit_declare (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_declare ? 0
       my.location = location ("class")
       echo "<inherit_declare location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[declare] ?
    for my.source.[declare] as [declare]
        my.existing = my.target->[declare] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_declare_item (my.existing, [declare])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [declare] before my.insert
                else
                    copy [declare] to my.target
                endif
            else
                copy [declare] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_declare

function perform_inherit_local (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_local ? 0
       my.location = location ("class")
       echo "<inherit_local location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[local] ?
    for my.source.[local] as [local]
        if my.inherit = "overlay"
            my.existing = my.target->[local] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_local_item (my.existing, [local])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [local] before my.insert
                else
                    copy [local] to my.target
                endif
            else
                copy [local] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_local

function perform_inherit_header (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_header ? 0
       my.location = location ("class")
       echo "<inherit_header location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[header] ?
    for my.source.[header] as [header]
        if [header].export ? "default" <> "none"
        if my.inherit = "overlay"
            my.existing = my.target->[header] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_header_item (my.existing, [header])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert) & [header].export ? "default" <> "after"
                    copy [header] before my.insert
                else
                    copy [header] to my.target
                endif
            else
                if defined (my.insert) & [header].export ? "default" = "before"
                    copy [header] before my.insert
                else
                    copy [header] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_header

function perform_inherit_footer (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_footer ? 0
       my.location = location ("class")
       echo "<inherit_footer location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[footer] ?
    for my.source.[footer] as [footer]
        if [footer].export ? "default" <> "none"
        if my.inherit = "overlay"
            my.existing = my.target->[footer] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_footer_item (my.existing, [footer])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert) & [footer].export ? "default" <> "after"
                    copy [footer] before my.insert
                else
                    copy [footer] to my.target
                endif
            else
                if defined (my.insert) & [footer].export ? "default" = "before"
                    copy [footer] before my.insert
                else
                    copy [footer] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_footer

function perform_inherit_doc (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_doc ? 0
       my.location = location ("class")
       echo "<inherit_doc location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[doc] ?
    for my.source.[doc] as [doc]
        if my.inherit = "overlay"
            my.existing = my.target->[doc] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_doc_item (my.existing, [doc])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [doc] before my.insert
                else
                    copy [doc] to my.target
                endif
            else
                copy [doc] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_doc

function perform_inherit_import (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_import ? 0
       my.location = location ("class")
       echo "<inherit_import location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[import] ?
    for my.source.[import] as [import]
        my.existing = my.target->[import] (0.[class] ?= -1.[class]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_import_item (my.existing, [import])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [import] before my.insert
                else
                    copy [import] to my.target
                endif
            else
                copy [import] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_import

function perform_inherit_assert (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("class")
       echo "<inherit_assert location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[assert] ?
    for my.source.[assert] as [assert]
        my.existing = my.target->[assert] (0.[role] ?= -1.[role]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_assert_item (my.existing, [assert])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [assert] before my.insert
                else
                    copy [assert] to my.target
                endif
            else
                copy [assert] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_assert

function perform_inherit_data (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_data ? 0
       my.location = location ("class")
       echo "<inherit_data location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[data] ?
    for my.source.[data] as [data]
        my.existing = my.target->[data] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_data_item (my.existing, [data])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [data] before my.insert
                else
                    copy [data] to my.target
                endif
            else
                copy [data] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_data

function perform_inherit_invoke (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_invoke ? 0
       my.location = location ("class")
       echo "<inherit_invoke location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[invoke] ?
    for my.source.[invoke] as [invoke]
        if my.inherit = "overlay"
            my.existing = my.target->[invoke] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_invoke_item (my.existing, [invoke])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [invoke] before my.insert
                else
                    copy [invoke] to my.target
                endif
            else
                copy [invoke] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_invoke

function perform_inherit_todo (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_todo ? 0
       my.location = location ("class")
       echo "<inherit_todo location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[todo] ?
    for my.source.[todo] as [todo]
        if my.inherit = "overlay"
            my.existing = my.target->[todo] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_todo_item (my.existing, [todo])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [todo] before my.insert
                else
                    copy [todo] to my.target
                endif
            else
                copy [todo] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_todo

function perform_inherit_inherit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("class")
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inherit] ?
    for my.source.[inherit] as [inherit]
        my.existing = my.target->[inherit] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inherit_item (my.existing, [inherit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inherit] before my.insert
                else
                    copy [inherit] to my.target
                endif
            else
                copy [inherit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inherit

function perform_inherit_option (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("class")
       echo "<inherit_option location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[option] ?
    for my.source.[option] as [option]
        my.existing = my.target->[option] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_option_item (my.existing, [option])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [option] before my.insert
                else
                    copy [option] to my.target
                endif
            else
                copy [option] to my.target
            endif
        endif
            #   Export option to parent and all children
    if !defined (my.target.$(name))
        define_throughout (my.target, option)
    endif
    endfor
endfunction perform_inherit_option

function perform_inherit_icl_item (target, source)
    if switches.trace ? 0 | switches.trace_icl ? 0
       my.location = location ("class")
       echo "<inherit_icl_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        my.target.[before] ?= my.source.[before] ?
        my.target.[after] ?= my.source.[after] ?
        my.target.[copyright] ?= my.source.[copyright] ?
        my.target.[license] ?= my.source.[license] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[comment] ?= my.source.[comment] ?
        my.target.[version] ?= my.source.[version] ?
        my.target.[animate] ?= my.source.[animate] ?
        my.target.[import] ?= my.source.[import] ?
        my.target.[target] ?= my.source.[target] ?
        my.target.[base] ?= my.source.[base] ?
        my.target.[trace] ?= my.source.[trace] ?
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_data (my.target, my.source, , )
        perform_inherit_invoke (my.target, my.source, , )
        perform_inherit_public (my.target, my.source, "insert", )
        perform_inherit_private (my.target, my.source, "insert", )
        perform_inherit_context (my.target, my.source, "insert", )
        perform_inherit_doc (my.target, my.source, "none", )
        perform_inherit_import (my.target, my.source, , "after")
        perform_inherit_assert (my.target, my.source, , )
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_method (my.target, my.source, , "after")
        perform_inherit_todo (my.target, my.source, "insert", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_method_item (target, source)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("class")
       echo "<inherit_method_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[inherit] ?= my.source.[inherit] ?
        my.target.[export] ?= my.source.[export] ?
        my.target.[private] ?= my.source.[private] ?
        my.target.[cname] ?= my.source.[cname] ?
        my.target.[base] ?= my.source.[base] ?
        my.target.[return] ?= my.source.[return] ?
        my.target.[inline] ?= my.source.[inline] ?
        my.target.[trace] ?= my.source.[trace] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_argument (my.target, my.source, "overlay", )
        perform_inherit_animate (my.target, my.source, "overlay", )
        perform_inherit_dismiss (my.target, my.source, , )
        perform_inherit_declare (my.target, my.source, , )
        perform_inherit_local (my.target, my.source, "insert", )
        perform_inherit_header (my.target, my.source, "insert", )
        perform_inherit_footer (my.target, my.source, "insert", "after")
        perform_inherit_doc (my.target, my.source, "insert", )
        perform_inherit_invoke (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_argument_item (target, source)
    if switches.trace ? 0 | switches.trace_argument ? 0
       my.location = location ("class")
       echo "<inherit_argument_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[type] ?= my.source.[type] ?
        my.target.[pass] ?= my.source.[pass] ?
        my.target.[index] ?= my.source.[index] ?
        my.target.[default] ?= my.source.[default] ?
        my.target.[precalc] ?= my.source.[precalc] ?
        my.target.[animate] ?= my.source.[animate] ?
        my.target.[ref] ?= my.source.[ref] ?
        my.target.[export] ?= my.source.[export] ?
        perform_inherit_doc (my.target, my.source, "insert", )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_animate_item (target, source)
    if switches.trace ? 0 | switches.trace_animate ? 0
       my.location = location ("class")
       echo "<inherit_animate_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[format] ?= my.source.[format] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_dismiss_item (target, source)
    if switches.trace ? 0 | switches.trace_dismiss ? 0
       my.location = location ("class")
       echo "<inherit_dismiss_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[argument] ?= my.source.[argument] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_declare_item (target, source)
    if switches.trace ? 0 | switches.trace_declare ? 0
       my.location = location ("class")
       echo "<inherit_declare_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[type] ?= my.source.[type] ?
        my.target.[default] ?= my.source.[default] ?
        my.target.[precond] ?= my.source.[precond] ?
        my.target.[animate] ?= my.source.[animate] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_import_item (target, source)
    if switches.trace ? 0 | switches.trace_import ? 0
       my.location = location ("class")
       echo "<inherit_import_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[class] ?= my.source.[class] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_assert_item (target, source)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("class")
       echo "<inherit_assert_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_data_item (target, source)
    if switches.trace ? 0 | switches.trace_data ? 0
       my.location = location ("class")
       echo "<inherit_data_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_invoke_item (target, source)
    if switches.trace ? 0 | switches.trace_invoke ? 0
       my.location = location ("class")
       echo "<inherit_invoke_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[script] ?= my.source.[script] ?
        my.target.[phase] ?= my.source.[phase] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inherit_item (target, source)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("class")
       echo "<inherit_inherit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_option_item (target, source)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("class")
       echo "<inherit_option_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction



function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

#   'Preproc' engine for smt_object
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function preproc_icl ([icl])
    my.entity = my.[icl]
    my.[icl]._entity = "icl"
    my.[icl]._key = my.[icl].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_icl ? 0
       echo "<preproc_icl location = \"$(my.location)\""
    endif

    if my.icl = global.top
        my.icl.selfname = my.icl.name
        my.icl.selftype = my.icl.name + "_t"
        if defined (switches.target)
            my.icl.target = switches.target
        endif

        #   Parse the boom model
        my.string = env.get ("BOOM_MODEL") ? "release,st"
        while string.length (my.string) ?> 0
            my.index = string.locate (my.string, ",") ?
            if defined (my.index)
                if my.index > 0
                    my.icl.boom_$(string.substr (my.string, , my.index - 1)) = 1
                endif
                my.string = string.substr (my.string, my.index + 1)
            elsif string.length (my.string)
                my.icl.boom_$(my.string) = 1
                my.string =
            endif
        endwhile
    endif
    if defined (my.entity.role)
        global.have_role_$(my.entity.role) = 1
    endif
    for my.[icl].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[icl].[data] as [data]
        preproc_data ([data])
    endfor

    for my.[icl].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[icl].[event] as [event]
        preproc_event ([event])
    endfor

    for my.[icl].[public] as [public]
        preproc_public ([public])
    endfor

    for my.[icl].[private] as [private]
        preproc_private ([private])
    endfor

    for my.[icl].[context] as [context]
        preproc_context ([context])
    endfor

    for my.[icl].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[icl].[import] as [import]
        preproc_import ([import])
    endfor

    for my.[icl].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[icl].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[icl].[method] as [method]
        preproc_method ([method])
    endfor

    for my.[icl].[todo] as [todo]
        preproc_todo ([todo])
    endfor

    if !my.[icl].deleted ()
        my.[icl]._key = my.[icl].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_private ([private])
    my.entity = my.[private]
    my.[private]._entity = "private"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_private ? 0
       echo "<preproc_private location = \"$(my.location)\""
    endif

    for my.[private].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    if !my.[private].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_method ([method])
    my.entity = my.[method]
    my.[method]._entity = "method"
    my.[method]._key = my.[method].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<preproc_method location = \"$(my.location)\""
    endif

            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[method].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[method].[possess] as [possess]
        preproc_possess ([possess])
    endfor

    for my.[method].[release] as [release]
        preproc_release ([release])
    endfor

    for my.[method].[action] as [action]
        preproc_action ([action])
    endfor

    for my.[method].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    for my.[method].[animate] as [animate]
        preproc_animate ([animate])
    endfor

    for my.[method].[dismiss] as [dismiss]
        preproc_dismiss ([dismiss])
    endfor

    for my.[method].[declare] as [declare]
        preproc_declare ([declare])
    endfor

    for my.[method].[local] as [local]
        preproc_local ([local])
    endfor

    for my.[method].[header] as [header]
        preproc_header ([header])
    endfor

    for my.[method].[footer] as [footer]
        preproc_footer ([footer])
    endfor

    for my.[method].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[method].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    if !my.[method].deleted ()
        my.[method]._key = my.[method].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_possess ([possess])
    my.entity = my.[possess]
    my.[possess]._entity = "possess"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_possess ? 0
       echo "<preproc_possess location = \"$(my.location)\""
    endif

    if !my.[possess].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_release ([release])
    my.entity = my.[release]
    my.[release]._entity = "release"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_release ? 0
       echo "<preproc_release location = \"$(my.location)\""
    endif

    if !my.[release].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_action ([action])
    my.entity = my.[action]
    my.[action]._entity = "action"
    my.[action]._key = my.[action].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_action ? 0
       echo "<preproc_action location = \"$(my.location)\""
    endif

    if !my.[action].deleted ()
        my.[action]._key = my.[action].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_event ([event])
    my.entity = my.[event]
    my.[event]._entity = "event"
    my.[event]._key = my.[event].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_event ? 0
       echo "<preproc_event location = \"$(my.location)\""
    endif

    for my.[event].[action] as [action]
        preproc_action ([action])
    endfor

    if !my.[event].deleted ()
        my.[event]._key = my.[event].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_public ([public])
    my.entity = my.[public]
    my.[public]._entity = "public"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_public ? 0
       echo "<preproc_public location = \"$(my.location)\""
    endif

    for my.[public].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    if !my.[public].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_context ([context])
    my.entity = my.[context]
    my.[context]._entity = "context"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<preproc_context location = \"$(my.location)\""
    endif

    for my.[context].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    if !my.[context].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_argument ([argument])
    my.entity = my.[argument]
    my.[argument]._entity = "argument"
    my.[argument]._key = my.[argument].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_argument ? 0
       echo "<preproc_argument location = \"$(my.location)\""
    endif

    for my.[argument].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    if !my.[argument].deleted ()
        my.[argument]._key = my.[argument].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_animate ([animate])
    my.entity = my.[animate]
    my.[animate]._entity = "animate"
    my.[animate]._key = my.[animate].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_animate ? 0
       echo "<preproc_animate location = \"$(my.location)\""
    endif

    if !my.[animate].deleted ()
        my.[animate]._key = my.[animate].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_dismiss ([dismiss])
    my.entity = my.[dismiss]
    my.[dismiss]._entity = "dismiss"
    my.[dismiss]._key = my.[dismiss].[argument] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_dismiss ? 0
       echo "<preproc_dismiss location = \"$(my.location)\""
    endif

    if !my.[dismiss].deleted ()
        my.[dismiss]._key = my.[dismiss].[argument] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_declare ([declare])
    my.entity = my.[declare]
    my.[declare]._entity = "declare"
    my.[declare]._key = my.[declare].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_declare ? 0
       echo "<preproc_declare location = \"$(my.location)\""
    endif

    if !my.[declare].deleted ()
        my.[declare]._key = my.[declare].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_local ([local])
    my.entity = my.[local]
    my.[local]._entity = "local"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<preproc_local location = \"$(my.location)\""
    endif

    for my.[local].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    if !my.[local].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_header ([header])
    my.entity = my.[header]
    my.[header]._entity = "header"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<preproc_header location = \"$(my.location)\""
    endif

    if !my.[header].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_footer ([footer])
    my.entity = my.[footer]
    my.[footer]._entity = "footer"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<preproc_footer location = \"$(my.location)\""
    endif

    if !my.[footer].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_doc ([doc])
    my.entity = my.[doc]
    my.[doc]._entity = "doc"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<preproc_doc location = \"$(my.location)\""
    endif

    if !my.[doc].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_import ([import])
    my.entity = my.[import]
    my.[import]._entity = "import"
    my.[import]._key = my.[import].[class] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_import ? 0
       echo "<preproc_import location = \"$(my.location)\""
    endif

    if !my.[import].deleted ()
        my.[import]._key = my.[import].[class] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_assert ([assert])
    my.entity = my.[assert]
    my.[assert]._entity = "assert"
    my.[assert]._key = my.[assert].[role] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<preproc_assert location = \"$(my.location)\""
    endif

    if !my.[assert].deleted ()
        my.[assert]._key = my.[assert].[role] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_data ([data])
    my.entity = my.[data]
    my.[data]._entity = "data"
    my.[data]._key = my.[data].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_data ? 0
       echo "<preproc_data location = \"$(my.location)\""
    endif

    if !my.[data].deleted ()
        my.[data]._key = my.[data].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_invoke ([invoke])
    my.entity = my.[invoke]
    my.[invoke]._entity = "invoke"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_invoke ? 0
       echo "<preproc_invoke location = \"$(my.location)\""
    endif

    if my.invoke.phase ? "preproc" = "preproc"
#       if ! defined (target)
#           save icl
#       endif
        [gsl].exec (my.invoke.?'', 0)
        if defined (.script)
            [gsl].include (my.invoke.script + ".gsl", 0)
        endif
        my.invoke.delete ()             /*  To avoid inheritance             */
    endif
    if !my.[invoke].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_todo ([todo])
    my.entity = my.[todo]
    my.[todo]._entity = "todo"
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<preproc_todo location = \"$(my.location)\""
    endif

    if !my.[todo].deleted ()
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_inherit ([inherit])
    my.entity = my.[inherit]
    my.[inherit]._entity = "inherit"
    my.[inherit]._key = my.[inherit].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<preproc_inherit location = \"$(my.location)\""
    endif

        #   Fudge for backwards compatibility  
        inherit.name ?= inherit.$(name($(-1))) ?
        if defined (inherit.name)
            inherit.name = gsl.exec (inherit.name, 1)
        endif
        inherit._key ?= inherit.name ?
    if !defined (my.[inherit].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[inherit].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[inherit].deleted ()
        my.[inherit]._key = my.[inherit].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction

function preproc_option ([option])
    my.entity = my.[option]
    my.[option]._entity = "option"
    my.[option]._key = my.[option].[name] ?
    my.entity._icl ?= [icl]._key ?
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<preproc_option location = \"$(my.location)\""
    endif

    if !defined (my.[option].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[option].[value])
        preproc_error ("Required attribute 'value' not defined$(my.location)")
    endif
    #   Export option to parent and all children
    my.parent = my.option.parent ()
    if defined (my.parent.$(my.option.name)) & my.parent.$(my.option.name) <> my.option.value
        preproc_error ("Option '$(my.option.name)' is already defined in $(name(my.parent)): $(my.parent._key?)")
    else
        define_throughout (my.parent, my.option)
    endif
    if !my.[option].deleted ()
        my.[option]._key = my.[option].[name] ?
        my.entity._icl ?= [icl]._key ?
    endif
endfunction


function preproc_error (message)
    echo (my.message)
    global.errno = 1
endfunction

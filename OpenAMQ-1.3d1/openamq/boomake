#!/bin/sh
#
#   Boom builder for OpenAMQ 1.3d1
#   Generated by iMatix Boom from product.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [OpenAMQ]: $* - stop" 1>&2
    else
        echo "boom E: [OpenAMQ]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [OpenAMQ]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="1.3d1"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,st on all platforms except Linux and Solaris.
#
if [ -s /usr/bin/uname ]; then BOOM_PLATFORM=`/usr/bin/uname`; fi
if [ -s /bin/uname ];     then BOOM_PLATFORM=`/bin/uname`;     fi
if [ -z "$BOOM_MODEL" ]; then
    if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
        BOOM_MODEL=release,mt
    else
        BOOM_MODEL=release,st
    fi
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
        if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
            BOOM_MODEL_MT=1
            BOOM_MODEL="$BOOM_MODEL,mt"
        else
            BOOM_MODEL_ST=1
            BOOM_MODEL="$BOOM_MODEL,st"
        fi
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where OpenAMQ should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# ----------------------------   ALLGEN PROJECTS   ----------------------------

a_allgen_projects() {
:
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake allgen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake allgen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake allgen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake allgen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
}

# --------------------   BUILD PRODUCT INSTALL PACKAGES   ---------------------

a_build_product_install_packages() {
:
    carp "Building OpenAMQ install..."
    rm -rf _install
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake -install ../_install install || croak
    else
        carp "Project has not been built - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake -install ../_install install || croak
    else
        carp "Project has not been built - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake -install ../_install install || croak
    else
        carp "Project has not been built - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake -install ../_install install || croak
    else
        carp "Project has not been built - boomake is missing"
    fi
    cd $PUSHDIR
    mv _install OpenAMQ-$MY_VERSION
    [ "$BOOM_TRACE" ] && echo "pkg_tgz OpenAMQ-$MY_VERSION"
    pkg_tgz OpenAMQ-$MY_VERSION || croak "\"pkg_tgz OpenAMQ-$MY_VERSION\" failed"
    rm -rf OpenAMQ-$MY_VERSION
}

# ---------------------   BUILD PRODUCT SOURCE PACKAGES   ---------------------

a_build_product_source_packages() {
:
    rm -f _package.lst
    if [ -f "project.pdl" ]; then
        echo project.pdl>>_package.lst
    fi
    if [ -f "readme.txt" ]; then
        echo readme.txt>>_package.lst
    fi
    if [ -f "release.txt" ]; then
        echo release.txt>>_package.lst
    fi
    if [ -f "contrib.txt" ]; then
        echo contrib.txt>>_package.lst
    fi
    if [ -f "stamp_generate" ]; then
        echo stamp_generate>>_package.lst
    fi
    if [ -f "configure" ]; then
        echo configure>>_package.lst
    fi
    if [ -f "Makefile.unix" ]; then
        echo Makefile.unix>>_package.lst
    fi
    if [ -f "boomake" ]; then
        echo boomake>>_package.lst
    fi
    if [ -f "configure.bat" ]; then
        echo configure.bat>>_package.lst
    fi
    if [ -f "Makefile.win32" ]; then
        echo Makefile.win32>>_package.lst
    fi
    if [ -f "boomake.bat" ]; then
        echo boomake.bat>>_package.lst
    fi
    PUSHDIR=`pwd`
    cd common
    cd $PUSHDIR
    if [ -f "common/version.h" ]; then
        echo common/version.h>>_package.lst
    fi
    if [ -f "common/amq.asl" ]; then
        echo common/amq.asl>>_package.lst
    fi
    if [ -f "common/amq_exchange.asl" ]; then
        echo common/amq_exchange.asl>>_package.lst
    fi
    if [ -f "common/amq_queue.asl" ]; then
        echo common/amq_queue.asl>>_package.lst
    fi
    if [ -f "common/amq_basic.asl" ]; then
        echo common/amq_basic.asl>>_package.lst
    fi
    if [ -f "common/amq_pal.xnf" ]; then
        echo common/amq_pal.xnf>>_package.lst
    fi
    if [ -f "common/amq_pal_stdc.gsl" ]; then
        echo common/amq_pal_stdc.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_codegen.gsl" ]; then
        echo common/amq_pal_codegen.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_gen.gsl" ]; then
        echo common/amq_pal_gen.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_inherit.gsl" ]; then
        echo common/amq_pal_inherit.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_parse.gsl" ]; then
        echo common/amq_pal_parse.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_preproc.gsl" ]; then
        echo common/amq_pal_preproc.gsl>>_package.lst
    fi
    if [ -f "common/amq_sequence.icl" ]; then
        echo common/amq_sequence.icl>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.icl" ]; then
        echo common/amq_sequence_table.icl>>_package.lst
    fi
    if [ -f "common/amq_constants.icl" ]; then
        echo common/amq_constants.icl>>_package.lst
    fi
    if [ -f "common/amq_content_basic.icl" ]; then
        echo common/amq_content_basic.icl>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.icl" ]; then
        echo common/amq_content_basic_list.icl>>_package.lst
    fi
    if [ -f "common/prelude.pdl" ]; then
        echo common/prelude.pdl>>_package.lst
    fi
    if [ -f "common/license.gpl" ]; then
        echo common/license.gpl>>_package.lst
    fi
    if [ -f "common/project.pdl" ]; then
        echo common/project.pdl>>_package.lst
    fi
    if [ -f "common/readme.txt" ]; then
        echo common/readme.txt>>_package.lst
    fi
    if [ -f "common/amq_sequence_test.c" ]; then
        echo common/amq_sequence_test.c>>_package.lst
    fi
    if [ -f "common/amq_sequence.h" ]; then
        echo common/amq_sequence.h>>_package.lst
    fi
    if [ -f "common/amq_sequence.c" ]; then
        echo common/amq_sequence.c>>_package.lst
    fi
    if [ -f "common/amq_sequence.hpp" ]; then
        echo common/amq_sequence.hpp>>_package.lst
    fi
    if [ -f "common/amq_sequence.cpp" ]; then
        echo common/amq_sequence.cpp>>_package.lst
    fi
    if [ -f "common/amq_sequence_table_test.c" ]; then
        echo common/amq_sequence_table_test.c>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.h" ]; then
        echo common/amq_sequence_table.h>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.c" ]; then
        echo common/amq_sequence_table.c>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.hpp" ]; then
        echo common/amq_sequence_table.hpp>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.cpp" ]; then
        echo common/amq_sequence_table.cpp>>_package.lst
    fi
    if [ -f "common/amq_constants.h" ]; then
        echo common/amq_constants.h>>_package.lst
    fi
    if [ -f "common/amq_constants.c" ]; then
        echo common/amq_constants.c>>_package.lst
    fi
    if [ -f "common/amq_constants.hpp" ]; then
        echo common/amq_constants.hpp>>_package.lst
    fi
    if [ -f "common/amq_constants.cpp" ]; then
        echo common/amq_constants.cpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_test.c" ]; then
        echo common/amq_content_basic_test.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic.h" ]; then
        echo common/amq_content_basic.h>>_package.lst
    fi
    if [ -f "common/amq_content_basic.c" ]; then
        echo common/amq_content_basic.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic.hpp" ]; then
        echo common/amq_content_basic.hpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic.cpp" ]; then
        echo common/amq_content_basic.cpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list_test.c" ]; then
        echo common/amq_content_basic_list_test.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.h" ]; then
        echo common/amq_content_basic_list.h>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.c" ]; then
        echo common/amq_content_basic_list.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.hpp" ]; then
        echo common/amq_content_basic_list.hpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.cpp" ]; then
        echo common/amq_content_basic_list.cpp>>_package.lst
    fi
    if [ -f "common/stamp_generate" ]; then
        echo common/stamp_generate>>_package.lst
    fi
    if [ -f "common/configure" ]; then
        echo common/configure>>_package.lst
    fi
    if [ -f "common/Makefile.unix" ]; then
        echo common/Makefile.unix>>_package.lst
    fi
    if [ -f "common/boomake" ]; then
        echo common/boomake>>_package.lst
    fi
    if [ -f "common/configure.bat" ]; then
        echo common/configure.bat>>_package.lst
    fi
    if [ -f "common/Makefile.win32" ]; then
        echo common/Makefile.win32>>_package.lst
    fi
    if [ -f "common/boomake.bat" ]; then
        echo common/boomake.bat>>_package.lst
    fi
    PUSHDIR=`pwd`
    cd clients
    cd $PUSHDIR
    if [ -f "clients/version.h" ]; then
        echo clients/version.h>>_package.lst
    fi
    if [ -f "clients/wireapi.h" ]; then
        echo clients/wireapi.h>>_package.lst
    fi
    if [ -f "clients/amq_client.c" ]; then
        echo clients/amq_client.c>>_package.lst
    fi
    if [ -f "clients/amq_client.asl" ]; then
        echo clients/amq_client.asl>>_package.lst
    fi
    if [ -f "clients/amq_client_method.icl" ]; then
        echo clients/amq_client_method.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_agent.smt" ]; then
        echo clients/amq_client_agent.smt>>_package.lst
    fi
    if [ -f "clients/amq_client_config.opf" ]; then
        echo clients/amq_client_config.opf>>_package.lst
    fi
    if [ -f "clients/amq_client_config.icl" ]; then
        echo clients/amq_client_config.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_classes.icl" ]; then
        echo clients/amq_client_classes.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_connection.icl" ]; then
        echo clients/amq_client_connection.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_session.icl" ]; then
        echo clients/amq_client_session.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_channel.icl" ]; then
        echo clients/amq_client_channel.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table.icl" ]; then
        echo clients/amq_client_channel_table.icl>>_package.lst
    fi
    if [ -f "clients/amq_client_chrono.pal" ]; then
        echo clients/amq_client_chrono.pal>>_package.lst
    fi
    if [ -f "clients/prelude.pdl" ]; then
        echo clients/prelude.pdl>>_package.lst
    fi
    if [ -f "clients/license.gpl" ]; then
        echo clients/license.gpl>>_package.lst
    fi
    if [ -f "clients/project.pdl" ]; then
        echo clients/project.pdl>>_package.lst
    fi
    if [ -f "clients/readme.txt" ]; then
        echo clients/readme.txt>>_package.lst
    fi
    if [ -f "clients/amq_client_method_test.c" ]; then
        echo clients/amq_client_method_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_method.h" ]; then
        echo clients/amq_client_method.h>>_package.lst
    fi
    if [ -f "clients/amq_client_method.c" ]; then
        echo clients/amq_client_method.c>>_package.lst
    fi
    if [ -f "clients/amq_client_method.hpp" ]; then
        echo clients/amq_client_method.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_method.cpp" ]; then
        echo clients/amq_client_method.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_agent.h" ]; then
        echo clients/amq_client_agent.h>>_package.lst
    fi
    if [ -f "clients/amq_client_agent.c" ]; then
        echo clients/amq_client_agent.c>>_package.lst
    fi
    if [ -f "clients/amq_client_agent.hpp" ]; then
        echo clients/amq_client_agent.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_config_test.c" ]; then
        echo clients/amq_client_config_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_config.h" ]; then
        echo clients/amq_client_config.h>>_package.lst
    fi
    if [ -f "clients/amq_client_config.c" ]; then
        echo clients/amq_client_config.c>>_package.lst
    fi
    if [ -f "clients/amq_client_config.hpp" ]; then
        echo clients/amq_client_config.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_config.cpp" ]; then
        echo clients/amq_client_config.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_classes.h" ]; then
        echo clients/amq_client_classes.h>>_package.lst
    fi
    if [ -f "clients/amq_client_classes.c" ]; then
        echo clients/amq_client_classes.c>>_package.lst
    fi
    if [ -f "clients/amq_client_classes.hpp" ]; then
        echo clients/amq_client_classes.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_classes.cpp" ]; then
        echo clients/amq_client_classes.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_connection_test.c" ]; then
        echo clients/amq_client_connection_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_connection.h" ]; then
        echo clients/amq_client_connection.h>>_package.lst
    fi
    if [ -f "clients/amq_client_connection.c" ]; then
        echo clients/amq_client_connection.c>>_package.lst
    fi
    if [ -f "clients/amq_client_connection.hpp" ]; then
        echo clients/amq_client_connection.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_connection.cpp" ]; then
        echo clients/amq_client_connection.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_session_test.c" ]; then
        echo clients/amq_client_session_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_session.h" ]; then
        echo clients/amq_client_session.h>>_package.lst
    fi
    if [ -f "clients/amq_client_session.c" ]; then
        echo clients/amq_client_session.c>>_package.lst
    fi
    if [ -f "clients/amq_client_session.hpp" ]; then
        echo clients/amq_client_session.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_session.cpp" ]; then
        echo clients/amq_client_session.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_test.c" ]; then
        echo clients/amq_client_channel_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_channel.h" ]; then
        echo clients/amq_client_channel.h>>_package.lst
    fi
    if [ -f "clients/amq_client_channel.c" ]; then
        echo clients/amq_client_channel.c>>_package.lst
    fi
    if [ -f "clients/amq_client_channel.hpp" ]; then
        echo clients/amq_client_channel.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_channel.cpp" ]; then
        echo clients/amq_client_channel.cpp>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table_test.c" ]; then
        echo clients/amq_client_channel_table_test.c>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table.h" ]; then
        echo clients/amq_client_channel_table.h>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table.c" ]; then
        echo clients/amq_client_channel_table.c>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table.hpp" ]; then
        echo clients/amq_client_channel_table.hpp>>_package.lst
    fi
    if [ -f "clients/amq_client_channel_table.cpp" ]; then
        echo clients/amq_client_channel_table.cpp>>_package.lst
    fi
    if [ -f "clients/stamp_generate" ]; then
        echo clients/stamp_generate>>_package.lst
    fi
    if [ -f "clients/configure" ]; then
        echo clients/configure>>_package.lst
    fi
    if [ -f "clients/Makefile.unix" ]; then
        echo clients/Makefile.unix>>_package.lst
    fi
    if [ -f "clients/boomake" ]; then
        echo clients/boomake>>_package.lst
    fi
    if [ -f "clients/configure.bat" ]; then
        echo clients/configure.bat>>_package.lst
    fi
    if [ -f "clients/Makefile.win32" ]; then
        echo clients/Makefile.win32>>_package.lst
    fi
    if [ -f "clients/boomake.bat" ]; then
        echo clients/boomake.bat>>_package.lst
    fi
    PUSHDIR=`pwd`
    cd server
    cd $PUSHDIR
    if [ -f "server/gpl_output" ]; then
        echo server/gpl_output>>_package.lst
    fi
    if [ -f "server/version.h" ]; then
        echo server/version.h>>_package.lst
    fi
    if [ -f "server/amq_server.asl" ]; then
        echo server/amq_server.asl>>_package.lst
    fi
    if [ -f "server/amq_server.c" ]; then
        echo server/amq_server.c>>_package.lst
    fi
    if [ -f "server/amq_server_main.inc" ]; then
        echo server/amq_server_main.inc>>_package.lst
    fi
    if [ -f "server/amq_server_config.opf" ]; then
        echo server/amq_server_config.opf>>_package.lst
    fi
    if [ -f "server/amq_server_config.icl" ]; then
        echo server/amq_server_config.icl>>_package.lst
    fi
    if [ -f "server/amq_server_agent.smt" ]; then
        echo server/amq_server_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_server_classes.icl" ]; then
        echo server/amq_server_classes.icl>>_package.lst
    fi
    if [ -f "server/amq_server_connection.icl" ]; then
        echo server/amq_server_connection.icl>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table.icl" ]; then
        echo server/amq_server_connection_table.icl>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list.icl" ]; then
        echo server/amq_server_connection_list.icl>>_package.lst
    fi
    if [ -f "server/amq_server_channel.icl" ]; then
        echo server/amq_server_channel.icl>>_package.lst
    fi
    if [ -f "server/amq_server_channel_agent.smt" ]; then
        echo server/amq_server_channel_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table.icl" ]; then
        echo server/amq_server_channel_table.icl>>_package.lst
    fi
    if [ -f "server/amq_server_resource.rc" ]; then
        echo server/amq_server_resource.rc>>_package.lst
    fi
    if [ -f "server/amq_server_resource.icl" ]; then
        echo server/amq_server_resource.icl>>_package.lst
    fi
    if [ -f "server/amq_broker.icl" ]; then
        echo server/amq_broker.icl>>_package.lst
    fi
    if [ -f "server/amq_broker_agent.smt" ]; then
        echo server/amq_broker_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_peering.icl" ]; then
        echo server/amq_peering.icl>>_package.lst
    fi
    if [ -f "server/amq_peering_agent.smt" ]; then
        echo server/amq_peering_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_peer.asl" ]; then
        echo server/amq_peer.asl>>_package.lst
    fi
    if [ -f "server/amq_peer_method.icl" ]; then
        echo server/amq_peer_method.icl>>_package.lst
    fi
    if [ -f "server/amq_peer_config.opf" ]; then
        echo server/amq_peer_config.opf>>_package.lst
    fi
    if [ -f "server/amq_peer_config.icl" ]; then
        echo server/amq_peer_config.icl>>_package.lst
    fi
    if [ -f "server/amq_peer_config.txt" ]; then
        echo server/amq_peer_config.txt>>_package.lst
    fi
    if [ -f "server/amq_peer_agent.smt" ]; then
        echo server/amq_peer_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_vhost.icl" ]; then
        echo server/amq_vhost.icl>>_package.lst
    fi
    if [ -f "server/amq_vhost_agent.smt" ]; then
        echo server/amq_vhost_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.opf" ]; then
        echo server/amq_vhost_config.opf>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.icl" ]; then
        echo server/amq_vhost_config.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange.icl" ]; then
        echo server/amq_exchange.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_table.icl" ]; then
        echo server/amq_exchange_table.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost.icl" ]; then
        echo server/amq_exchange_by_vhost.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_agent.smt" ]; then
        echo server/amq_exchange_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_exchange_base.icl" ]; then
        echo server/amq_exchange_base.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_system.icl" ]; then
        echo server/amq_exchange_system.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout.icl" ]; then
        echo server/amq_exchange_fanout.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct.icl" ]; then
        echo server/amq_exchange_direct.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic.icl" ]; then
        echo server/amq_exchange_topic.icl>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers.icl" ]; then
        echo server/amq_exchange_headers.icl>>_package.lst
    fi
    if [ -f "server/amq_binding.icl" ]; then
        echo server/amq_binding.icl>>_package.lst
    fi
    if [ -f "server/amq_binding_list.icl" ]; then
        echo server/amq_binding_list.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list.icl" ]; then
        echo server/amq_queue_bindings_list.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table.icl" ]; then
        echo server/amq_queue_bindings_list_table.icl>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt.icl" ]; then
        echo server/amq_binding_mgt.icl>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt_agent.smt" ]; then
        echo server/amq_binding_mgt_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_hitset.icl" ]; then
        echo server/amq_hitset.icl>>_package.lst
    fi
    if [ -f "server/amq_index.icl" ]; then
        echo server/amq_index.icl>>_package.lst
    fi
    if [ -f "server/amq_index_hash.icl" ]; then
        echo server/amq_index_hash.icl>>_package.lst
    fi
    if [ -f "server/amq_index_array.icl" ]; then
        echo server/amq_index_array.icl>>_package.lst
    fi
    if [ -f "server/amq_queue.icl" ]; then
        echo server/amq_queue.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_table.icl" ]; then
        echo server/amq_queue_table.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost.icl" ]; then
        echo server/amq_queue_by_vhost.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_list.icl" ]; then
        echo server/amq_queue_list.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_agent.smt" ]; then
        echo server/amq_queue_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_queue_basic.icl" ]; then
        echo server/amq_queue_basic.icl>>_package.lst
    fi
    if [ -f "server/amq_connection.icl" ]; then
        echo server/amq_connection.icl>>_package.lst
    fi
    if [ -f "server/amq_connection_agent.smt" ]; then
        echo server/amq_connection_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker.icl" ]; then
        echo server/amq_connection_by_broker.icl>>_package.lst
    fi
    if [ -f "server/amq_consumer.icl" ]; then
        echo server/amq_consumer.icl>>_package.lst
    fi
    if [ -f "server/amq_consumer_table.icl" ]; then
        echo server/amq_consumer_table.icl>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue.icl" ]; then
        echo server/amq_consumer_by_queue.icl>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel.icl" ]; then
        echo server/amq_consumer_by_channel.icl>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic.icl" ]; then
        echo server/amq_consumer_basic.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_connection.icl" ]; then
        echo server/amq_queue_connection.icl>>_package.lst
    fi
    if [ -f "server/amq_queue_connection_agent.smt" ]; then
        echo server/amq_queue_connection_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_connection_queue.icl" ]; then
        echo server/amq_connection_queue.icl>>_package.lst
    fi
    if [ -f "server/amq_connection_queue_agent.smt" ]; then
        echo server/amq_connection_queue_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_server_method.icl" ]; then
        echo server/amq_server_method.icl>>_package.lst
    fi
    if [ -f "server/amq_server_base.cfg" ]; then
        echo server/amq_server_base.cfg>>_package.lst
    fi
    if [ -f "server/amq_federation.icl" ]; then
        echo server/amq_federation.icl>>_package.lst
    fi
    if [ -f "server/amq_federation_agent.smt" ]; then
        echo server/amq_federation_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_failover.icl" ]; then
        echo server/amq_failover.icl>>_package.lst
    fi
    if [ -f "server/amq_failover_agent.smt" ]; then
        echo server/amq_failover_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_lease.icl" ]; then
        echo server/amq_lease.icl>>_package.lst
    fi
    if [ -f "server/amq_lease_table.icl" ]; then
        echo server/amq_lease_table.icl>>_package.lst
    fi
    if [ -f "server/amq_console.icl" ]; then
        echo server/amq_console.icl>>_package.lst
    fi
    if [ -f "server/amq_console_agent.smt" ]; then
        echo server/amq_console_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_console_object.icl" ]; then
        echo server/amq_console_object.icl>>_package.lst
    fi
    if [ -f "server/amq_console_class.icl" ]; then
        echo server/amq_console_class.icl>>_package.lst
    fi
    if [ -f "server/amq_console_schema.gsl" ]; then
        echo server/amq_console_schema.gsl>>_package.lst
    fi
    if [ -f "server/amq_console_schema.cml" ]; then
        echo server/amq_console_schema.cml>>_package.lst
    fi
    if [ -f "server/amq_console_schema.xml" ]; then
        echo server/amq_console_schema.xml>>_package.lst
    fi
    if [ -f "server/amq_console_config.gsl" ]; then
        echo server/amq_console_config.gsl>>_package.lst
    fi
    if [ -f "server/amq_console_config.icl" ]; then
        echo server/amq_console_config.icl>>_package.lst
    fi
    if [ -f "server/amq_console_config_agent.smt" ]; then
        echo server/amq_console_config_agent.smt>>_package.lst
    fi
    if [ -f "server/amq_cml.icl" ]; then
        echo server/amq_cml.icl>>_package.lst
    fi
    if [ -f "server/prelude.pdl" ]; then
        echo server/prelude.pdl>>_package.lst
    fi
    if [ -f "server/license.gpl" ]; then
        echo server/license.gpl>>_package.lst
    fi
    if [ -f "server/project.pdl" ]; then
        echo server/project.pdl>>_package.lst
    fi
    if [ -f "server/readme.txt" ]; then
        echo server/readme.txt>>_package.lst
    fi
    if [ -f "server/amq_server_config_test.c" ]; then
        echo server/amq_server_config_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_config.h" ]; then
        echo server/amq_server_config.h>>_package.lst
    fi
    if [ -f "server/amq_server_config.c" ]; then
        echo server/amq_server_config.c>>_package.lst
    fi
    if [ -f "server/amq_server_config.hpp" ]; then
        echo server/amq_server_config.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_config.cpp" ]; then
        echo server/amq_server_config.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_agent.h" ]; then
        echo server/amq_server_agent.h>>_package.lst
    fi
    if [ -f "server/amq_server_agent.c" ]; then
        echo server/amq_server_agent.c>>_package.lst
    fi
    if [ -f "server/amq_server_agent.hpp" ]; then
        echo server/amq_server_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_classes.h" ]; then
        echo server/amq_server_classes.h>>_package.lst
    fi
    if [ -f "server/amq_server_classes.c" ]; then
        echo server/amq_server_classes.c>>_package.lst
    fi
    if [ -f "server/amq_server_classes.hpp" ]; then
        echo server/amq_server_classes.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_classes.cpp" ]; then
        echo server/amq_server_classes.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection_test.c" ]; then
        echo server/amq_server_connection_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection.h" ]; then
        echo server/amq_server_connection.h>>_package.lst
    fi
    if [ -f "server/amq_server_connection.c" ]; then
        echo server/amq_server_connection.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection.hpp" ]; then
        echo server/amq_server_connection.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection.cpp" ]; then
        echo server/amq_server_connection.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table_test.c" ]; then
        echo server/amq_server_connection_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table.h" ]; then
        echo server/amq_server_connection_table.h>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table.c" ]; then
        echo server/amq_server_connection_table.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table.hpp" ]; then
        echo server/amq_server_connection_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection_table.cpp" ]; then
        echo server/amq_server_connection_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list_test.c" ]; then
        echo server/amq_server_connection_list_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list.h" ]; then
        echo server/amq_server_connection_list.h>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list.c" ]; then
        echo server/amq_server_connection_list.c>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list.hpp" ]; then
        echo server/amq_server_connection_list.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_connection_list.cpp" ]; then
        echo server/amq_server_connection_list.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_channel_test.c" ]; then
        echo server/amq_server_channel_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_channel.h" ]; then
        echo server/amq_server_channel.h>>_package.lst
    fi
    if [ -f "server/amq_server_channel.c" ]; then
        echo server/amq_server_channel.c>>_package.lst
    fi
    if [ -f "server/amq_server_channel.hpp" ]; then
        echo server/amq_server_channel.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_channel.cpp" ]; then
        echo server/amq_server_channel.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_channel_agent.h" ]; then
        echo server/amq_server_channel_agent.h>>_package.lst
    fi
    if [ -f "server/amq_server_channel_agent.c" ]; then
        echo server/amq_server_channel_agent.c>>_package.lst
    fi
    if [ -f "server/amq_server_channel_agent.hpp" ]; then
        echo server/amq_server_channel_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table_test.c" ]; then
        echo server/amq_server_channel_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table.h" ]; then
        echo server/amq_server_channel_table.h>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table.c" ]; then
        echo server/amq_server_channel_table.c>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table.hpp" ]; then
        echo server/amq_server_channel_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_channel_table.cpp" ]; then
        echo server/amq_server_channel_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_server_resource_test.c" ]; then
        echo server/amq_server_resource_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_resource.h" ]; then
        echo server/amq_server_resource.h>>_package.lst
    fi
    if [ -f "server/amq_server_resource.c" ]; then
        echo server/amq_server_resource.c>>_package.lst
    fi
    if [ -f "server/amq_server_resource.hpp" ]; then
        echo server/amq_server_resource.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_resource.cpp" ]; then
        echo server/amq_server_resource.cpp>>_package.lst
    fi
    if [ -f "server/amq_broker_test.c" ]; then
        echo server/amq_broker_test.c>>_package.lst
    fi
    if [ -f "server/amq_broker.h" ]; then
        echo server/amq_broker.h>>_package.lst
    fi
    if [ -f "server/amq_broker.c" ]; then
        echo server/amq_broker.c>>_package.lst
    fi
    if [ -f "server/amq_broker.hpp" ]; then
        echo server/amq_broker.hpp>>_package.lst
    fi
    if [ -f "server/amq_broker.cpp" ]; then
        echo server/amq_broker.cpp>>_package.lst
    fi
    if [ -f "server/amq_broker_agent.h" ]; then
        echo server/amq_broker_agent.h>>_package.lst
    fi
    if [ -f "server/amq_broker_agent.c" ]; then
        echo server/amq_broker_agent.c>>_package.lst
    fi
    if [ -f "server/amq_broker_agent.hpp" ]; then
        echo server/amq_broker_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_peering_test.c" ]; then
        echo server/amq_peering_test.c>>_package.lst
    fi
    if [ -f "server/amq_peering.h" ]; then
        echo server/amq_peering.h>>_package.lst
    fi
    if [ -f "server/amq_peering.c" ]; then
        echo server/amq_peering.c>>_package.lst
    fi
    if [ -f "server/amq_peering.hpp" ]; then
        echo server/amq_peering.hpp>>_package.lst
    fi
    if [ -f "server/amq_peering.cpp" ]; then
        echo server/amq_peering.cpp>>_package.lst
    fi
    if [ -f "server/amq_peering_agent.h" ]; then
        echo server/amq_peering_agent.h>>_package.lst
    fi
    if [ -f "server/amq_peering_agent.c" ]; then
        echo server/amq_peering_agent.c>>_package.lst
    fi
    if [ -f "server/amq_peering_agent.hpp" ]; then
        echo server/amq_peering_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_peer_method_test.c" ]; then
        echo server/amq_peer_method_test.c>>_package.lst
    fi
    if [ -f "server/amq_peer_method.h" ]; then
        echo server/amq_peer_method.h>>_package.lst
    fi
    if [ -f "server/amq_peer_method.c" ]; then
        echo server/amq_peer_method.c>>_package.lst
    fi
    if [ -f "server/amq_peer_method.hpp" ]; then
        echo server/amq_peer_method.hpp>>_package.lst
    fi
    if [ -f "server/amq_peer_method.cpp" ]; then
        echo server/amq_peer_method.cpp>>_package.lst
    fi
    if [ -f "server/amq_peer_config_test.c" ]; then
        echo server/amq_peer_config_test.c>>_package.lst
    fi
    if [ -f "server/amq_peer_config.h" ]; then
        echo server/amq_peer_config.h>>_package.lst
    fi
    if [ -f "server/amq_peer_config.c" ]; then
        echo server/amq_peer_config.c>>_package.lst
    fi
    if [ -f "server/amq_peer_config.hpp" ]; then
        echo server/amq_peer_config.hpp>>_package.lst
    fi
    if [ -f "server/amq_peer_config.cpp" ]; then
        echo server/amq_peer_config.cpp>>_package.lst
    fi
    if [ -f "server/amq_peer_agent.h" ]; then
        echo server/amq_peer_agent.h>>_package.lst
    fi
    if [ -f "server/amq_peer_agent.c" ]; then
        echo server/amq_peer_agent.c>>_package.lst
    fi
    if [ -f "server/amq_peer_agent.hpp" ]; then
        echo server/amq_peer_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_vhost_test.c" ]; then
        echo server/amq_vhost_test.c>>_package.lst
    fi
    if [ -f "server/amq_vhost.h" ]; then
        echo server/amq_vhost.h>>_package.lst
    fi
    if [ -f "server/amq_vhost.c" ]; then
        echo server/amq_vhost.c>>_package.lst
    fi
    if [ -f "server/amq_vhost.hpp" ]; then
        echo server/amq_vhost.hpp>>_package.lst
    fi
    if [ -f "server/amq_vhost.cpp" ]; then
        echo server/amq_vhost.cpp>>_package.lst
    fi
    if [ -f "server/amq_vhost_agent.h" ]; then
        echo server/amq_vhost_agent.h>>_package.lst
    fi
    if [ -f "server/amq_vhost_agent.c" ]; then
        echo server/amq_vhost_agent.c>>_package.lst
    fi
    if [ -f "server/amq_vhost_agent.hpp" ]; then
        echo server/amq_vhost_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_vhost_config_test.c" ]; then
        echo server/amq_vhost_config_test.c>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.h" ]; then
        echo server/amq_vhost_config.h>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.c" ]; then
        echo server/amq_vhost_config.c>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.hpp" ]; then
        echo server/amq_vhost_config.hpp>>_package.lst
    fi
    if [ -f "server/amq_vhost_config.cpp" ]; then
        echo server/amq_vhost_config.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_test.c" ]; then
        echo server/amq_exchange_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange.h" ]; then
        echo server/amq_exchange.h>>_package.lst
    fi
    if [ -f "server/amq_exchange.c" ]; then
        echo server/amq_exchange.c>>_package.lst
    fi
    if [ -f "server/amq_exchange.hpp" ]; then
        echo server/amq_exchange.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange.cpp" ]; then
        echo server/amq_exchange.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_table_test.c" ]; then
        echo server/amq_exchange_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_table.h" ]; then
        echo server/amq_exchange_table.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_table.c" ]; then
        echo server/amq_exchange_table.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_table.hpp" ]; then
        echo server/amq_exchange_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_table.cpp" ]; then
        echo server/amq_exchange_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost_test.c" ]; then
        echo server/amq_exchange_by_vhost_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost.h" ]; then
        echo server/amq_exchange_by_vhost.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost.c" ]; then
        echo server/amq_exchange_by_vhost.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost.hpp" ]; then
        echo server/amq_exchange_by_vhost.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_by_vhost.cpp" ]; then
        echo server/amq_exchange_by_vhost.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_agent.h" ]; then
        echo server/amq_exchange_agent.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_agent.c" ]; then
        echo server/amq_exchange_agent.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_agent.hpp" ]; then
        echo server/amq_exchange_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_system_test.c" ]; then
        echo server/amq_exchange_system_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_system.h" ]; then
        echo server/amq_exchange_system.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_system.c" ]; then
        echo server/amq_exchange_system.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_system.hpp" ]; then
        echo server/amq_exchange_system.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_system.cpp" ]; then
        echo server/amq_exchange_system.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout_test.c" ]; then
        echo server/amq_exchange_fanout_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout.h" ]; then
        echo server/amq_exchange_fanout.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout.c" ]; then
        echo server/amq_exchange_fanout.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout.hpp" ]; then
        echo server/amq_exchange_fanout.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_fanout.cpp" ]; then
        echo server/amq_exchange_fanout.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct_test.c" ]; then
        echo server/amq_exchange_direct_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct.h" ]; then
        echo server/amq_exchange_direct.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct.c" ]; then
        echo server/amq_exchange_direct.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct.hpp" ]; then
        echo server/amq_exchange_direct.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_direct.cpp" ]; then
        echo server/amq_exchange_direct.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic_test.c" ]; then
        echo server/amq_exchange_topic_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic.h" ]; then
        echo server/amq_exchange_topic.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic.c" ]; then
        echo server/amq_exchange_topic.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic.hpp" ]; then
        echo server/amq_exchange_topic.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_topic.cpp" ]; then
        echo server/amq_exchange_topic.cpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers_test.c" ]; then
        echo server/amq_exchange_headers_test.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers.h" ]; then
        echo server/amq_exchange_headers.h>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers.c" ]; then
        echo server/amq_exchange_headers.c>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers.hpp" ]; then
        echo server/amq_exchange_headers.hpp>>_package.lst
    fi
    if [ -f "server/amq_exchange_headers.cpp" ]; then
        echo server/amq_exchange_headers.cpp>>_package.lst
    fi
    if [ -f "server/amq_binding_test.c" ]; then
        echo server/amq_binding_test.c>>_package.lst
    fi
    if [ -f "server/amq_binding.h" ]; then
        echo server/amq_binding.h>>_package.lst
    fi
    if [ -f "server/amq_binding.c" ]; then
        echo server/amq_binding.c>>_package.lst
    fi
    if [ -f "server/amq_binding.hpp" ]; then
        echo server/amq_binding.hpp>>_package.lst
    fi
    if [ -f "server/amq_binding.cpp" ]; then
        echo server/amq_binding.cpp>>_package.lst
    fi
    if [ -f "server/amq_binding_list_test.c" ]; then
        echo server/amq_binding_list_test.c>>_package.lst
    fi
    if [ -f "server/amq_binding_list.h" ]; then
        echo server/amq_binding_list.h>>_package.lst
    fi
    if [ -f "server/amq_binding_list.c" ]; then
        echo server/amq_binding_list.c>>_package.lst
    fi
    if [ -f "server/amq_binding_list.hpp" ]; then
        echo server/amq_binding_list.hpp>>_package.lst
    fi
    if [ -f "server/amq_binding_list.cpp" ]; then
        echo server/amq_binding_list.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_test.c" ]; then
        echo server/amq_queue_bindings_list_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list.h" ]; then
        echo server/amq_queue_bindings_list.h>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list.c" ]; then
        echo server/amq_queue_bindings_list.c>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list.hpp" ]; then
        echo server/amq_queue_bindings_list.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list.cpp" ]; then
        echo server/amq_queue_bindings_list.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table_test.c" ]; then
        echo server/amq_queue_bindings_list_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table.h" ]; then
        echo server/amq_queue_bindings_list_table.h>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table.c" ]; then
        echo server/amq_queue_bindings_list_table.c>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table.hpp" ]; then
        echo server/amq_queue_bindings_list_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_bindings_list_table.cpp" ]; then
        echo server/amq_queue_bindings_list_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt_test.c" ]; then
        echo server/amq_binding_mgt_test.c>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt.h" ]; then
        echo server/amq_binding_mgt.h>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt.c" ]; then
        echo server/amq_binding_mgt.c>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt.hpp" ]; then
        echo server/amq_binding_mgt.hpp>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt.cpp" ]; then
        echo server/amq_binding_mgt.cpp>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt_agent.h" ]; then
        echo server/amq_binding_mgt_agent.h>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt_agent.c" ]; then
        echo server/amq_binding_mgt_agent.c>>_package.lst
    fi
    if [ -f "server/amq_binding_mgt_agent.hpp" ]; then
        echo server/amq_binding_mgt_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_hitset_test.c" ]; then
        echo server/amq_hitset_test.c>>_package.lst
    fi
    if [ -f "server/amq_hitset.h" ]; then
        echo server/amq_hitset.h>>_package.lst
    fi
    if [ -f "server/amq_hitset.c" ]; then
        echo server/amq_hitset.c>>_package.lst
    fi
    if [ -f "server/amq_hitset.hpp" ]; then
        echo server/amq_hitset.hpp>>_package.lst
    fi
    if [ -f "server/amq_hitset.cpp" ]; then
        echo server/amq_hitset.cpp>>_package.lst
    fi
    if [ -f "server/amq_index_test.c" ]; then
        echo server/amq_index_test.c>>_package.lst
    fi
    if [ -f "server/amq_index.h" ]; then
        echo server/amq_index.h>>_package.lst
    fi
    if [ -f "server/amq_index.c" ]; then
        echo server/amq_index.c>>_package.lst
    fi
    if [ -f "server/amq_index.hpp" ]; then
        echo server/amq_index.hpp>>_package.lst
    fi
    if [ -f "server/amq_index.cpp" ]; then
        echo server/amq_index.cpp>>_package.lst
    fi
    if [ -f "server/amq_index_hash_test.c" ]; then
        echo server/amq_index_hash_test.c>>_package.lst
    fi
    if [ -f "server/amq_index_hash.h" ]; then
        echo server/amq_index_hash.h>>_package.lst
    fi
    if [ -f "server/amq_index_hash.c" ]; then
        echo server/amq_index_hash.c>>_package.lst
    fi
    if [ -f "server/amq_index_hash.hpp" ]; then
        echo server/amq_index_hash.hpp>>_package.lst
    fi
    if [ -f "server/amq_index_hash.cpp" ]; then
        echo server/amq_index_hash.cpp>>_package.lst
    fi
    if [ -f "server/amq_index_array_test.c" ]; then
        echo server/amq_index_array_test.c>>_package.lst
    fi
    if [ -f "server/amq_index_array.h" ]; then
        echo server/amq_index_array.h>>_package.lst
    fi
    if [ -f "server/amq_index_array.c" ]; then
        echo server/amq_index_array.c>>_package.lst
    fi
    if [ -f "server/amq_index_array.hpp" ]; then
        echo server/amq_index_array.hpp>>_package.lst
    fi
    if [ -f "server/amq_index_array.cpp" ]; then
        echo server/amq_index_array.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_test.c" ]; then
        echo server/amq_queue_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue.h" ]; then
        echo server/amq_queue.h>>_package.lst
    fi
    if [ -f "server/amq_queue.c" ]; then
        echo server/amq_queue.c>>_package.lst
    fi
    if [ -f "server/amq_queue.hpp" ]; then
        echo server/amq_queue.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue.cpp" ]; then
        echo server/amq_queue.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_table_test.c" ]; then
        echo server/amq_queue_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_table.h" ]; then
        echo server/amq_queue_table.h>>_package.lst
    fi
    if [ -f "server/amq_queue_table.c" ]; then
        echo server/amq_queue_table.c>>_package.lst
    fi
    if [ -f "server/amq_queue_table.hpp" ]; then
        echo server/amq_queue_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_table.cpp" ]; then
        echo server/amq_queue_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost_test.c" ]; then
        echo server/amq_queue_by_vhost_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost.h" ]; then
        echo server/amq_queue_by_vhost.h>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost.c" ]; then
        echo server/amq_queue_by_vhost.c>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost.hpp" ]; then
        echo server/amq_queue_by_vhost.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_by_vhost.cpp" ]; then
        echo server/amq_queue_by_vhost.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_list_test.c" ]; then
        echo server/amq_queue_list_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_list.h" ]; then
        echo server/amq_queue_list.h>>_package.lst
    fi
    if [ -f "server/amq_queue_list.c" ]; then
        echo server/amq_queue_list.c>>_package.lst
    fi
    if [ -f "server/amq_queue_list.hpp" ]; then
        echo server/amq_queue_list.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_list.cpp" ]; then
        echo server/amq_queue_list.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_agent.h" ]; then
        echo server/amq_queue_agent.h>>_package.lst
    fi
    if [ -f "server/amq_queue_agent.c" ]; then
        echo server/amq_queue_agent.c>>_package.lst
    fi
    if [ -f "server/amq_queue_agent.hpp" ]; then
        echo server/amq_queue_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_basic_test.c" ]; then
        echo server/amq_queue_basic_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_basic.h" ]; then
        echo server/amq_queue_basic.h>>_package.lst
    fi
    if [ -f "server/amq_queue_basic.c" ]; then
        echo server/amq_queue_basic.c>>_package.lst
    fi
    if [ -f "server/amq_queue_basic.hpp" ]; then
        echo server/amq_queue_basic.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_basic.cpp" ]; then
        echo server/amq_queue_basic.cpp>>_package.lst
    fi
    if [ -f "server/amq_connection_test.c" ]; then
        echo server/amq_connection_test.c>>_package.lst
    fi
    if [ -f "server/amq_connection.h" ]; then
        echo server/amq_connection.h>>_package.lst
    fi
    if [ -f "server/amq_connection.c" ]; then
        echo server/amq_connection.c>>_package.lst
    fi
    if [ -f "server/amq_connection.hpp" ]; then
        echo server/amq_connection.hpp>>_package.lst
    fi
    if [ -f "server/amq_connection.cpp" ]; then
        echo server/amq_connection.cpp>>_package.lst
    fi
    if [ -f "server/amq_connection_agent.h" ]; then
        echo server/amq_connection_agent.h>>_package.lst
    fi
    if [ -f "server/amq_connection_agent.c" ]; then
        echo server/amq_connection_agent.c>>_package.lst
    fi
    if [ -f "server/amq_connection_agent.hpp" ]; then
        echo server/amq_connection_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker_test.c" ]; then
        echo server/amq_connection_by_broker_test.c>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker.h" ]; then
        echo server/amq_connection_by_broker.h>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker.c" ]; then
        echo server/amq_connection_by_broker.c>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker.hpp" ]; then
        echo server/amq_connection_by_broker.hpp>>_package.lst
    fi
    if [ -f "server/amq_connection_by_broker.cpp" ]; then
        echo server/amq_connection_by_broker.cpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_test.c" ]; then
        echo server/amq_consumer_test.c>>_package.lst
    fi
    if [ -f "server/amq_consumer.h" ]; then
        echo server/amq_consumer.h>>_package.lst
    fi
    if [ -f "server/amq_consumer.c" ]; then
        echo server/amq_consumer.c>>_package.lst
    fi
    if [ -f "server/amq_consumer.hpp" ]; then
        echo server/amq_consumer.hpp>>_package.lst
    fi
    if [ -f "server/amq_consumer.cpp" ]; then
        echo server/amq_consumer.cpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_table_test.c" ]; then
        echo server/amq_consumer_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_table.h" ]; then
        echo server/amq_consumer_table.h>>_package.lst
    fi
    if [ -f "server/amq_consumer_table.c" ]; then
        echo server/amq_consumer_table.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_table.hpp" ]; then
        echo server/amq_consumer_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_table.cpp" ]; then
        echo server/amq_consumer_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue_test.c" ]; then
        echo server/amq_consumer_by_queue_test.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue.h" ]; then
        echo server/amq_consumer_by_queue.h>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue.c" ]; then
        echo server/amq_consumer_by_queue.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue.hpp" ]; then
        echo server/amq_consumer_by_queue.hpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_queue.cpp" ]; then
        echo server/amq_consumer_by_queue.cpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel_test.c" ]; then
        echo server/amq_consumer_by_channel_test.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel.h" ]; then
        echo server/amq_consumer_by_channel.h>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel.c" ]; then
        echo server/amq_consumer_by_channel.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel.hpp" ]; then
        echo server/amq_consumer_by_channel.hpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_by_channel.cpp" ]; then
        echo server/amq_consumer_by_channel.cpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic_test.c" ]; then
        echo server/amq_consumer_basic_test.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic.h" ]; then
        echo server/amq_consumer_basic.h>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic.c" ]; then
        echo server/amq_consumer_basic.c>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic.hpp" ]; then
        echo server/amq_consumer_basic.hpp>>_package.lst
    fi
    if [ -f "server/amq_consumer_basic.cpp" ]; then
        echo server/amq_consumer_basic.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_connection_test.c" ]; then
        echo server/amq_queue_connection_test.c>>_package.lst
    fi
    if [ -f "server/amq_queue_connection.h" ]; then
        echo server/amq_queue_connection.h>>_package.lst
    fi
    if [ -f "server/amq_queue_connection.c" ]; then
        echo server/amq_queue_connection.c>>_package.lst
    fi
    if [ -f "server/amq_queue_connection.hpp" ]; then
        echo server/amq_queue_connection.hpp>>_package.lst
    fi
    if [ -f "server/amq_queue_connection.cpp" ]; then
        echo server/amq_queue_connection.cpp>>_package.lst
    fi
    if [ -f "server/amq_queue_connection_agent.h" ]; then
        echo server/amq_queue_connection_agent.h>>_package.lst
    fi
    if [ -f "server/amq_queue_connection_agent.c" ]; then
        echo server/amq_queue_connection_agent.c>>_package.lst
    fi
    if [ -f "server/amq_queue_connection_agent.hpp" ]; then
        echo server/amq_queue_connection_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_connection_queue_test.c" ]; then
        echo server/amq_connection_queue_test.c>>_package.lst
    fi
    if [ -f "server/amq_connection_queue.h" ]; then
        echo server/amq_connection_queue.h>>_package.lst
    fi
    if [ -f "server/amq_connection_queue.c" ]; then
        echo server/amq_connection_queue.c>>_package.lst
    fi
    if [ -f "server/amq_connection_queue.hpp" ]; then
        echo server/amq_connection_queue.hpp>>_package.lst
    fi
    if [ -f "server/amq_connection_queue.cpp" ]; then
        echo server/amq_connection_queue.cpp>>_package.lst
    fi
    if [ -f "server/amq_connection_queue_agent.h" ]; then
        echo server/amq_connection_queue_agent.h>>_package.lst
    fi
    if [ -f "server/amq_connection_queue_agent.c" ]; then
        echo server/amq_connection_queue_agent.c>>_package.lst
    fi
    if [ -f "server/amq_connection_queue_agent.hpp" ]; then
        echo server/amq_connection_queue_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_method_test.c" ]; then
        echo server/amq_server_method_test.c>>_package.lst
    fi
    if [ -f "server/amq_server_method.h" ]; then
        echo server/amq_server_method.h>>_package.lst
    fi
    if [ -f "server/amq_server_method.c" ]; then
        echo server/amq_server_method.c>>_package.lst
    fi
    if [ -f "server/amq_server_method.hpp" ]; then
        echo server/amq_server_method.hpp>>_package.lst
    fi
    if [ -f "server/amq_server_method.cpp" ]; then
        echo server/amq_server_method.cpp>>_package.lst
    fi
    if [ -f "server/amq_federation_test.c" ]; then
        echo server/amq_federation_test.c>>_package.lst
    fi
    if [ -f "server/amq_federation.h" ]; then
        echo server/amq_federation.h>>_package.lst
    fi
    if [ -f "server/amq_federation.c" ]; then
        echo server/amq_federation.c>>_package.lst
    fi
    if [ -f "server/amq_federation.hpp" ]; then
        echo server/amq_federation.hpp>>_package.lst
    fi
    if [ -f "server/amq_federation.cpp" ]; then
        echo server/amq_federation.cpp>>_package.lst
    fi
    if [ -f "server/amq_federation_agent.h" ]; then
        echo server/amq_federation_agent.h>>_package.lst
    fi
    if [ -f "server/amq_federation_agent.c" ]; then
        echo server/amq_federation_agent.c>>_package.lst
    fi
    if [ -f "server/amq_federation_agent.hpp" ]; then
        echo server/amq_federation_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_failover_test.c" ]; then
        echo server/amq_failover_test.c>>_package.lst
    fi
    if [ -f "server/amq_failover.h" ]; then
        echo server/amq_failover.h>>_package.lst
    fi
    if [ -f "server/amq_failover.c" ]; then
        echo server/amq_failover.c>>_package.lst
    fi
    if [ -f "server/amq_failover.hpp" ]; then
        echo server/amq_failover.hpp>>_package.lst
    fi
    if [ -f "server/amq_failover.cpp" ]; then
        echo server/amq_failover.cpp>>_package.lst
    fi
    if [ -f "server/amq_failover_agent.h" ]; then
        echo server/amq_failover_agent.h>>_package.lst
    fi
    if [ -f "server/amq_failover_agent.c" ]; then
        echo server/amq_failover_agent.c>>_package.lst
    fi
    if [ -f "server/amq_failover_agent.hpp" ]; then
        echo server/amq_failover_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_lease_test.c" ]; then
        echo server/amq_lease_test.c>>_package.lst
    fi
    if [ -f "server/amq_lease.h" ]; then
        echo server/amq_lease.h>>_package.lst
    fi
    if [ -f "server/amq_lease.c" ]; then
        echo server/amq_lease.c>>_package.lst
    fi
    if [ -f "server/amq_lease.hpp" ]; then
        echo server/amq_lease.hpp>>_package.lst
    fi
    if [ -f "server/amq_lease.cpp" ]; then
        echo server/amq_lease.cpp>>_package.lst
    fi
    if [ -f "server/amq_lease_table_test.c" ]; then
        echo server/amq_lease_table_test.c>>_package.lst
    fi
    if [ -f "server/amq_lease_table.h" ]; then
        echo server/amq_lease_table.h>>_package.lst
    fi
    if [ -f "server/amq_lease_table.c" ]; then
        echo server/amq_lease_table.c>>_package.lst
    fi
    if [ -f "server/amq_lease_table.hpp" ]; then
        echo server/amq_lease_table.hpp>>_package.lst
    fi
    if [ -f "server/amq_lease_table.cpp" ]; then
        echo server/amq_lease_table.cpp>>_package.lst
    fi
    if [ -f "server/amq_console_test.c" ]; then
        echo server/amq_console_test.c>>_package.lst
    fi
    if [ -f "server/amq_console.h" ]; then
        echo server/amq_console.h>>_package.lst
    fi
    if [ -f "server/amq_console.c" ]; then
        echo server/amq_console.c>>_package.lst
    fi
    if [ -f "server/amq_console.hpp" ]; then
        echo server/amq_console.hpp>>_package.lst
    fi
    if [ -f "server/amq_console.cpp" ]; then
        echo server/amq_console.cpp>>_package.lst
    fi
    if [ -f "server/amq_console_agent.h" ]; then
        echo server/amq_console_agent.h>>_package.lst
    fi
    if [ -f "server/amq_console_agent.c" ]; then
        echo server/amq_console_agent.c>>_package.lst
    fi
    if [ -f "server/amq_console_agent.hpp" ]; then
        echo server/amq_console_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_console_class_test.c" ]; then
        echo server/amq_console_class_test.c>>_package.lst
    fi
    if [ -f "server/amq_console_class.h" ]; then
        echo server/amq_console_class.h>>_package.lst
    fi
    if [ -f "server/amq_console_class.c" ]; then
        echo server/amq_console_class.c>>_package.lst
    fi
    if [ -f "server/amq_console_class.hpp" ]; then
        echo server/amq_console_class.hpp>>_package.lst
    fi
    if [ -f "server/amq_console_class.cpp" ]; then
        echo server/amq_console_class.cpp>>_package.lst
    fi
    if [ -f "server/amq_console_config_test.c" ]; then
        echo server/amq_console_config_test.c>>_package.lst
    fi
    if [ -f "server/amq_console_config.h" ]; then
        echo server/amq_console_config.h>>_package.lst
    fi
    if [ -f "server/amq_console_config.c" ]; then
        echo server/amq_console_config.c>>_package.lst
    fi
    if [ -f "server/amq_console_config.hpp" ]; then
        echo server/amq_console_config.hpp>>_package.lst
    fi
    if [ -f "server/amq_console_config.cpp" ]; then
        echo server/amq_console_config.cpp>>_package.lst
    fi
    if [ -f "server/amq_console_config_agent.h" ]; then
        echo server/amq_console_config_agent.h>>_package.lst
    fi
    if [ -f "server/amq_console_config_agent.c" ]; then
        echo server/amq_console_config_agent.c>>_package.lst
    fi
    if [ -f "server/amq_console_config_agent.hpp" ]; then
        echo server/amq_console_config_agent.hpp>>_package.lst
    fi
    if [ -f "server/amq_cml_test.c" ]; then
        echo server/amq_cml_test.c>>_package.lst
    fi
    if [ -f "server/amq_cml.h" ]; then
        echo server/amq_cml.h>>_package.lst
    fi
    if [ -f "server/amq_cml.c" ]; then
        echo server/amq_cml.c>>_package.lst
    fi
    if [ -f "server/amq_cml.hpp" ]; then
        echo server/amq_cml.hpp>>_package.lst
    fi
    if [ -f "server/amq_cml.cpp" ]; then
        echo server/amq_cml.cpp>>_package.lst
    fi
    if [ -f "server/stamp_generate" ]; then
        echo server/stamp_generate>>_package.lst
    fi
    if [ -f "server/configure" ]; then
        echo server/configure>>_package.lst
    fi
    if [ -f "server/Makefile.unix" ]; then
        echo server/Makefile.unix>>_package.lst
    fi
    if [ -f "server/boomake" ]; then
        echo server/boomake>>_package.lst
    fi
    if [ -f "server/configure.bat" ]; then
        echo server/configure.bat>>_package.lst
    fi
    if [ -f "server/Makefile.win32" ]; then
        echo server/Makefile.win32>>_package.lst
    fi
    if [ -f "server/boomake.bat" ]; then
        echo server/boomake.bat>>_package.lst
    fi
    PUSHDIR=`pwd`
    cd operate
    cd $PUSHDIR
    if [ -f "operate/gpl_output" ]; then
        echo operate/gpl_output>>_package.lst
    fi
    if [ -f "operate/version.h" ]; then
        echo operate/version.h>>_package.lst
    fi
    if [ -f "operate/amq_shell.c" ]; then
        echo operate/amq_shell.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console.icl" ]; then
        echo operate/amq_mgt_console.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker.icl" ]; then
        echo operate/amq_mgt_broker.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange.icl" ]; then
        echo operate/amq_mgt_exchange.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding.icl" ]; then
        echo operate/amq_mgt_binding.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue.icl" ]; then
        echo operate/amq_mgt_queue.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config.icl" ]; then
        echo operate/amq_mgt_config.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection.icl" ]; then
        echo operate/amq_mgt_connection.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection.icl" ]; then
        echo operate/amq_mgt_queue_connection.icl>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue.icl" ]; then
        echo operate/amq_mgt_connection_queue.icl>>_package.lst
    fi
    if [ -f "operate/amq_operate_api.gsl" ]; then
        echo operate/amq_operate_api.gsl>>_package.lst
    fi
    if [ -f "operate/prelude.pdl" ]; then
        echo operate/prelude.pdl>>_package.lst
    fi
    if [ -f "operate/license.gpl" ]; then
        echo operate/license.gpl>>_package.lst
    fi
    if [ -f "operate/project.pdl" ]; then
        echo operate/project.pdl>>_package.lst
    fi
    if [ -f "operate/readme.txt" ]; then
        echo operate/readme.txt>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console_test.c" ]; then
        echo operate/amq_mgt_console_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console.h" ]; then
        echo operate/amq_mgt_console.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console.c" ]; then
        echo operate/amq_mgt_console.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console.hpp" ]; then
        echo operate/amq_mgt_console.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_console.cpp" ]; then
        echo operate/amq_mgt_console.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker_test.c" ]; then
        echo operate/amq_mgt_broker_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker.h" ]; then
        echo operate/amq_mgt_broker.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker.c" ]; then
        echo operate/amq_mgt_broker.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker.hpp" ]; then
        echo operate/amq_mgt_broker.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_broker.cpp" ]; then
        echo operate/amq_mgt_broker.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange_test.c" ]; then
        echo operate/amq_mgt_exchange_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange.h" ]; then
        echo operate/amq_mgt_exchange.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange.c" ]; then
        echo operate/amq_mgt_exchange.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange.hpp" ]; then
        echo operate/amq_mgt_exchange.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_exchange.cpp" ]; then
        echo operate/amq_mgt_exchange.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding_test.c" ]; then
        echo operate/amq_mgt_binding_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding.h" ]; then
        echo operate/amq_mgt_binding.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding.c" ]; then
        echo operate/amq_mgt_binding.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding.hpp" ]; then
        echo operate/amq_mgt_binding.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_binding.cpp" ]; then
        echo operate/amq_mgt_binding.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_test.c" ]; then
        echo operate/amq_mgt_queue_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue.h" ]; then
        echo operate/amq_mgt_queue.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue.c" ]; then
        echo operate/amq_mgt_queue.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue.hpp" ]; then
        echo operate/amq_mgt_queue.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue.cpp" ]; then
        echo operate/amq_mgt_queue.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config_test.c" ]; then
        echo operate/amq_mgt_config_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config.h" ]; then
        echo operate/amq_mgt_config.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config.c" ]; then
        echo operate/amq_mgt_config.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config.hpp" ]; then
        echo operate/amq_mgt_config.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_config.cpp" ]; then
        echo operate/amq_mgt_config.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_test.c" ]; then
        echo operate/amq_mgt_connection_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection.h" ]; then
        echo operate/amq_mgt_connection.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection.c" ]; then
        echo operate/amq_mgt_connection.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection.hpp" ]; then
        echo operate/amq_mgt_connection.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection.cpp" ]; then
        echo operate/amq_mgt_connection.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection_test.c" ]; then
        echo operate/amq_mgt_queue_connection_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection.h" ]; then
        echo operate/amq_mgt_queue_connection.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection.c" ]; then
        echo operate/amq_mgt_queue_connection.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection.hpp" ]; then
        echo operate/amq_mgt_queue_connection.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_queue_connection.cpp" ]; then
        echo operate/amq_mgt_queue_connection.cpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue_test.c" ]; then
        echo operate/amq_mgt_connection_queue_test.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue.h" ]; then
        echo operate/amq_mgt_connection_queue.h>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue.c" ]; then
        echo operate/amq_mgt_connection_queue.c>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue.hpp" ]; then
        echo operate/amq_mgt_connection_queue.hpp>>_package.lst
    fi
    if [ -f "operate/amq_mgt_connection_queue.cpp" ]; then
        echo operate/amq_mgt_connection_queue.cpp>>_package.lst
    fi
    if [ -f "operate/stamp_generate" ]; then
        echo operate/stamp_generate>>_package.lst
    fi
    if [ -f "operate/configure" ]; then
        echo operate/configure>>_package.lst
    fi
    if [ -f "operate/Makefile.unix" ]; then
        echo operate/Makefile.unix>>_package.lst
    fi
    if [ -f "operate/boomake" ]; then
        echo operate/boomake>>_package.lst
    fi
    if [ -f "operate/configure.bat" ]; then
        echo operate/configure.bat>>_package.lst
    fi
    if [ -f "operate/Makefile.win32" ]; then
        echo operate/Makefile.win32>>_package.lst
    fi
    if [ -f "operate/boomake.bat" ]; then
        echo operate/boomake.bat>>_package.lst
    fi
    echo "Source package successfully generated">common/stamp_source
    echo "common/stamp_source" >>_package.lst
    echo "Source package successfully generated">clients/stamp_source
    echo "clients/stamp_source" >>_package.lst
    echo "Source package successfully generated">server/stamp_source
    echo "server/stamp_source" >>_package.lst
    echo "Source package successfully generated">operate/stamp_source
    echo "operate/stamp_source" >>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building OpenAMQ-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d OpenAMQ-$MY_VERSION
    rm -f OpenAMQ-$MY_VERSION-src.tar.gz
    tar -cf  OpenAMQ-$MY_VERSION-src.tar OpenAMQ-$MY_VERSION
    gzip OpenAMQ-$MY_VERSION-src.tar
    rm -f OpenAMQ-$MY_VERSION-src.zip
    carp "Building OpenAMQ-$MY_VERSION-src.zip..."
    zip -lrmq OpenAMQ-$MY_VERSION-src.zip OpenAMQ-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
    rm -f common/stamp_source
    rm -f clients/stamp_source
    rm -f server/stamp_source
    rm -f operate/stamp_source
}

# ----------------------------   BUILD PROJECTS   -----------------------------

a_build_projects() {
:
    rm -rf _install
    mkdir _install
    mkdir _install/lib
    mkdir _install/include
    mkdir _install/bin
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake -install ../_install build install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake -install ../_install build install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake -install ../_install build install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake -install ../_install build install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# ----------------------------   CLEAN PROJECTS   -----------------------------

a_clean_projects() {
:
    rm -rf _install
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake clean || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake clean || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake clean || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake clean || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    rm -f OpenAMQ_*.zip
    rm -f OpenAMQ_*.tar.gz
}

# ---------------------------   COMPILE PROJECTS   ----------------------------

a_compile_projects() {
:
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake compile || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake compile || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake compile || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake compile || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
}

# ---------------------------   INSTALL PROJECTS   ----------------------------

a_install_projects() {
:
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake install || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------------   REGEN PROJECTS   -----------------------------

a_regen_projects() {
:
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake regen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake regen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake regen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake regen || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "OpenAMQ-1.3d1"
}

# -----------------------------   TEST PROJECTS   -----------------------------

a_test_projects() {
:
    PUSHDIR=`pwd`
    cd common
    if [ -f boomake ]; then
        sh boomake test || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd clients
    if [ -f boomake ]; then
        sh boomake test || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd server
    if [ -f boomake ]; then
        sh boomake test || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    PUSHDIR=`pwd`
    cd operate
    if [ -f boomake ]; then
        sh boomake test || croak
    else
        croak "Project has not been configured - boomake is missing"
    fi
    cd $PUSHDIR
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  For each project in the product, regenerate code and build binary"
    echo "    files ready for installation.  The projects are built in their"
    echo "    individual directories and installed into the temporary install tree."
echo "compile:"
    echo "  For each project in the product, build binary files ready for installation,"
    echo "    but don't run the code generation phase .  The projects are built in their"
    echo "    individual directories and installed into the temporary install tree."
echo "clean:"
    echo "  Deletes generated project files.  This action removes generated source"
    echo "    and binary files."
echo "regen:"
    echo "  For each project in the product, regenerate any source files that"
    echo "    are produced via GSL, Libero or another code generation tool."
    echo "    Generates only those files that are required to build under"
    echo "    the current model."
echo "allgen:"
    echo "  For each project in the product, regenerate any source files that"
    echo "    are produced via GSL, Libero or another code generation tool."
    echo "    Generates all files."
echo "distrib:"
    echo "  Build all projects and create full distribution packages.  If you do"
    echo "    not want to rebuild the projects, you can use the 'distsrc' and 'distbin'"
    echo "    actions as shortcuts."
echo "distsrc:"
    echo "  Build source distribution packages based on product version number."
echo "distrev:"
    echo "  Build source distribution packages based on source control revision"
    echo "    number."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  For each project in the product, build binary files ready for"
    echo "    installation.  The projects are built in their individual directories"
    echo "    and installed into the temporary install tree."
echo "clean:"
    echo "  Deletes generated project files.  This action removes generated binary"
    echo "    files."
echo "regen:"
    echo "  For each project in the product, regenerate any source files that"
    echo "    are produced via GSL, Libero or another code generation tool."
    echo "    Generates only those files that are required to build under"
    echo "    the current model."
echo "allgen:"
    echo "  For each project in the product, regenerate any source files that"
    echo "    are produced via GSL, Libero or another code generation tool."
    echo "    Generates all files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  For each project in the product, build binary files ready for"
    echo "    installation.  The projects are built in their individual directories"
    echo "    and installed into the temporary install tree."
echo "clean:"
    echo "  Deletes generated project files.  This action removes generated binary"
    echo "    files."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Install each project into its target directory.  The projects must"
    echo "    have been built (and installed into the temporary install tree, which"
    echo "    is what the build action does)."
echo "distbin:"
    echo "  Build binary distribution packages.  The actual packages built depend on"
    echo "    the project packagers used, but typically you will get a ZIP or TGZ file"
    echo "    containing all the projects' deliverables.  Note that this action works"
    echo "    entirely from the temporary install tree, which the 'build' action makes."
echo "test:"
    echo "  Runs each project's test process."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show product version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build projects"
            fi
            if [ -z "$exception" ]; then
                a_build_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: compile projects"
            fi
            if [ -z "$exception" ]; then
                a_compile_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: clean projects"
            fi
            if [ -z "$exception" ]; then
                a_clean_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: regen projects"
            fi
            if [ -z "$exception" ]; then
                a_regen_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: allgen projects"
            fi
            if [ -z "$exception" ]; then
                a_allgen_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build projects"
            fi
            if [ -z "$exception" ]; then
                a_build_projects
            fi
            if [ -n "$debug" ]; then
                echo "Action: build product source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_product_source_packages
            fi
            if [ -n "$debug" ]; then
                echo "Action: build product install packages"
            fi
            if [ -z "$exception" ]; then
                a_build_product_install_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: allgen projects"
            fi
            if [ -z "$exception" ]; then
                a_allgen_projects
            fi
            if [ -n "$debug" ]; then
                echo "Action: build product source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_product_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: allgen projects"
            fi
            if [ -z "$exception" ]; then
                a_allgen_projects
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build product source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_product_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build projects"
            fi
            if [ -z "$exception" ]; then
                a_build_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: clean projects"
            fi
            if [ -z "$exception" ]; then
                a_clean_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: regen projects"
            fi
            if [ -z "$exception" ]; then
                a_regen_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: allgen projects"
            fi
            if [ -z "$exception" ]; then
                a_allgen_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build projects"
            fi
            if [ -z "$exception" ]; then
                a_build_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: clean projects"
            fi
            if [ -z "$exception" ]; then
                a_clean_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: install projects"
            fi
            if [ -z "$exception" ]; then
                a_install_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distbin)
            if [ -n "$debug" ]; then
                echo "Event: distbin"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build product install packages"
            fi
            if [ -z "$exception" ]; then
                a_build_product_install_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: test projects"
            fi
            if [ -z "$exception" ]; then
                a_test_projects
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

<?xml version="1.0"?>
<root>
    <class
        name = "broker"
        label = "Broker">
        <field
            name = "name"
            label = "Broker name">
            <get>icl_shortstr_fmt (field_value, &quot;OpenAMQ %s&quot;, VERSION);</get>
        </field>
        <field
            name = "started"
            label = "Date, time broker started">
            <get>ipr_time_iso8601 (self-&gt;started,
            ipr_date_format_minute, 0, FALSE, field_value);</get>
        </field>
        <field
            name = "locked"
            type = "bool"
            label = "Broker is locked?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;locked);</get>
        </field>
        <field
            name = "datamem"
            label = "Memory used for all data">
            <get>icl_shortstr_fmt (field_value, &quot;%dK&quot;, (int) (icl_mem_used () / 1024));</get>
        </field>
        <field
            name = "bucketmem"
            label = "Memory used for messages">
            <get>icl_shortstr_fmt (field_value, &quot;%dK&quot;, (int) (ipr_bucket_used () / 1024));</get>
        </field>
        <field
            name = "messages"
            type = "int"
            label = "Number of queued messages">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_content_basic_count ());</get>
        </field>
        <field
            name = "consumers"
            type = "int"
            label = "Number of queue consumers">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_consumer_count ());</get>
        </field>
        <field
            name = "bindings"
            type = "int"
            label = "Number of queue bindings">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_binding_count ());</get>
        </field>
        <class
            name = "exchange"
            label = "Message exchanges"
            repeat = "1"
            source = "amq_exchange">
            <local>
            amq_exchange_t
                *exchange;
          </local>
            <get>
            exchange = amq_exchange_by_vhost_first (self-&gt;vhost-&gt;exchange_list);
            icl_shortstr_fmt (field_value, &quot;%d&quot;, exchange-&gt;object_id);
          </get>
            <next>
            exchange = amq_exchange_by_vhost_next (&amp;exchange);
            if (exchange)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, exchange-&gt;object_id);
          </next>
        </class>
        <class
            name = "queue"
            label = "Shared queues"
            repeat = "1"
            source = "amq_queue">
            <local>
            amq_queue_t
                *queue;
          </local>
            <get>
            //  Get first queue and then skip private queues
            queue = amq_queue_by_vhost_first (self-&gt;vhost-&gt;queue_list);
            while (queue &amp;&amp; queue-&gt;exclusive)
                queue = amq_queue_by_vhost_next (&amp;queue);
            if (queue)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;object_id);
          </get>
            <next>
            //  Get next queue and then skip private queues
            queue = amq_queue_by_vhost_next (&amp;queue);
            while (queue &amp;&amp; queue-&gt;exclusive)
                queue = amq_queue_by_vhost_next (&amp;queue);
            if (queue)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;object_id);
          </next>
        </class>
        <class
            name = "connection"
            label = "Connections"
            repeat = "1"
            source = "amq_connection">
            <local>
            amq_connection_t
                *connection;
          </local>
            <get>
            connection = amq_connection_by_broker_first (self-&gt;mgt_connection_list);
            if (connection)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;object_id);
          </get>
            <next>
            connection = amq_connection_by_broker_next (&amp;connection);
            if (connection)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;object_id);
          </next>
        </class>
        <class
            name = "config"
            label = "Configuration"
            source = "amq_console_config">
            <get>
            icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_console_config-&gt;object_id);
          </get>
        </class>
        <method
            name = "shutdown"
            label = "Shutdown broker">
            <doc>
          Shuts-down the broker. All client connections are broken, and the
          broker process will exit.
          </doc>
            <exec>
            smt_log_print (amq_broker-&gt;alert_log,
                &quot;W: operator requested shutdown - closing all connections&quot;);
            amq_broker_shutdown (self);
          </exec>
        </method>
        <method
            name = "lock"
            label = "Prevent new connections">
            <doc>
          Locks or unlocks the broker. When the broker is locked it will refuse
          new client connections, though you can still connect using the shell.
          </doc>
            <field
                name = "setting"
                type = "bool"
                label = "1|0"/>
            <exec>self-&gt;locked = setting;</exec>
        </method>
    </class>
    <class
        name = "exchange"
        parent = "broker"
        label = "Exchange">
        <field
            name = "name">
            <get>icl_shortstr_cpy (field_value, self-&gt;name);</get>
        </field>
        <field
            name = "type">
            <get>icl_shortstr_cpy (field_value, amq_exchange_type_name (self-&gt;type));</get>
        </field>
        <field
            name = "bindings"
            label = "Number of bindings"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_binding_list_count (self-&gt;binding_list));</get>
        </field>
        <field
            name = "messages_in"
            type = "int"
            label = "Messages published">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;contents_in);</get>
        </field>
        <field
            name = "messages_out"
            type = "int"
            label = "Messages routed">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;contents_out);</get>
        </field>
        <field
            name = "megabytes_in"
            type = "int"
            label = "Megabytes published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (self-&gt;traffic_in / (1024 * 1024)));</get>
        </field>
        <field
            name = "megabytes_out"
            type = "int"
            label = "Megabytes routed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (self-&gt;traffic_out / (1024 * 1024)));</get>
        </field>
        <class
            name = "binding"
            label = "Bindings"
            repeat = "1"
            source = "amq_binding_mgt">
            <local>
            amq_binding_t
                *binding;
          </local>
            <get>
            binding = amq_binding_list_first (self-&gt;binding_list);
            if (binding)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, binding-&gt;binding_mgt-&gt;object_id);
          </get>
            <next>
            binding = amq_binding_list_next (&amp;binding);
            if (binding)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, binding-&gt;binding_mgt-&gt;object_id);
          </next>
        </class>
    </class>
    <class
        name = "binding"
        parent = "exchange"
        label = "Binding">
        <field
            name = "name"
            label = "Routing key">
            <get>icl_shortstr_cpy (field_value, self-&gt;binding-&gt;routing_key);</get>
        </field>
        <field
            name = "arguments"
            label = "Binding arguments">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, self-&gt;binding-&gt;arguments_str);</get>
        </field>
        <field
            name = "queues"
            label = "Number of queues"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_queue_list_count (self-&gt;binding-&gt;queue_list));</get>
        </field>
        <field
            name = "exclusive"
            label = "Exclusive binding?"
            type = "bool">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;binding-&gt;exclusive);</get>
        </field>
    </class>
    <class
        name = "queue"
        parent = "broker"
        label = "Message Queue">
        <field
            name = "name">
            <get>icl_shortstr_cpy (field_value, self-&gt;name);</get>
        </field>
        <field
            name = "pending"
            label = "Messages pending"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_queue_message_count (self));</get>
        </field>
        <field
            name = "durable"
            label = "Durable queue?"
            type = "bool">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;durable);</get>
        </field>
        <field
            name = "exclusive"
            label = "Exclusive queue?"
            type = "bool">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;exclusive);</get>
        </field>
        <field
            name = "client"
            label = "Client host name">
            <rule
                name = "show on summary"/>
            <rule
                name = "ip address"/>
            <local
                name = "get">
            amq_server_connection_t
                *connection;
          </local>
            <get>
            connection = amq_server_connection_link (self-&gt;connection);
            if (connection) {
                icl_shortstr_cpy (field_value, connection-&gt;client_address);
                amq_server_connection_unlink (&amp;connection);
            }
            else
                icl_shortstr_cpy (field_value, &quot;&quot;);
          </get>
        </field>
        <field
            name = "exchange_type"
            label = "Exchange type">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, amq_exchange_type_name (self-&gt;last_exchange_type));</get>
        </field>
        <field
            name = "routing_key"
            label = "Routing key">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, self-&gt;last_routing_key);</get>
        </field>
        <field
            name = "binding_args"
            label = "Binding arguments">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, self-&gt;last_binding_args);</get>
        </field>
        <field
            name = "auto_delete"
            label = "Auto-deleted?"
            type = "bool">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;auto_delete);</get>
        </field>
        <field
            name = "consumers"
            label = "Number of consumers"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_queue_basic_consumer_count (self-&gt;queue_basic));</get>
        </field>
        <field
            name = "messages_in"
            type = "int"
            label = "Messages published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;contents_in);</get>
        </field>
        <field
            name = "messages_out"
            type = "int"
            label = "Messages consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;contents_out);</get>
        </field>
        <field
            name = "megabytes_in"
            type = "int"
            label = "Megabytes published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (self-&gt;traffic_in / (1024 * 1024)));</get>
        </field>
        <field
            name = "megabytes_out"
            type = "int"
            label = "Megabytes consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (self-&gt;traffic_out / (1024 * 1024)));</get>
        </field>
        <field
            name = "drop_count"
            type = "int"
            label = "Messages dropped">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, self-&gt;drop_count);</get>
        </field>
        <class
            name = "queue_connection"
            label = "Queue connections"
            repeat = "1"
            source = "amq_queue_connection">
            <local>
            amq_consumer_t
                *consumer;              //  Consumer object reference
          </local>
            <get>
            consumer = amq_consumer_by_queue_first (self-&gt;queue_basic-&gt;consumer_list);
            if (consumer)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, consumer-&gt;mgt_queue_connection-&gt;object_id);
          </get>
            <next>
            consumer = amq_consumer_by_queue_next (&amp;consumer);
            if (consumer)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, consumer-&gt;mgt_queue_connection-&gt;object_id);
          </next>
        </class>
        <method
            name = "purge"
            label = "Purge all queue messages">
            <exec>amq_queue_basic_purge (self-&gt;queue_basic);</exec>
        </method>
    </class>
    <class
        name = "queue_connection"
        parent = "queue"
        label = "Queue connection">
        <field
            name = "name"
            label = "Connection name">
            <local>
            amq_server_connection_t
                *connection;
          </local>
            <header>
            connection = amq_server_connection_link (self-&gt;connection);
            if (connection) {
          </header>
            <get>icl_shortstr_cpy (field_value, connection-&gt;id);</get>
            <footer>
                amq_server_connection_unlink (&amp;connection);
            }
          </footer>
        </field>
        <field
            name = "address"
            label = "Client IP address:port">
            <rule
                name = "show on summary"/>
            <rule
                name = "ip address"/>
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_address);</get>
        </field>
        <field
            name = "user_name"
            label = "User login name">
            <get>icl_shortstr_cpy (field_value, connection-&gt;user_name);</get>
        </field>
        <field
            name = "instance"
            label = "Client instance name">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_instance);</get>
        </field>
        <field
            name = "started"
            label = "Date, time connection started">
            <get>ipr_time_iso8601 (connection-&gt;started,
            ipr_date_format_minute, 0, FALSE, field_value);</get>
        </field>
        <field
            name = "messages_in"
            type = "int"
            label = "Messages published">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;contents_in);</get>
        </field>
        <field
            name = "messages_out"
            type = "int"
            label = "Messages consumed">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;contents_out);</get>
        </field>
        <field
            name = "megabytes_in"
            type = "int"
            label = "Megabytes published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (connection-&gt;traffic_in / (1024 * 1024)));</get>
        </field>
        <field
            name = "megabytes_out"
            type = "int"
            label = "Megabytes consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (connection-&gt;traffic_out / (1024 * 1024)));</get>
        </field>
        <field
            name = "product"
            label = "Reported client product name">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_product);</get>
        </field>
        <field
            name = "version"
            label = "Reported client version">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_version);</get>
        </field>
        <field
            name = "platform"
            label = "Reported client platform">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_platform);</get>
        </field>
        <field
            name = "information"
            label = "Other client information">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_information);</get>
        </field>
        <field
            name = "trace"
            label = "Trace level, 0-3"
            type = "int">
            <get>
            icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;trace);
          </get>
            <put>
            amq_server_connection_set_trace (connection, atoi (field_value));
          </put>
        </field>
        <method
            name = "kill"
            label = "Kill connection">
            <doc>
          Disconnects the client application.
          </doc>
            <local>
            amq_server_connection_t
                *connection;
          </local>
            <exec>
            connection = amq_server_connection_link (self-&gt;connection);
            if (connection) {
                smt_log_print (amq_broker-&gt;alert_log,
                    &quot;W: operator killed connection to %s&quot;, connection-&gt;client_address);
                amq_server_connection_kill (connection);
                amq_server_connection_unlink (&amp;connection);
            }
          </exec>
        </method>
    </class>
    <class
        name = "connection"
        parent = "broker"
        label = "Client Connection">
        <field
            name = "name"
            label = "Connection name">
            <local>
            amq_server_connection_t
                *connection;
          </local>
            <header>
            connection = amq_server_connection_link (self-&gt;connection);
            if (connection) {
          </header>
            <get>icl_shortstr_cpy (field_value, connection-&gt;id);</get>
            <footer>
                amq_server_connection_unlink (&amp;connection);
            }
          </footer>
        </field>
        <field
            name = "pending"
            label = "Messages pending"
            type = "int">
            <rule
                name = "show on summary"/>
            <local
                name = "get">
            size_t
                pending = 0;
            amq_consumer_t
                *consumer;              //  Consumer object reference
            amq_server_channel_t
                *channel;
            amq_queue_t
                *queue;
          </local>
            <get>
            //  Count total pending messages in all private (exclusive) queues
            channel = amq_server_channel_link (self-&gt;channel);
            if (channel) {
                consumer = amq_consumer_by_channel_first (channel-&gt;consumer_list);
                while (consumer) {
                    queue = amq_queue_link (consumer-&gt;queue);
                    if (queue) {
                        if (queue-&gt;exclusive)
                            pending += amq_queue_message_count (queue);
                        amq_queue_unlink (&amp;queue);
                    }
                    consumer = amq_consumer_by_channel_next (&amp;consumer);
                }
                amq_server_channel_unlink (&amp;channel);
            }
            icl_shortstr_fmt (field_value, &quot;%d&quot;, pending);
          </get>
        </field>
        <field
            name = "address"
            label = "Client IP address:port">
            <rule
                name = "show on summary"/>
            <rule
                name = "ip address"/>
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_address);</get>
        </field>
        <field
            name = "user_name"
            label = "User login name">
            <get>icl_shortstr_cpy (field_value, connection-&gt;user_name);</get>
        </field>
        <field
            name = "instance"
            label = "Client instance name">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_instance);</get>
        </field>
        <field
            name = "started"
            label = "Date, time connection started">
            <get>ipr_time_iso8601 (connection-&gt;started,
            ipr_date_format_minute, 0, FALSE, field_value);</get>
        </field>
        <field
            name = "messages_in"
            type = "int"
            label = "Messages published">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;contents_in);</get>
        </field>
        <field
            name = "messages_out"
            type = "int"
            label = "Messages consumed">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;contents_out);</get>
        </field>
        <field
            name = "megabytes_in"
            type = "int"
            label = "Megabytes published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (connection-&gt;traffic_in / (1024 * 1024)));</get>
        </field>
        <field
            name = "megabytes_out"
            type = "int"
            label = "Megabytes consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (connection-&gt;traffic_out / (1024 * 1024)));</get>
        </field>
        <field
            name = "product"
            label = "Reported client product name">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_product);</get>
        </field>
        <field
            name = "version"
            label = "Reported client version">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_version);</get>
        </field>
        <field
            name = "platform"
            label = "Reported client platform">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_platform);</get>
        </field>
        <field
            name = "information"
            label = "Other client information">
            <get>icl_shortstr_cpy (field_value, connection-&gt;client_information);</get>
        </field>
        <field
            name = "trace"
            label = "Trace level, 0-3"
            type = "int">
            <get>
            icl_shortstr_fmt (field_value, &quot;%d&quot;, connection-&gt;trace);
          </get>
            <put>
            amq_server_connection_set_trace (connection, atoi (field_value));
          </put>
        </field>
        <class
            name = "connection_queue"
            label = "Connection queues"
            repeat = "1"
            source = "amq_connection_queue">
            <get>
            channel = amq_server_channel_link (self-&gt;channel);
            if (channel) {
                consumer = amq_consumer_by_channel_first (channel-&gt;consumer_list);
                if (consumer)
                    icl_shortstr_fmt (field_value, &quot;%d&quot;, consumer-&gt;mgt_connection_queue-&gt;object_id);
                amq_server_channel_unlink (&amp;channel);
            }
          </get>
            <next>
            consumer = amq_consumer_by_channel_next (&amp;consumer);
            if (consumer)
                icl_shortstr_fmt (field_value, &quot;%d&quot;, consumer-&gt;mgt_connection_queue-&gt;object_id);
          </next>
        </class>
        <method
            name = "kill"
            label = "Kill connection">
            <doc>
          Disconnects the client application.
          </doc>
            <local>
            amq_server_connection_t
                *connection;
          </local>
            <exec>
            connection = amq_server_connection_link (self-&gt;connection);
            if (connection) {
                smt_log_print (amq_broker-&gt;alert_log,
                    &quot;W: operator killed connection to %s&quot;, connection-&gt;client_address);
                amq_server_connection_kill (connection);
                amq_server_connection_unlink (&amp;connection);
            }
          </exec>
        </method>
    </class>
    <class
        name = "connection_queue"
        parent = "connection"
        label = "Connection queue">
        <field
            name = "name">
            <local>
            amq_queue_t
                *queue;
          </local>
            <header>
            queue = amq_queue_link (self-&gt;queue);
            if (queue) {
          </header>
            <get>icl_shortstr_cpy (field_value, queue-&gt;name);</get>
            <footer>
                amq_queue_unlink (&amp;queue);
            }
          </footer>
        </field>
        <field
            name = "enabled"
            label = "Queue accepts new messages?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;enabled);</get>
            <put>queue-&gt;enabled = atoi (field_value);</put>
        </field>
        <field
            name = "durable"
            label = "Durable queue?"
            type = "bool">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;durable);</get>
        </field>
        <field
            name = "exclusive"
            label = "Exclusive to one client?"
            type = "bool">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;exclusive);</get>
        </field>
        <field
            name = "exchange_type"
            label = "Exchange type">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, amq_exchange_type_name (queue-&gt;last_exchange_type));</get>
        </field>
        <field
            name = "routing_key"
            label = "Routing key">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, queue-&gt;last_routing_key);</get>
        </field>
        <field
            name = "binding_args"
            label = "Binding arguments">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_cpy (field_value, queue-&gt;last_binding_args);</get>
        </field>
        <field
            name = "auto_delete"
            label = "Auto-deleted?"
            type = "bool">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;auto_delete);</get>
        </field>
        <field
            name = "consumers"
            label = "Number of consumers"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_queue_basic_consumer_count (queue-&gt;queue_basic));</get>
        </field>
        <field
            name = "pending"
            label = "Messages pending"
            type = "int">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_queue_message_count (queue));</get>
        </field>
        <field
            name = "messages_in"
            type = "int"
            label = "Messages published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;contents_in);</get>
        </field>
        <field
            name = "messages_out"
            type = "int"
            label = "Messages consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;contents_out);</get>
        </field>
        <field
            name = "megabytes_in"
            type = "int"
            label = "Megabytes published">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (queue-&gt;traffic_in / (1024 * 1024)));</get>
        </field>
        <field
            name = "megabytes_out"
            type = "int"
            label = "Megabytes consumed">
            <rule
                name = "show on summary"/>
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, (int) (queue-&gt;traffic_out / (1024 * 1024)));</get>
        </field>
        <field
            name = "dropped"
            type = "int"
            label = "Messages dropped">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, queue-&gt;dropped);</get>
        </field>
        <method
            name = "purge"
            label = "Purge all queue messages">
            <local>
            amq_queue_t
                *queue;
          </local>
            <exec>
            queue = amq_queue_link (self-&gt;queue);
            if (queue) {
                amq_queue_basic_purge (queue-&gt;queue_basic);
                amq_queue_unlink (&amp;queue);
            }
          </exec>
        </method>
    </class>
    <class
        name = "config"
        parent = "broker"
        label = "Configuration">
        <field
            name = "name"
            label = "Configuration name">
            <get>icl_shortstr_cpy (field_value, amq_server_config-&gt;filename);</get>
        </field>
        <field
            name = "port"
            type = "string"
            label = "Server port for clients">
            <get>icl_shortstr_cpy (field_value, amq_server_config_port (amq_server_config));</get>
            <put>
          amq_server_config_set_port (amq_server_config, field_value);
          notice_text = &quot;To activate the new port setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "listen"
            type = "string"
            label = "Address (local network interface) to listen on">
            <get>icl_shortstr_cpy (field_value, amq_server_config_listen (amq_server_config));</get>
            <put>
          amq_server_config_set_listen (amq_server_config, field_value);
          notice_text = &quot;To activate the new listen setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "queue_timeout"
            type = "int"
            label = "Timeout for auto-deleted queues">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_queue_timeout (amq_server_config));</get>
            <put>
          amq_server_config_set_queue_timeout (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "vhost"
            type = "string"
            label = "Server vhost identifier">
            <get>icl_shortstr_cpy (field_value, amq_server_config_vhost (amq_server_config));</get>
            <put>
          amq_server_config_set_vhost (amq_server_config, field_value);
          notice_text = &quot;To activate the new vhost setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "user"
            type = "string"
            label = "User to run server as">
            <get>icl_shortstr_cpy (field_value, amq_server_config_user (amq_server_config));</get>
            <put>
          amq_server_config_set_user (amq_server_config, field_value);
          notice_text = &quot;To activate the new user setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "group"
            type = "string"
            label = "Group to run server as">
            <get>icl_shortstr_cpy (field_value, amq_server_config_group (amq_server_config));</get>
            <put>
          amq_server_config_set_group (amq_server_config, field_value);
          notice_text = &quot;To activate the new group setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "monitor"
            type = "int"
            label = "Monitor interval, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_monitor (amq_server_config));</get>
            <put>
          amq_server_config_set_monitor (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "dump_state"
            type = "int"
            label = "Dump state interval, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_dump_state (amq_server_config));</get>
            <put>
          amq_server_config_set_dump_state (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "record_stats"
            type = "bool"
            label = "Record performance statistics">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_record_stats (amq_server_config));</get>
            <put>
          amq_server_config_set_record_stats (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "log_path"
            type = "string"
            label = "Active log file directory">
            <get>icl_shortstr_cpy (field_value, amq_server_config_log_path (amq_server_config));</get>
            <put>
          amq_server_config_set_log_path (amq_server_config, field_value);
          notice_text = &quot;To activate the new log_path setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "keep_logs"
            type = "bool"
            label = "Keep log files">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_keep_logs (amq_server_config));</get>
            <put>
          amq_server_config_set_keep_logs (amq_server_config, atoi (field_value));
          notice_text = &quot;To activate the new keep_logs setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "archive_path"
            type = "string"
            label = "Archive log file directory">
            <get>icl_shortstr_cpy (field_value, amq_server_config_archive_path (amq_server_config));</get>
            <put>
          amq_server_config_set_archive_path (amq_server_config, field_value);
          notice_text = &quot;To activate the new archive_path setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "archive_cmd"
            type = "string"
            label = "Archive log file command">
            <get>icl_shortstr_cpy (field_value, amq_server_config_archive_cmd (amq_server_config));</get>
            <put>
          amq_server_config_set_archive_cmd (amq_server_config, field_value);
          notice_text = &quot;To activate the new archive_cmd setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "alert_log"
            type = "string"
            label = "Error log file name">
            <get>icl_shortstr_cpy (field_value, amq_server_config_alert_log (amq_server_config));</get>
            <put>
          amq_server_config_set_alert_log (amq_server_config, field_value);
          notice_text = &quot;To activate the new alert_log setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "daily_log"
            type = "string"
            label = "Daily log file name">
            <get>icl_shortstr_cpy (field_value, amq_server_config_daily_log (amq_server_config));</get>
            <put>
          amq_server_config_set_daily_log (amq_server_config, field_value);
          notice_text = &quot;To activate the new daily_log setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "debug_log"
            type = "string"
            label = "Debug log file name">
            <get>icl_shortstr_cpy (field_value, amq_server_config_debug_log (amq_server_config));</get>
            <put>
          amq_server_config_set_debug_log (amq_server_config, field_value);
          notice_text = &quot;To activate the new debug_log setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "debug_route"
            type = "bool"
            label = "Debug message routing?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_debug_route (amq_server_config));</get>
            <put>
          amq_server_config_set_debug_route (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "debug_queue"
            type = "bool"
            label = "Debug queue activity?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_debug_queue (amq_server_config));</get>
            <put>
          amq_server_config_set_debug_queue (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "debug_peering"
            type = "bool"
            label = "Debug peering messages?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_debug_peering (amq_server_config));</get>
            <put>
          amq_server_config_set_debug_peering (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "debug_console"
            type = "bool"
            label = "Debug console I/O?">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_debug_console (amq_server_config));</get>
            <put>
          amq_server_config_set_debug_console (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "trace"
            type = "int"
            label = "Protocol trace level">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_trace (amq_server_config));</get>
            <put>
          amq_server_config_set_trace (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "heartbeat"
            type = "int"
            label = "Heartbeat timer, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_heartbeat (amq_server_config));</get>
            <put>
          amq_server_config_set_heartbeat (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "setup_timeout"
            type = "int"
            label = "Connection setup timeout, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_setup_timeout (amq_server_config));</get>
            <put>
          amq_server_config_set_setup_timeout (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new setup_timeout setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "close_timeout"
            type = "int"
            label = "Connection close timeout, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_close_timeout (amq_server_config));</get>
            <put>
          amq_server_config_set_close_timeout (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new close_timeout setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "accept_retry_timeout"
            type = "int"
            label = "Timeout before retrying accept calls, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_accept_retry_timeout (amq_server_config));</get>
            <put>
          amq_server_config_set_accept_retry_timeout (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new accept_retry_timeout setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "polling_threads"
            type = "int"
            label = "Number of polling OS threads">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_polling_threads (amq_server_config));</get>
            <put>
          amq_server_config_set_polling_threads (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new polling_threads setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "working_threads"
            type = "int"
            label = "Number of working OS threads">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_working_threads (amq_server_config));</get>
            <put>
          amq_server_config_set_working_threads (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new working_threads setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "tcp_nodelay"
            type = "bool"
            label = "TCP/IP NODELAY option">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_tcp_nodelay (amq_server_config));</get>
            <put>
          amq_server_config_set_tcp_nodelay (amq_server_config, atoi (field_value));
          </put>
        </field>
        <field
            name = "tcp_rcvbuf"
            type = "int"
            label = "TCP/IP receive buffer, in bytes">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_tcp_rcvbuf (amq_server_config));</get>
            <put>
          amq_server_config_set_tcp_rcvbuf (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "tcp_sndbuf"
            type = "int"
            label = "TCP/IP send buffer, in bytes">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_tcp_sndbuf (amq_server_config));</get>
            <put>
          amq_server_config_set_tcp_sndbuf (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "frame_max"
            type = "int"
            label = "Maximum size of AMQP content frames">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_frame_max (amq_server_config));</get>
            <put>
          amq_server_config_set_frame_max (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new frame_max setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "direct"
            type = "int"
            label = "Enables Direct Mode for client connections">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_direct (amq_server_config));</get>
            <put>
          amq_server_config_set_direct (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new direct setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "private_credit"
            type = "int"
            label = "Credit window for private queues">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_private_credit (amq_server_config));</get>
            <put>
          amq_server_config_set_private_credit (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new private_credit setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "shared_credit"
            type = "int"
            label = "Credit window for shared queues">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_shared_credit (amq_server_config));</get>
            <put>
          amq_server_config_set_shared_credit (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new shared_credit setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "backup"
            type = "string"
            label = "Failover backup host:port">
            <get>icl_shortstr_cpy (field_value, amq_server_config_backup (amq_server_config));</get>
            <put>
          amq_server_config_set_backup (amq_server_config, field_value);
          notice_text = &quot;To activate the new backup setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "primary"
            type = "string"
            label = "Failover primary host:port">
            <get>icl_shortstr_cpy (field_value, amq_server_config_primary (amq_server_config));</get>
            <put>
          amq_server_config_set_primary (amq_server_config, field_value);
          notice_text = &quot;To activate the new primary setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "failover_timeout"
            type = "int"
            label = "Failover timeout, in seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_failover_timeout (amq_server_config));</get>
            <put>
          amq_server_config_set_failover_timeout (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new failover_timeout setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "attach"
            type = "string"
            label = "Enable auto-federation to specified host">
            <get>icl_shortstr_cpy (field_value, amq_server_config_attach (amq_server_config));</get>
            <put>
          amq_server_config_set_attach (amq_server_config, field_value);
          notice_text = &quot;To activate the new attach setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "attach_vhost"
            type = "string"
            label = "Auto-federation virtual host name">
            <get>icl_shortstr_cpy (field_value, amq_server_config_attach_vhost (amq_server_config));</get>
            <put>
          amq_server_config_set_attach_vhost (amq_server_config, field_value);
          notice_text = &quot;To activate the new attach_vhost setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "attach_login"
            type = "string"
            label = "Auto-federation login user name">
            <get>icl_shortstr_cpy (field_value, amq_server_config_attach_login (amq_server_config));</get>
            <put>
          amq_server_config_set_attach_login (amq_server_config, field_value);
          notice_text = &quot;To activate the new attach_login setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "attach_all"
            type = "string"
            label = "Auto-federate exchanges by pattern">
            <get>icl_shortstr_cpy (field_value, amq_server_config_attach_all (amq_server_config));</get>
            <put>
          amq_server_config_set_attach_all (amq_server_config, field_value);
          notice_text = &quot;To activate the new attach_all setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "batching"
            type = "int"
            label = "Maximum size of Direct Mode batches">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_batching (amq_server_config));</get>
            <put>
          amq_server_config_set_batching (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new batching setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "direct_heartbeat"
            type = "int"
            label = "Heartbeat timer, seconds for Direct Mode">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_direct_heartbeat (amq_server_config));</get>
            <put>
          amq_server_config_set_direct_heartbeat (amq_server_config, atol (field_value));
          notice_text = &quot;To activate the new direct_heartbeat setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "no_ack"
            type = "bool"
            label = "Do not implement acknowledgments">
            <get>icl_shortstr_fmt (field_value, &quot;%d&quot;, amq_server_config_no_ack (amq_server_config));</get>
            <put>
          amq_server_config_set_no_ack (amq_server_config, atoi (field_value));
          notice_text = &quot;To activate the new no_ack setting, restart the broker&quot;;
          </put>
        </field>
        <field
            name = "auto_crash"
            type = "int"
            label = "Auto-crash test timer, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_auto_crash (amq_server_config));</get>
            <put>
          amq_server_config_set_auto_crash (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "auto_block"
            type = "int"
            label = "Auto-freeze test timer, seconds">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_auto_block (amq_server_config));</get>
            <put>
          amq_server_config_set_auto_block (amq_server_config, atol (field_value));
          </put>
        </field>
        <field
            name = "kernel_limit"
            type = "int"
            label = "SMT kernel limit">
            <get>icl_shortstr_fmt (field_value, &quot;%ld&quot;, amq_server_config_kernel_limit (amq_server_config));</get>
            <put>
          amq_server_config_set_kernel_limit (amq_server_config, atol (field_value));
          </put>
        </field>
        <method
            name = "commit"
            label = "Save custom configuration file">
            <exec>amq_server_config_commit (amq_server_config, NULL);</exec>
        </method>
        <method
            name = "rollback"
            label = "Restore previous configuration">
            <exec>amq_server_config_rollback (amq_server_config);</exec>
        </method>
    </class>
</root>

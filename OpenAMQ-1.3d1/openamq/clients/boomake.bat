@echo off
:-
:-  Boom builder for OpenAMQ Client 1.3d1
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=1.3d1
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [OpenAMQ_Client]: The IBASE variable is not set.  Please set it to the location where OpenAMQ Client should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    echo boom I: [OpenAMQ_Client]: Building OpenAMQ Client...
    if "!MSVCDir!"=="" set MSVCDir=C:\Program Files\Microsoft Visual Studio\VC98
    if not exist "!MSVCDir!\bin" (
        echo boom E: [OpenAMQ_Client]: Cannot find MSVC compiler in !MSVCdir!.
        echo boom E: [OpenAMQ_Client]: Please set MSVCDir environment variable to VC98 directory.
        set _exception=1
        goto :eof
    )
    set INCDIR=
    set LIBDIR=
    if "!BOOM_TRACE!"=="1" (
        set MY_COPTS=-v
    ) else (
        set MY_COPTS=-q
    )
    if not "!_LOCAL_BASE!"=="" (
        set MY_COPTS=!MY_COPTS! -li !_LOCAL_BASE!\include -ll !_LOCAL_BASE!\lib
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client
    verify>nul
    call c !MY_COPTS! amq_client
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_method_test
    verify>nul
    call c !MY_COPTS! amq_client_method_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_method_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_method
    verify>nul
    call c !MY_COPTS! amq_client_method
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_method' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_method
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_method
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_method' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_agent
    verify>nul
    call c !MY_COPTS! amq_client_agent
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_agent' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_config_test
    verify>nul
    call c !MY_COPTS! amq_client_config_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_config_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_config
    verify>nul
    call c !MY_COPTS! amq_client_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_config
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_classes
    verify>nul
    call c !MY_COPTS! amq_client_classes
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_classes' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_classes
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_classes
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_classes' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_connection_test
    verify>nul
    call c !MY_COPTS! amq_client_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_connection
    verify>nul
    call c !MY_COPTS! amq_client_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_session_test
    verify>nul
    call c !MY_COPTS! amq_client_session_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_session_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_session
    verify>nul
    call c !MY_COPTS! amq_client_session
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_session' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_session
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_session
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_session' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_channel_test
    verify>nul
    call c !MY_COPTS! amq_client_channel_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_channel_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_channel
    verify>nul
    call c !MY_COPTS! amq_client_channel
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_channel' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_channel
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_channel
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_channel' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_channel_table_test
    verify>nul
    call c !MY_COPTS! amq_client_channel_table_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_channel_table_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_client_channel_table
    verify>nul
    call c !MY_COPTS! amq_client_channel_table
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! amq_client_channel_table' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_client_channel_table
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_client_channel_table
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! amq_client_channel_table' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_method
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_method
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_method' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_method
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_method
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_method' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_agent
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_agent
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_agent' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_config
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_config
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_classes
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_classes
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_classes' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_classes
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_classes
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_classes' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_connection
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_session
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_session
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_session' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_session
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_session
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_session' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table
    verify>nul
    call c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c -p !MY_COPTS! -r libamq_wireapi.lib amq_client_channel_table' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client
    verify>nul
    call c !MY_COPTS! -L amq_client
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_method_test
    verify>nul
    call c !MY_COPTS! -L amq_client_method_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_method_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_config_test
    verify>nul
    call c !MY_COPTS! -L amq_client_config_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_config_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_connection_test
    verify>nul
    call c !MY_COPTS! -L amq_client_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_session_test
    verify>nul
    call c !MY_COPTS! -L amq_client_session_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_session_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_channel_test
    verify>nul
    call c !MY_COPTS! -L amq_client_channel_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_channel_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_client_channel_table_test
    verify>nul
    call c !MY_COPTS! -L amq_client_channel_table_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'c !MY_COPTS! -L amq_client_channel_table_test' failed - stop.
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist clients\version.h echo clients\version.h>>_package.lst
    if exist clients\wireapi.h echo clients\wireapi.h>>_package.lst
    if exist clients\amq_client.c echo clients\amq_client.c>>_package.lst
    if exist clients\amq_client.asl echo clients\amq_client.asl>>_package.lst
    if exist clients\amq_client_method.icl echo clients\amq_client_method.icl>>_package.lst
    if exist clients\amq_client_agent.smt echo clients\amq_client_agent.smt>>_package.lst
    if exist clients\amq_client_config.opf echo clients\amq_client_config.opf>>_package.lst
    if exist clients\amq_client_config.icl echo clients\amq_client_config.icl>>_package.lst
    if exist clients\amq_client_classes.icl echo clients\amq_client_classes.icl>>_package.lst
    if exist clients\amq_client_connection.icl echo clients\amq_client_connection.icl>>_package.lst
    if exist clients\amq_client_session.icl echo clients\amq_client_session.icl>>_package.lst
    if exist clients\amq_client_channel.icl echo clients\amq_client_channel.icl>>_package.lst
    if exist clients\amq_client_channel_table.icl echo clients\amq_client_channel_table.icl>>_package.lst
    if exist clients\amq_client_chrono.pal echo clients\amq_client_chrono.pal>>_package.lst
    if exist clients\prelude.pdl echo clients\prelude.pdl>>_package.lst
    if exist clients\license.gpl echo clients\license.gpl>>_package.lst
    if exist clients\project.pdl echo clients\project.pdl>>_package.lst
    if exist clients\readme.txt echo clients\readme.txt>>_package.lst
    if exist clients\amq_client_method_test.c echo clients\amq_client_method_test.c>>_package.lst
    if exist clients\amq_client_method.h echo clients\amq_client_method.h>>_package.lst
    if exist clients\amq_client_method.c echo clients\amq_client_method.c>>_package.lst
    if exist clients\amq_client_method.hpp echo clients\amq_client_method.hpp>>_package.lst
    if exist clients\amq_client_method.cpp echo clients\amq_client_method.cpp>>_package.lst
    if exist clients\amq_client_agent.h echo clients\amq_client_agent.h>>_package.lst
    if exist clients\amq_client_agent.c echo clients\amq_client_agent.c>>_package.lst
    if exist clients\amq_client_agent.hpp echo clients\amq_client_agent.hpp>>_package.lst
    if exist clients\amq_client_config_test.c echo clients\amq_client_config_test.c>>_package.lst
    if exist clients\amq_client_config.h echo clients\amq_client_config.h>>_package.lst
    if exist clients\amq_client_config.c echo clients\amq_client_config.c>>_package.lst
    if exist clients\amq_client_config.hpp echo clients\amq_client_config.hpp>>_package.lst
    if exist clients\amq_client_config.cpp echo clients\amq_client_config.cpp>>_package.lst
    if exist clients\amq_client_classes.h echo clients\amq_client_classes.h>>_package.lst
    if exist clients\amq_client_classes.c echo clients\amq_client_classes.c>>_package.lst
    if exist clients\amq_client_classes.hpp echo clients\amq_client_classes.hpp>>_package.lst
    if exist clients\amq_client_classes.cpp echo clients\amq_client_classes.cpp>>_package.lst
    if exist clients\amq_client_connection_test.c echo clients\amq_client_connection_test.c>>_package.lst
    if exist clients\amq_client_connection.h echo clients\amq_client_connection.h>>_package.lst
    if exist clients\amq_client_connection.c echo clients\amq_client_connection.c>>_package.lst
    if exist clients\amq_client_connection.hpp echo clients\amq_client_connection.hpp>>_package.lst
    if exist clients\amq_client_connection.cpp echo clients\amq_client_connection.cpp>>_package.lst
    if exist clients\amq_client_session_test.c echo clients\amq_client_session_test.c>>_package.lst
    if exist clients\amq_client_session.h echo clients\amq_client_session.h>>_package.lst
    if exist clients\amq_client_session.c echo clients\amq_client_session.c>>_package.lst
    if exist clients\amq_client_session.hpp echo clients\amq_client_session.hpp>>_package.lst
    if exist clients\amq_client_session.cpp echo clients\amq_client_session.cpp>>_package.lst
    if exist clients\amq_client_channel_test.c echo clients\amq_client_channel_test.c>>_package.lst
    if exist clients\amq_client_channel.h echo clients\amq_client_channel.h>>_package.lst
    if exist clients\amq_client_channel.c echo clients\amq_client_channel.c>>_package.lst
    if exist clients\amq_client_channel.hpp echo clients\amq_client_channel.hpp>>_package.lst
    if exist clients\amq_client_channel.cpp echo clients\amq_client_channel.cpp>>_package.lst
    if exist clients\amq_client_channel_table_test.c echo clients\amq_client_channel_table_test.c>>_package.lst
    if exist clients\amq_client_channel_table.h echo clients\amq_client_channel_table.h>>_package.lst
    if exist clients\amq_client_channel_table.c echo clients\amq_client_channel_table.c>>_package.lst
    if exist clients\amq_client_channel_table.hpp echo clients\amq_client_channel_table.hpp>>_package.lst
    if exist clients\amq_client_channel_table.cpp echo clients\amq_client_channel_table.cpp>>_package.lst
    if exist clients\stamp_generate echo clients\stamp_generate>>_package.lst
    if exist clients\configure echo clients\configure>>_package.lst
    if exist clients\Makefile.unix echo clients\Makefile.unix>>_package.lst
    if exist clients\boomake echo clients\boomake>>_package.lst
    if exist clients\configure.bat echo clients\configure.bat>>_package.lst
    if exist clients\Makefile.win32 echo clients\Makefile.win32>>_package.lst
    if exist clients\boomake.bat echo clients\boomake.bat>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [OpenAMQ_Client]: Building OpenAMQ_Client-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d OpenAMQ_Client-!MY_VERSION!
    if exist  OpenAMQ_Client-!MY_VERSION!-src.zip del OpenAMQ_Client-!MY_VERSION!-src.zip
    zip -rmq OpenAMQ_Client-!MY_VERSION!-src.zip OpenAMQ_Client-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist version.h (
        echo boom E: [OpenAMQ_Client]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist wireapi.h (
        echo boom E: [OpenAMQ_Client]: wireapi.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.c (
        echo boom E: [OpenAMQ_Client]: amq_client.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.asl (
        echo boom E: [OpenAMQ_Client]: amq_client.asl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_method.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.smt (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.smt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.opf (
        echo boom E: [OpenAMQ_Client]: amq_client_config.opf is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_config.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_session.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_chrono.pal (
        echo boom E: [OpenAMQ_Client]: amq_client_chrono.pal is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Client]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Client]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_method_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.h (
        echo boom E: [OpenAMQ_Client]: amq_client_method.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.c (
        echo boom E: [OpenAMQ_Client]: amq_client_method.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_method.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_method.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.h (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.c (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_config_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.h (
        echo boom E: [OpenAMQ_Client]: amq_client_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.c (
        echo boom E: [OpenAMQ_Client]: amq_client_config.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_config.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.h (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.c (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.h (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.c (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_session_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.h (
        echo boom E: [OpenAMQ_Client]: amq_client_session.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.c (
        echo boom E: [OpenAMQ_Client]: amq_client_session.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_session.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_session.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [OpenAMQ_Client]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Client]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Client]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Client]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Client]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Client]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Client]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist libamq_wireapi.lib (
        echo boom E: [OpenAMQ_Client]: libamq_wireapi.lib is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist wireapi.h (
        echo boom E: [OpenAMQ_Client]: wireapi.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.exe (
        echo boom E: [OpenAMQ_Client]: amq_client.exe is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_method.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.smt (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.smt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_session.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Client]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.h (
        echo boom E: [OpenAMQ_Client]: amq_client_method.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_method.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_method.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_agent.h (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_agent.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_config.h (
        echo boom E: [OpenAMQ_Client]: amq_client_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_config.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_classes.h (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_classes.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_connection.h (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_connection.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_session.h (
        echo boom E: [OpenAMQ_Client]: amq_client_session.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_session.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_session.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_channel.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_channel_table.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel_table.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist version.h (
        echo boom E: [OpenAMQ_Client]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.c (
        echo boom E: [OpenAMQ_Client]: amq_client.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.asl (
        echo boom E: [OpenAMQ_Client]: amq_client.asl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.opf (
        echo boom E: [OpenAMQ_Client]: amq_client_config.opf is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_chrono.pal (
        echo boom E: [OpenAMQ_Client]: amq_client_chrono.pal is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Client]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Client]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Client]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Client]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Client]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Client]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Client]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Client]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist version.h (
        echo boom E: [OpenAMQ_Client]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist wireapi.h (
        echo boom E: [OpenAMQ_Client]: wireapi.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.c (
        echo boom E: [OpenAMQ_Client]: amq_client.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client.asl (
        echo boom E: [OpenAMQ_Client]: amq_client.asl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_method.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.smt (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.smt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.opf (
        echo boom E: [OpenAMQ_Client]: amq_client_config.opf is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_config.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_session.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.icl (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_chrono.pal (
        echo boom E: [OpenAMQ_Client]: amq_client_chrono.pal is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Client]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Client]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_method_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.h (
        echo boom E: [OpenAMQ_Client]: amq_client_method.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_method.c (
        echo boom E: [OpenAMQ_Client]: amq_client_method.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_method.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_method.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_method.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_method.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_agent.h (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_agent.c (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_agent.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_agent.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_config_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_config_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.h (
        echo boom E: [OpenAMQ_Client]: amq_client_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_config.c (
        echo boom E: [OpenAMQ_Client]: amq_client_config.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_config.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_config.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_config.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_classes.h (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_classes.c (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_classes.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_classes.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_classes.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_connection_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.h (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_connection.c (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_connection.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_connection.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_session_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_session_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.h (
        echo boom E: [OpenAMQ_Client]: amq_client_session.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_session.c (
        echo boom E: [OpenAMQ_Client]: amq_client_session.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_session.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_session.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_session.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_session.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_channel_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_client_channel_table_test.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.h (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_client_channel_table.c (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel_table.hpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_client_channel_table.cpp (
        echo boom E: [OpenAMQ_Client]: amq_client_channel_table.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist stamp_generate (
        echo boom E: [OpenAMQ_Client]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Client]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Client]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Client]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Client]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Client]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Client]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [OpenAMQ_Client]: installing OpenAMQ Client into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\lib\nul mkdir !_INSTALL_ROOT!\lib\
    if "!BOOM_TRACE!"=="1" echo copy/y libamq_wireapi.lib !_INSTALL_ROOT!\lib\>nul
    verify>nul
    call copy/y libamq_wireapi.lib !_INSTALL_ROOT!\lib\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y libamq_wireapi.lib !_INSTALL_ROOT!\lib\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y wireapi.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y wireapi.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y wireapi.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client.exe !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client.exe !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client.exe !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_method.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_method.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_method.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_agent.smt !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_agent.smt !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_agent.smt !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_classes.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_classes.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_classes.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_connection.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_connection.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_connection.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_session.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_session.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_session.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_channel.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel_table.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_client_channel_table.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel_table.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\doc\OpenAMQ_Client\nul mkdir !_INSTALL_ROOT!\doc\OpenAMQ_Client\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Client\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Client\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Client\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_method.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_method.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_method.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_method.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_method.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_method.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_agent.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_agent.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_agent.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_agent.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_agent.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_agent.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_config.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_config.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_config.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_config.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_config.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_config.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_classes.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_classes.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_classes.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_classes.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_classes.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_classes.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_connection.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_connection.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_connection.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_connection.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_connection.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_connection.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_session.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_session.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_session.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_session.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_session.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_session.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_channel.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_channel.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel_table.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_client_channel_table.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel_table.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_client_channel_table.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_client_channel_table.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'copy/y amq_client_channel_table.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [OpenAMQ_Client]: Generating files...
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client.asl
    verify>nul
    call gsl -q -quiet:1 amq_client.asl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client.asl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_method.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_method.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_method.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_method.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_method.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_method.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_agent.smt
    verify>nul
    call gsl -q -quiet:1 amq_client_agent.smt
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_agent.smt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_config.opf
    verify>nul
    call gsl -q -quiet:1 amq_client_config.opf
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_config.opf' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_config.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_config.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_classes.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_classes.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_classes.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_session.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_session.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_session.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_session.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_session.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_session.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_channel.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_channel.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_channel.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_channel_table.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_channel_table.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_channel_table.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist wireapi.h del wireapi.h
    if "!BOOM_TRACE!"=="1" echo type amq_client_connection.h>>wireapi.h
    verify>nul
    call type amq_client_connection.h>>wireapi.h
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'type amq_client_connection.h>>wireapi.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type amq_client_session.h>>wireapi.h
    verify>nul
    call type amq_client_session.h>>wireapi.h
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'type amq_client_session.h>>wireapi.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [OpenAMQ_Client]: Generating files...
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client.asl
    verify>nul
    call gsl -q -quiet:1 amq_client.asl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client.asl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_method.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_method.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_method.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_method.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_method.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_method.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_agent.smt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_agent.smt
    verify>nul
    call gsl -q -quiet:1 amq_client_agent.smt
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_agent.smt' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_config.opf
    verify>nul
    call gsl -q -quiet:1 amq_client_config.opf
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_config.opf' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_config.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_config.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_classes.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_classes.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_classes.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_classes.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_session.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_session.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_session.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_session.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_session.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_session.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_channel.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_channel.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_channel.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_channel.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 -target:stdcpp amq_client_channel_table.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_client_channel_table.icl
    verify>nul
    call gsl -q -quiet:1 amq_client_channel_table.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'gsl -q -quiet:1 amq_client_channel_table.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist wireapi.h del wireapi.h
    if "!BOOM_TRACE!"=="1" echo type amq_client_connection.h>>wireapi.h
    verify>nul
    call type amq_client_connection.h>>wireapi.h
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'type amq_client_connection.h>>wireapi.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type amq_client_session.h>>wireapi.h
    verify>nul
    call type amq_client_session.h>>wireapi.h
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'type amq_client_session.h>>wireapi.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist libamq_wireapi.lib del libamq_wireapi.lib
    if exist amq_client.exe del amq_client.exe
    if exist amq_client.obj del amq_client.obj
    if exist amq_client_method_test_test.obj del amq_client_method_test_test.obj
    if exist amq_client_method_test_test.exe del amq_client_method_test_test.exe
    if exist amq_client_method.obj del amq_client_method.obj
    if exist amq_client_method.opp del amq_client_method.opp
    if exist amq_client_agent.obj del amq_client_agent.obj
    if exist amq_client_config_test_test.obj del amq_client_config_test_test.obj
    if exist amq_client_config_test_test.exe del amq_client_config_test_test.exe
    if exist amq_client_config.obj del amq_client_config.obj
    if exist amq_client_config.opp del amq_client_config.opp
    if exist amq_client_classes.obj del amq_client_classes.obj
    if exist amq_client_classes.opp del amq_client_classes.opp
    if exist amq_client_connection_test_test.obj del amq_client_connection_test_test.obj
    if exist amq_client_connection_test_test.exe del amq_client_connection_test_test.exe
    if exist amq_client_connection.obj del amq_client_connection.obj
    if exist amq_client_connection.opp del amq_client_connection.opp
    if exist amq_client_session_test_test.obj del amq_client_session_test_test.obj
    if exist amq_client_session_test_test.exe del amq_client_session_test_test.exe
    if exist amq_client_session.obj del amq_client_session.obj
    if exist amq_client_session.opp del amq_client_session.opp
    if exist amq_client_channel_test_test.obj del amq_client_channel_test_test.obj
    if exist amq_client_channel_test_test.exe del amq_client_channel_test_test.exe
    if exist amq_client_channel.obj del amq_client_channel.obj
    if exist amq_client_channel.opp del amq_client_channel.opp
    if exist amq_client_channel_table_test_test.obj del amq_client_channel_table_test_test.obj
    if exist amq_client_channel_table_test_test.exe del amq_client_channel_table_test_test.exe
    if exist amq_client_channel_table.obj del amq_client_channel_table.obj
    if exist amq_client_channel_table.opp del amq_client_channel_table.opp
    if exist amq_client_method_test.obj del amq_client_method_test.obj
    if exist amq_client_method_test.exe del amq_client_method_test.exe
    if exist amq_client_method.obj del amq_client_method.obj
    if exist amq_client_agent.obj del amq_client_agent.obj
    if exist amq_client_config_test.obj del amq_client_config_test.obj
    if exist amq_client_config_test.exe del amq_client_config_test.exe
    if exist amq_client_config.obj del amq_client_config.obj
    if exist amq_client_classes.obj del amq_client_classes.obj
    if exist amq_client_connection_test.obj del amq_client_connection_test.obj
    if exist amq_client_connection_test.exe del amq_client_connection_test.exe
    if exist amq_client_connection.obj del amq_client_connection.obj
    if exist amq_client_session_test.obj del amq_client_session_test.obj
    if exist amq_client_session_test.exe del amq_client_session_test.exe
    if exist amq_client_session.obj del amq_client_session.obj
    if exist amq_client_channel_test.obj del amq_client_channel_test.obj
    if exist amq_client_channel_test.exe del amq_client_channel_test.exe
    if exist amq_client_channel.obj del amq_client_channel.obj
    if exist amq_client_channel_table_test.obj del amq_client_channel_table_test.obj
    if exist amq_client_channel_table_test.exe del amq_client_channel_table_test.exe
    if exist amq_client_channel_table.obj del amq_client_channel_table.obj
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist wireapi.h del wireapi.h
    if exist amq_client_method.icl del amq_client_method.icl
    if exist amq_client_agent.smt del amq_client_agent.smt
    if exist amq_client_config.icl del amq_client_config.icl
    if exist amq_client_connection.icl del amq_client_connection.icl
    if exist amq_client_session.icl del amq_client_session.icl
    if exist amq_client_channel_table.icl del amq_client_channel_table.icl
    if exist amq_client_method_test.c del amq_client_method_test.c
    if exist amq_client_method.h del amq_client_method.h
    if exist amq_client_method.c del amq_client_method.c
    if exist amq_client_method.hpp del amq_client_method.hpp
    if exist amq_client_method.cpp del amq_client_method.cpp
    if exist amq_client_agent.h del amq_client_agent.h
    if exist amq_client_agent.c del amq_client_agent.c
    if exist amq_client_agent.hpp del amq_client_agent.hpp
    if exist amq_client_config_test.c del amq_client_config_test.c
    if exist amq_client_config.h del amq_client_config.h
    if exist amq_client_config.c del amq_client_config.c
    if exist amq_client_config.hpp del amq_client_config.hpp
    if exist amq_client_config.cpp del amq_client_config.cpp
    if exist amq_client_classes.h del amq_client_classes.h
    if exist amq_client_classes.c del amq_client_classes.c
    if exist amq_client_classes.hpp del amq_client_classes.hpp
    if exist amq_client_classes.cpp del amq_client_classes.cpp
    if exist amq_client_connection_test.c del amq_client_connection_test.c
    if exist amq_client_connection.h del amq_client_connection.h
    if exist amq_client_connection.c del amq_client_connection.c
    if exist amq_client_connection.hpp del amq_client_connection.hpp
    if exist amq_client_connection.cpp del amq_client_connection.cpp
    if exist amq_client_session_test.c del amq_client_session_test.c
    if exist amq_client_session.h del amq_client_session.h
    if exist amq_client_session.c del amq_client_session.c
    if exist amq_client_session.hpp del amq_client_session.hpp
    if exist amq_client_session.cpp del amq_client_session.cpp
    if exist amq_client_channel_test.c del amq_client_channel_test.c
    if exist amq_client_channel.h del amq_client_channel.h
    if exist amq_client_channel.c del amq_client_channel.c
    if exist amq_client_channel.hpp del amq_client_channel.hpp
    if exist amq_client_channel.cpp del amq_client_channel.cpp
    if exist amq_client_channel_table_test.c del amq_client_channel_table_test.c
    if exist amq_client_channel_table.h del amq_client_channel_table.h
    if exist amq_client_channel_table.c del amq_client_channel_table.c
    if exist amq_client_channel_table.hpp del amq_client_channel_table.hpp
    if exist amq_client_channel_table.cpp del amq_client_channel_table.cpp
    if exist stamp_generate del stamp_generate
    if exist OpenAMQ_Client_*.zip del OpenAMQ_Client_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo OpenAMQ_Client-1.3d1
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    echo boom I: [OpenAMQ_Client]: Running regression tests...
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_method_test
    ) else (
        set RUN_COMMAND=amq_client_method_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_config_test
    ) else (
        set RUN_COMMAND=amq_client_config_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_connection_test
    ) else (
        set RUN_COMMAND=amq_client_connection_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_session_test
    ) else (
        set RUN_COMMAND=amq_client_session_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_channel_test
    ) else (
        set RUN_COMMAND=amq_client_channel_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_client_channel_table_test
    ) else (
        set RUN_COMMAND=amq_client_channel_table_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Client]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    exit /b 0

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    exit /b 0

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    exit /b 0


exit /b 0

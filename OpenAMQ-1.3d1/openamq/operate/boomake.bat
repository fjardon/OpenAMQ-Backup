@echo off
:-
:-  Boom builder for OpenAMQ Operate 1.3d1
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=1.3d1
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [OpenAMQ_Operate]: The IBASE variable is not set.  Please set it to the location where OpenAMQ Operate should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    echo boom I: [OpenAMQ_Operate]: Building OpenAMQ Operate...
    if "!MSVCDir!"=="" set MSVCDir=C:\Program Files\Microsoft Visual Studio\VC98
    if not exist "!MSVCDir!\bin" (
        echo boom E: [OpenAMQ_Operate]: Cannot find MSVC compiler in !MSVCdir!.
        echo boom E: [OpenAMQ_Operate]: Please set MSVCDir environment variable to VC98 directory.
        set _exception=1
        goto :eof
    )
    set INCDIR=
    set LIBDIR=
    if "!BOOM_TRACE!"=="1" (
        set MY_COPTS=-v
    ) else (
        set MY_COPTS=-q
    )
    if not "!_LOCAL_BASE!"=="" (
        set MY_COPTS=!MY_COPTS! -li !_LOCAL_BASE!\include -ll !_LOCAL_BASE!\lib
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_shell
    verify>nul
    call c !MY_COPTS! amq_shell
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_shell' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_console_test
    verify>nul
    call c !MY_COPTS! amq_mgt_console_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_console_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_console
    verify>nul
    call c !MY_COPTS! amq_mgt_console
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_console' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_console
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_console
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_console' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_broker_test
    verify>nul
    call c !MY_COPTS! amq_mgt_broker_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_broker_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_broker
    verify>nul
    call c !MY_COPTS! amq_mgt_broker
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_broker' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_broker
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_broker
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_broker' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_exchange_test
    verify>nul
    call c !MY_COPTS! amq_mgt_exchange_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_exchange_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_exchange
    verify>nul
    call c !MY_COPTS! amq_mgt_exchange
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_exchange' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_exchange
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_exchange
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_exchange' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_binding_test
    verify>nul
    call c !MY_COPTS! amq_mgt_binding_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_binding_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_binding
    verify>nul
    call c !MY_COPTS! amq_mgt_binding
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_binding' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_binding
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_binding
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_binding' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_queue_test
    verify>nul
    call c !MY_COPTS! amq_mgt_queue_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_queue_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_queue
    verify>nul
    call c !MY_COPTS! amq_mgt_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_queue
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_config_test
    verify>nul
    call c !MY_COPTS! amq_mgt_config_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_config_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_config
    verify>nul
    call c !MY_COPTS! amq_mgt_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_config
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_connection_test
    verify>nul
    call c !MY_COPTS! amq_mgt_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_connection
    verify>nul
    call c !MY_COPTS! amq_mgt_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_queue_connection_test
    verify>nul
    call c !MY_COPTS! amq_mgt_queue_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_queue_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_queue_connection
    verify>nul
    call c !MY_COPTS! amq_mgt_queue_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_queue_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_queue_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_queue_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_queue_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_connection_queue_test
    verify>nul
    call c !MY_COPTS! amq_mgt_connection_queue_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_connection_queue_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! amq_mgt_connection_queue
    verify>nul
    call c !MY_COPTS! amq_mgt_connection_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! amq_mgt_connection_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! amq_mgt_connection_queue
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! amq_mgt_connection_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! amq_mgt_connection_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_console
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_console
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_console' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_console
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_console
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_console' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_broker
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_broker
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_broker' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_broker
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_broker
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_broker' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_exchange' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_binding
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_binding
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_binding' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_binding
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_binding
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_binding' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_config
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_config
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_config
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_config' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_queue_connection' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue
    verify>nul
    call c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c -p !MY_COPTS! -r libamq_operate.lib amq_mgt_connection_queue' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_shell
    verify>nul
    call c !MY_COPTS! -L amq_shell
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_shell' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_console_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_console_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_console_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_broker_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_broker_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_broker_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_exchange_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_exchange_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_exchange_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_binding_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_binding_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_binding_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_queue_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_queue_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_queue_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_config_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_config_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_config_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_connection_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_queue_connection_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_queue_connection_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_queue_connection_test' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L amq_mgt_connection_queue_test
    verify>nul
    call c !MY_COPTS! -L amq_mgt_connection_queue_test
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'c !MY_COPTS! -L amq_mgt_connection_queue_test' failed - stop.
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist operate\gpl_output echo operate\gpl_output>>_package.lst
    if exist operate\version.h echo operate\version.h>>_package.lst
    if exist operate\amq_shell.c echo operate\amq_shell.c>>_package.lst
    if exist operate\amq_mgt_console.icl echo operate\amq_mgt_console.icl>>_package.lst
    if exist operate\amq_mgt_broker.icl echo operate\amq_mgt_broker.icl>>_package.lst
    if exist operate\amq_mgt_exchange.icl echo operate\amq_mgt_exchange.icl>>_package.lst
    if exist operate\amq_mgt_binding.icl echo operate\amq_mgt_binding.icl>>_package.lst
    if exist operate\amq_mgt_queue.icl echo operate\amq_mgt_queue.icl>>_package.lst
    if exist operate\amq_mgt_config.icl echo operate\amq_mgt_config.icl>>_package.lst
    if exist operate\amq_mgt_connection.icl echo operate\amq_mgt_connection.icl>>_package.lst
    if exist operate\amq_mgt_queue_connection.icl echo operate\amq_mgt_queue_connection.icl>>_package.lst
    if exist operate\amq_mgt_connection_queue.icl echo operate\amq_mgt_connection_queue.icl>>_package.lst
    if exist operate\amq_operate_api.gsl echo operate\amq_operate_api.gsl>>_package.lst
    if exist operate\prelude.pdl echo operate\prelude.pdl>>_package.lst
    if exist operate\license.gpl echo operate\license.gpl>>_package.lst
    if exist operate\project.pdl echo operate\project.pdl>>_package.lst
    if exist operate\readme.txt echo operate\readme.txt>>_package.lst
    if exist operate\amq_mgt_console_test.c echo operate\amq_mgt_console_test.c>>_package.lst
    if exist operate\amq_mgt_console.h echo operate\amq_mgt_console.h>>_package.lst
    if exist operate\amq_mgt_console.c echo operate\amq_mgt_console.c>>_package.lst
    if exist operate\amq_mgt_console.hpp echo operate\amq_mgt_console.hpp>>_package.lst
    if exist operate\amq_mgt_console.cpp echo operate\amq_mgt_console.cpp>>_package.lst
    if exist operate\amq_mgt_broker_test.c echo operate\amq_mgt_broker_test.c>>_package.lst
    if exist operate\amq_mgt_broker.h echo operate\amq_mgt_broker.h>>_package.lst
    if exist operate\amq_mgt_broker.c echo operate\amq_mgt_broker.c>>_package.lst
    if exist operate\amq_mgt_broker.hpp echo operate\amq_mgt_broker.hpp>>_package.lst
    if exist operate\amq_mgt_broker.cpp echo operate\amq_mgt_broker.cpp>>_package.lst
    if exist operate\amq_mgt_exchange_test.c echo operate\amq_mgt_exchange_test.c>>_package.lst
    if exist operate\amq_mgt_exchange.h echo operate\amq_mgt_exchange.h>>_package.lst
    if exist operate\amq_mgt_exchange.c echo operate\amq_mgt_exchange.c>>_package.lst
    if exist operate\amq_mgt_exchange.hpp echo operate\amq_mgt_exchange.hpp>>_package.lst
    if exist operate\amq_mgt_exchange.cpp echo operate\amq_mgt_exchange.cpp>>_package.lst
    if exist operate\amq_mgt_binding_test.c echo operate\amq_mgt_binding_test.c>>_package.lst
    if exist operate\amq_mgt_binding.h echo operate\amq_mgt_binding.h>>_package.lst
    if exist operate\amq_mgt_binding.c echo operate\amq_mgt_binding.c>>_package.lst
    if exist operate\amq_mgt_binding.hpp echo operate\amq_mgt_binding.hpp>>_package.lst
    if exist operate\amq_mgt_binding.cpp echo operate\amq_mgt_binding.cpp>>_package.lst
    if exist operate\amq_mgt_queue_test.c echo operate\amq_mgt_queue_test.c>>_package.lst
    if exist operate\amq_mgt_queue.h echo operate\amq_mgt_queue.h>>_package.lst
    if exist operate\amq_mgt_queue.c echo operate\amq_mgt_queue.c>>_package.lst
    if exist operate\amq_mgt_queue.hpp echo operate\amq_mgt_queue.hpp>>_package.lst
    if exist operate\amq_mgt_queue.cpp echo operate\amq_mgt_queue.cpp>>_package.lst
    if exist operate\amq_mgt_config_test.c echo operate\amq_mgt_config_test.c>>_package.lst
    if exist operate\amq_mgt_config.h echo operate\amq_mgt_config.h>>_package.lst
    if exist operate\amq_mgt_config.c echo operate\amq_mgt_config.c>>_package.lst
    if exist operate\amq_mgt_config.hpp echo operate\amq_mgt_config.hpp>>_package.lst
    if exist operate\amq_mgt_config.cpp echo operate\amq_mgt_config.cpp>>_package.lst
    if exist operate\amq_mgt_connection_test.c echo operate\amq_mgt_connection_test.c>>_package.lst
    if exist operate\amq_mgt_connection.h echo operate\amq_mgt_connection.h>>_package.lst
    if exist operate\amq_mgt_connection.c echo operate\amq_mgt_connection.c>>_package.lst
    if exist operate\amq_mgt_connection.hpp echo operate\amq_mgt_connection.hpp>>_package.lst
    if exist operate\amq_mgt_connection.cpp echo operate\amq_mgt_connection.cpp>>_package.lst
    if exist operate\amq_mgt_queue_connection_test.c echo operate\amq_mgt_queue_connection_test.c>>_package.lst
    if exist operate\amq_mgt_queue_connection.h echo operate\amq_mgt_queue_connection.h>>_package.lst
    if exist operate\amq_mgt_queue_connection.c echo operate\amq_mgt_queue_connection.c>>_package.lst
    if exist operate\amq_mgt_queue_connection.hpp echo operate\amq_mgt_queue_connection.hpp>>_package.lst
    if exist operate\amq_mgt_queue_connection.cpp echo operate\amq_mgt_queue_connection.cpp>>_package.lst
    if exist operate\amq_mgt_connection_queue_test.c echo operate\amq_mgt_connection_queue_test.c>>_package.lst
    if exist operate\amq_mgt_connection_queue.h echo operate\amq_mgt_connection_queue.h>>_package.lst
    if exist operate\amq_mgt_connection_queue.c echo operate\amq_mgt_connection_queue.c>>_package.lst
    if exist operate\amq_mgt_connection_queue.hpp echo operate\amq_mgt_connection_queue.hpp>>_package.lst
    if exist operate\amq_mgt_connection_queue.cpp echo operate\amq_mgt_connection_queue.cpp>>_package.lst
    if exist operate\stamp_generate echo operate\stamp_generate>>_package.lst
    if exist operate\configure echo operate\configure>>_package.lst
    if exist operate\Makefile.unix echo operate\Makefile.unix>>_package.lst
    if exist operate\boomake echo operate\boomake>>_package.lst
    if exist operate\configure.bat echo operate\configure.bat>>_package.lst
    if exist operate\Makefile.win32 echo operate\Makefile.win32>>_package.lst
    if exist operate\boomake.bat echo operate\boomake.bat>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [OpenAMQ_Operate]: Building OpenAMQ_Operate-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d OpenAMQ_Operate-!MY_VERSION!
    if exist  OpenAMQ_Operate-!MY_VERSION!-src.zip del OpenAMQ_Operate-!MY_VERSION!-src.zip
    zip -rmq OpenAMQ_Operate-!MY_VERSION!-src.zip OpenAMQ_Operate-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist gpl_output (
        echo boom E: [OpenAMQ_Operate]: gpl_output is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [OpenAMQ_Operate]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_shell.c (
        echo boom E: [OpenAMQ_Operate]: amq_shell.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_operate_api.gsl (
        echo boom E: [OpenAMQ_Operate]: amq_operate_api.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Operate]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Operate]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [OpenAMQ_Operate]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Operate]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Operate]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Operate]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Operate]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Operate]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Operate]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist libamq_operate.lib (
        echo boom E: [OpenAMQ_Operate]: libamq_operate.lib is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_shell.exe (
        echo boom E: [OpenAMQ_Operate]: amq_shell.exe is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_operate_api.gsl (
        echo boom E: [OpenAMQ_Operate]: amq_operate_api.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Operate]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_console.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_broker.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_broker.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_exchange.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_exchange.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_binding.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_binding.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_config.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_config.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_queue_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_connection_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist gpl_output (
        echo boom E: [OpenAMQ_Operate]: gpl_output is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [OpenAMQ_Operate]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_shell.c (
        echo boom E: [OpenAMQ_Operate]: amq_shell.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_operate_api.gsl (
        echo boom E: [OpenAMQ_Operate]: amq_operate_api.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Operate]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Operate]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Operate]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Operate]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Operate]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Operate]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Operate]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Operate]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist gpl_output (
        echo boom E: [OpenAMQ_Operate]: gpl_output is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist version.h (
        echo boom E: [OpenAMQ_Operate]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_shell.c (
        echo boom E: [OpenAMQ_Operate]: amq_shell.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.icl (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.icl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_operate_api.gsl (
        echo boom E: [OpenAMQ_Operate]: amq_operate_api.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [OpenAMQ_Operate]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [OpenAMQ_Operate]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_console.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_console.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_console.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_console.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_broker_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_broker.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_broker.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_broker.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_broker.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_exchange_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_exchange.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_exchange.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_exchange.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_exchange.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_binding_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_binding.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_binding.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_binding.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_binding.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_queue_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_config_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_config.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_config.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_config.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_config.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_connection_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_queue_connection_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_queue_connection.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue_connection.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_queue_connection.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_queue_connection.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist amq_mgt_connection_queue_test.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue_test.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.h (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist amq_mgt_connection_queue.c (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection_queue.hpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.hpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if "!BOOM_MODEL_CPP!"=="1" (
    if not exist amq_mgt_connection_queue.cpp (
        echo boom E: [OpenAMQ_Operate]: amq_mgt_connection_queue.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    )
    if not exist stamp_generate (
        echo boom E: [OpenAMQ_Operate]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [OpenAMQ_Operate]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [OpenAMQ_Operate]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [OpenAMQ_Operate]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [OpenAMQ_Operate]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [OpenAMQ_Operate]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [OpenAMQ_Operate]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [OpenAMQ_Operate]: installing OpenAMQ Operate into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\lib\nul mkdir !_INSTALL_ROOT!\lib\
    if "!BOOM_TRACE!"=="1" echo copy/y libamq_operate.lib !_INSTALL_ROOT!\lib\>nul
    verify>nul
    call copy/y libamq_operate.lib !_INSTALL_ROOT!\lib\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y libamq_operate.lib !_INSTALL_ROOT!\lib\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if "!BOOM_TRACE!"=="1" echo copy/y amq_shell.exe !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_shell.exe !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_shell.exe !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_console.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_console.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_console.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_broker.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_broker.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_broker.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_exchange.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_exchange.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_exchange.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_binding.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_binding.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_binding.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_queue.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_config.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_config.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_config.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_connection.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue_connection.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_queue_connection.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue_connection.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection_queue.icl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_mgt_connection_queue.icl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection_queue.icl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_operate_api.gsl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y amq_operate_api.gsl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_operate_api.gsl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\doc\OpenAMQ_Operate\nul mkdir !_INSTALL_ROOT!\doc\OpenAMQ_Operate\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Operate\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Operate\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\OpenAMQ_Operate\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_console.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_console.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_console.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_console.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_console.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_console.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_broker.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_broker.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_broker.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_broker.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_broker.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_broker.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_exchange.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_exchange.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_exchange.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_exchange.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_exchange.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_exchange.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_binding.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_binding.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_binding.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_binding.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_binding.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_binding.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_queue.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_queue.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_config.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_config.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_config.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_config.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_config.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_config.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_connection.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_connection.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue_connection.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_queue_connection.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue_connection.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_queue_connection.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_queue_connection.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_queue_connection.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection_queue.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y amq_mgt_connection_queue.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection_queue.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo copy/y amq_mgt_connection_queue.hpp !_INSTALL_ROOT!\include\>nul
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call copy/y amq_mgt_connection_queue.hpp !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'copy/y amq_mgt_connection_queue.hpp !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [OpenAMQ_Operate]: Generating files...

    gsl -q -quiet:1 amq_operate_api.gsl
    
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_console.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_console.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_console.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_broker.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_broker.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_broker.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_exchange.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_exchange.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_exchange.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_binding.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_binding.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_binding.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_queue.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_config.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_queue_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_queue_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_queue_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl
    verify>nul
    call gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_connection_queue.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_connection_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_connection_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [OpenAMQ_Operate]: Generating files...

    gsl -q -quiet:1 amq_operate_api.gsl
    
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_console.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_console.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_console.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_console.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_broker.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_broker.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_broker.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_broker.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_exchange.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_exchange.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_exchange.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_exchange.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_binding.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_binding.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_binding.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_binding.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_queue.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_config.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_config.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_config.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_queue_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_queue_connection.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_queue_connection.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_queue_connection.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_MODEL_CPP!"=="1" (
        if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl
    )
    verify>nul
    if "!BOOM_MODEL_CPP!"=="1" call gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 -target:stdcpp amq_mgt_connection_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl -q -quiet:1 amq_mgt_connection_queue.icl
    verify>nul
    call gsl -q -quiet:1 amq_mgt_connection_queue.icl
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'gsl -q -quiet:1 amq_mgt_connection_queue.icl' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist libamq_operate.lib del libamq_operate.lib
    if exist amq_shell.exe del amq_shell.exe
    if exist amq_shell.obj del amq_shell.obj
    if exist amq_mgt_console_test_test.obj del amq_mgt_console_test_test.obj
    if exist amq_mgt_console_test_test.exe del amq_mgt_console_test_test.exe
    if exist amq_mgt_console.obj del amq_mgt_console.obj
    if exist amq_mgt_console.opp del amq_mgt_console.opp
    if exist amq_mgt_broker_test_test.obj del amq_mgt_broker_test_test.obj
    if exist amq_mgt_broker_test_test.exe del amq_mgt_broker_test_test.exe
    if exist amq_mgt_broker.obj del amq_mgt_broker.obj
    if exist amq_mgt_broker.opp del amq_mgt_broker.opp
    if exist amq_mgt_exchange_test_test.obj del amq_mgt_exchange_test_test.obj
    if exist amq_mgt_exchange_test_test.exe del amq_mgt_exchange_test_test.exe
    if exist amq_mgt_exchange.obj del amq_mgt_exchange.obj
    if exist amq_mgt_exchange.opp del amq_mgt_exchange.opp
    if exist amq_mgt_binding_test_test.obj del amq_mgt_binding_test_test.obj
    if exist amq_mgt_binding_test_test.exe del amq_mgt_binding_test_test.exe
    if exist amq_mgt_binding.obj del amq_mgt_binding.obj
    if exist amq_mgt_binding.opp del amq_mgt_binding.opp
    if exist amq_mgt_queue_test_test.obj del amq_mgt_queue_test_test.obj
    if exist amq_mgt_queue_test_test.exe del amq_mgt_queue_test_test.exe
    if exist amq_mgt_queue.obj del amq_mgt_queue.obj
    if exist amq_mgt_queue.opp del amq_mgt_queue.opp
    if exist amq_mgt_config_test_test.obj del amq_mgt_config_test_test.obj
    if exist amq_mgt_config_test_test.exe del amq_mgt_config_test_test.exe
    if exist amq_mgt_config.obj del amq_mgt_config.obj
    if exist amq_mgt_config.opp del amq_mgt_config.opp
    if exist amq_mgt_connection_test_test.obj del amq_mgt_connection_test_test.obj
    if exist amq_mgt_connection_test_test.exe del amq_mgt_connection_test_test.exe
    if exist amq_mgt_connection.obj del amq_mgt_connection.obj
    if exist amq_mgt_connection.opp del amq_mgt_connection.opp
    if exist amq_mgt_queue_connection_test_test.obj del amq_mgt_queue_connection_test_test.obj
    if exist amq_mgt_queue_connection_test_test.exe del amq_mgt_queue_connection_test_test.exe
    if exist amq_mgt_queue_connection.obj del amq_mgt_queue_connection.obj
    if exist amq_mgt_queue_connection.opp del amq_mgt_queue_connection.opp
    if exist amq_mgt_connection_queue_test_test.obj del amq_mgt_connection_queue_test_test.obj
    if exist amq_mgt_connection_queue_test_test.exe del amq_mgt_connection_queue_test_test.exe
    if exist amq_mgt_connection_queue.obj del amq_mgt_connection_queue.obj
    if exist amq_mgt_connection_queue.opp del amq_mgt_connection_queue.opp
    if exist amq_mgt_console_test.obj del amq_mgt_console_test.obj
    if exist amq_mgt_console_test.exe del amq_mgt_console_test.exe
    if exist amq_mgt_console.obj del amq_mgt_console.obj
    if exist amq_mgt_broker_test.obj del amq_mgt_broker_test.obj
    if exist amq_mgt_broker_test.exe del amq_mgt_broker_test.exe
    if exist amq_mgt_broker.obj del amq_mgt_broker.obj
    if exist amq_mgt_exchange_test.obj del amq_mgt_exchange_test.obj
    if exist amq_mgt_exchange_test.exe del amq_mgt_exchange_test.exe
    if exist amq_mgt_exchange.obj del amq_mgt_exchange.obj
    if exist amq_mgt_binding_test.obj del amq_mgt_binding_test.obj
    if exist amq_mgt_binding_test.exe del amq_mgt_binding_test.exe
    if exist amq_mgt_binding.obj del amq_mgt_binding.obj
    if exist amq_mgt_queue_test.obj del amq_mgt_queue_test.obj
    if exist amq_mgt_queue_test.exe del amq_mgt_queue_test.exe
    if exist amq_mgt_queue.obj del amq_mgt_queue.obj
    if exist amq_mgt_config_test.obj del amq_mgt_config_test.obj
    if exist amq_mgt_config_test.exe del amq_mgt_config_test.exe
    if exist amq_mgt_config.obj del amq_mgt_config.obj
    if exist amq_mgt_connection_test.obj del amq_mgt_connection_test.obj
    if exist amq_mgt_connection_test.exe del amq_mgt_connection_test.exe
    if exist amq_mgt_connection.obj del amq_mgt_connection.obj
    if exist amq_mgt_queue_connection_test.obj del amq_mgt_queue_connection_test.obj
    if exist amq_mgt_queue_connection_test.exe del amq_mgt_queue_connection_test.exe
    if exist amq_mgt_queue_connection.obj del amq_mgt_queue_connection.obj
    if exist amq_mgt_connection_queue_test.obj del amq_mgt_connection_queue_test.obj
    if exist amq_mgt_connection_queue_test.exe del amq_mgt_connection_queue_test.exe
    if exist amq_mgt_connection_queue.obj del amq_mgt_connection_queue.obj
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist amq_mgt_broker.icl del amq_mgt_broker.icl
    if exist amq_mgt_exchange.icl del amq_mgt_exchange.icl
    if exist amq_mgt_binding.icl del amq_mgt_binding.icl
    if exist amq_mgt_queue.icl del amq_mgt_queue.icl
    if exist amq_mgt_config.icl del amq_mgt_config.icl
    if exist amq_mgt_connection.icl del amq_mgt_connection.icl
    if exist amq_mgt_queue_connection.icl del amq_mgt_queue_connection.icl
    if exist amq_mgt_connection_queue.icl del amq_mgt_connection_queue.icl
    if exist amq_mgt_console_test.c del amq_mgt_console_test.c
    if exist amq_mgt_console.h del amq_mgt_console.h
    if exist amq_mgt_console.c del amq_mgt_console.c
    if exist amq_mgt_console.hpp del amq_mgt_console.hpp
    if exist amq_mgt_console.cpp del amq_mgt_console.cpp
    if exist amq_mgt_broker_test.c del amq_mgt_broker_test.c
    if exist amq_mgt_broker.h del amq_mgt_broker.h
    if exist amq_mgt_broker.c del amq_mgt_broker.c
    if exist amq_mgt_broker.hpp del amq_mgt_broker.hpp
    if exist amq_mgt_broker.cpp del amq_mgt_broker.cpp
    if exist amq_mgt_exchange_test.c del amq_mgt_exchange_test.c
    if exist amq_mgt_exchange.h del amq_mgt_exchange.h
    if exist amq_mgt_exchange.c del amq_mgt_exchange.c
    if exist amq_mgt_exchange.hpp del amq_mgt_exchange.hpp
    if exist amq_mgt_exchange.cpp del amq_mgt_exchange.cpp
    if exist amq_mgt_binding_test.c del amq_mgt_binding_test.c
    if exist amq_mgt_binding.h del amq_mgt_binding.h
    if exist amq_mgt_binding.c del amq_mgt_binding.c
    if exist amq_mgt_binding.hpp del amq_mgt_binding.hpp
    if exist amq_mgt_binding.cpp del amq_mgt_binding.cpp
    if exist amq_mgt_queue_test.c del amq_mgt_queue_test.c
    if exist amq_mgt_queue.h del amq_mgt_queue.h
    if exist amq_mgt_queue.c del amq_mgt_queue.c
    if exist amq_mgt_queue.hpp del amq_mgt_queue.hpp
    if exist amq_mgt_queue.cpp del amq_mgt_queue.cpp
    if exist amq_mgt_config_test.c del amq_mgt_config_test.c
    if exist amq_mgt_config.h del amq_mgt_config.h
    if exist amq_mgt_config.c del amq_mgt_config.c
    if exist amq_mgt_config.hpp del amq_mgt_config.hpp
    if exist amq_mgt_config.cpp del amq_mgt_config.cpp
    if exist amq_mgt_connection_test.c del amq_mgt_connection_test.c
    if exist amq_mgt_connection.h del amq_mgt_connection.h
    if exist amq_mgt_connection.c del amq_mgt_connection.c
    if exist amq_mgt_connection.hpp del amq_mgt_connection.hpp
    if exist amq_mgt_connection.cpp del amq_mgt_connection.cpp
    if exist amq_mgt_queue_connection_test.c del amq_mgt_queue_connection_test.c
    if exist amq_mgt_queue_connection.h del amq_mgt_queue_connection.h
    if exist amq_mgt_queue_connection.c del amq_mgt_queue_connection.c
    if exist amq_mgt_queue_connection.hpp del amq_mgt_queue_connection.hpp
    if exist amq_mgt_queue_connection.cpp del amq_mgt_queue_connection.cpp
    if exist amq_mgt_connection_queue_test.c del amq_mgt_connection_queue_test.c
    if exist amq_mgt_connection_queue.h del amq_mgt_connection_queue.h
    if exist amq_mgt_connection_queue.c del amq_mgt_connection_queue.c
    if exist amq_mgt_connection_queue.hpp del amq_mgt_connection_queue.hpp
    if exist amq_mgt_connection_queue.cpp del amq_mgt_connection_queue.cpp
    if exist stamp_generate del stamp_generate
    if exist OpenAMQ_Operate_*.zip del OpenAMQ_Operate_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo OpenAMQ_Operate-1.3d1
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    echo boom I: [OpenAMQ_Operate]: Running regression tests...
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_console_test
    ) else (
        set RUN_COMMAND=amq_mgt_console_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_broker_test
    ) else (
        set RUN_COMMAND=amq_mgt_broker_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_exchange_test
    ) else (
        set RUN_COMMAND=amq_mgt_exchange_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_binding_test
    ) else (
        set RUN_COMMAND=amq_mgt_binding_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_queue_test
    ) else (
        set RUN_COMMAND=amq_mgt_queue_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_config_test
    ) else (
        set RUN_COMMAND=amq_mgt_config_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_connection_test
    ) else (
        set RUN_COMMAND=amq_mgt_connection_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_queue_connection_test
    ) else (
        set RUN_COMMAND=amq_mgt_queue_connection_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" (
        set RUN_COMMAND=amq_mgt_connection_queue_test
    ) else (
        set RUN_COMMAND=amq_mgt_connection_queue_test -q
    )
    if "!BOOM_TRACE!"=="1" echo !RUN_COMMAND!
    verify>nul
    call !RUN_COMMAND!
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: '!RUN_COMMAND!' failed - stop.
        set _exception=1
        goto :eof
    )
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [OpenAMQ_Operate]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    exit /b 0

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    exit /b 0

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    exit /b 0


exit /b 0

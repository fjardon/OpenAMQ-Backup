#!/bin/sh
#
#   Boom builder for OpenAMQ Common 1.3d1
#   Generated by iMatix Boom from standard.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [OpenAMQ_Common]: $* - stop" 1>&2
    else
        echo "boom E: [OpenAMQ_Common]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [OpenAMQ_Common]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="1.3d1"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,st on all platforms except Linux and Solaris.
#
if [ -s /usr/bin/uname ]; then BOOM_PLATFORM=`/usr/bin/uname`; fi
if [ -s /bin/uname ];     then BOOM_PLATFORM=`/bin/uname`;     fi
if [ -z "$BOOM_MODEL" ]; then
    if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
        BOOM_MODEL=release,mt
    else
        BOOM_MODEL=release,st
    fi
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
        if [ "$BOOM_PLATFORM" = "Linux" -o "$BOOM_PLATFORM" = "SunOS" ]; then
            BOOM_MODEL_MT=1
            BOOM_MODEL="$BOOM_MODEL,mt"
        else
            BOOM_MODEL_ST=1
            BOOM_MODEL="$BOOM_MODEL,st"
        fi
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where OpenAMQ Common should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# --------------------------   BUILD BINARY FILES   ---------------------------

a_build_binary_files() {
:
    carp "Building OpenAMQ Common..."
    #   To prevent compatibility warnings...
    INCDIR=
    LIBDIR=
    export LIBDIR INCDIR
    if [ "$BOOM_TRACE" ]; then
        MY_COPTS=-v
    else
        MY_COPTS=-q
    fi
    if [ ! -z "$_LOCAL_BASE" ]; then
        MY_COPTS="$MY_COPTS -li $_LOCAL_BASE/include -ll $_LOCAL_BASE/lib"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_sequence_test"
    c $MY_COPTS amq_sequence_test || croak "\"c $MY_COPTS amq_sequence_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_sequence"
    c $MY_COPTS amq_sequence || croak "\"c $MY_COPTS amq_sequence\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS amq_sequence"
    c -p $MY_COPTS amq_sequence || croak "\"c -p $MY_COPTS amq_sequence\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_sequence_table_test"
    c $MY_COPTS amq_sequence_table_test || croak "\"c $MY_COPTS amq_sequence_table_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_sequence_table"
    c $MY_COPTS amq_sequence_table || croak "\"c $MY_COPTS amq_sequence_table\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS amq_sequence_table"
    c -p $MY_COPTS amq_sequence_table || croak "\"c -p $MY_COPTS amq_sequence_table\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_constants"
    c $MY_COPTS amq_constants || croak "\"c $MY_COPTS amq_constants\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS amq_constants"
    c -p $MY_COPTS amq_constants || croak "\"c -p $MY_COPTS amq_constants\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_content_basic_test"
    c $MY_COPTS amq_content_basic_test || croak "\"c $MY_COPTS amq_content_basic_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_content_basic"
    c $MY_COPTS amq_content_basic || croak "\"c $MY_COPTS amq_content_basic\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS amq_content_basic"
    c -p $MY_COPTS amq_content_basic || croak "\"c -p $MY_COPTS amq_content_basic\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_content_basic_list_test"
    c $MY_COPTS amq_content_basic_list_test || croak "\"c $MY_COPTS amq_content_basic_list_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_content_basic_list"
    c $MY_COPTS amq_content_basic_list || croak "\"c $MY_COPTS amq_content_basic_list\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS amq_content_basic_list"
    c -p $MY_COPTS amq_content_basic_list || croak "\"c -p $MY_COPTS amq_content_basic_list\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_common amq_sequence"
    c $MY_COPTS -r libamq_common amq_sequence || croak "\"c $MY_COPTS -r libamq_common amq_sequence\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS -r libamq_common amq_sequence"
    c -p $MY_COPTS -r libamq_common amq_sequence || croak "\"c -p $MY_COPTS -r libamq_common amq_sequence\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_common amq_sequence_table"
    c $MY_COPTS -r libamq_common amq_sequence_table || croak "\"c $MY_COPTS -r libamq_common amq_sequence_table\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS -r libamq_common amq_sequence_table"
    c -p $MY_COPTS -r libamq_common amq_sequence_table || croak "\"c -p $MY_COPTS -r libamq_common amq_sequence_table\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_common amq_constants"
    c $MY_COPTS -r libamq_common amq_constants || croak "\"c $MY_COPTS -r libamq_common amq_constants\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS -r libamq_common amq_constants"
    c -p $MY_COPTS -r libamq_common amq_constants || croak "\"c -p $MY_COPTS -r libamq_common amq_constants\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_common amq_content_basic"
    c $MY_COPTS -r libamq_common amq_content_basic || croak "\"c $MY_COPTS -r libamq_common amq_content_basic\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS -r libamq_common amq_content_basic"
    c -p $MY_COPTS -r libamq_common amq_content_basic || croak "\"c -p $MY_COPTS -r libamq_common amq_content_basic\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_common amq_content_basic_list"
    c $MY_COPTS -r libamq_common amq_content_basic_list || croak "\"c $MY_COPTS -r libamq_common amq_content_basic_list\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "c -p $MY_COPTS -r libamq_common amq_content_basic_list"
    c -p $MY_COPTS -r libamq_common amq_content_basic_list || croak "\"c -p $MY_COPTS -r libamq_common amq_content_basic_list\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_sequence_test"
    c $MY_COPTS -L amq_sequence_test || croak "\"c $MY_COPTS -L amq_sequence_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_sequence_table_test"
    c $MY_COPTS -L amq_sequence_table_test || croak "\"c $MY_COPTS -L amq_sequence_table_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_content_basic_test"
    c $MY_COPTS -L amq_content_basic_test || croak "\"c $MY_COPTS -L amq_content_basic_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_content_basic_list_test"
    c $MY_COPTS -L amq_content_basic_list_test || croak "\"c $MY_COPTS -L amq_content_basic_list_test\" failed"
}

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "common/version.h" ]; then
        echo common/version.h>>_package.lst
    fi
    if [ -f "common/amq.asl" ]; then
        echo common/amq.asl>>_package.lst
    fi
    if [ -f "common/amq_exchange.asl" ]; then
        echo common/amq_exchange.asl>>_package.lst
    fi
    if [ -f "common/amq_queue.asl" ]; then
        echo common/amq_queue.asl>>_package.lst
    fi
    if [ -f "common/amq_basic.asl" ]; then
        echo common/amq_basic.asl>>_package.lst
    fi
    if [ -f "common/amq_pal.xnf" ]; then
        echo common/amq_pal.xnf>>_package.lst
    fi
    if [ -f "common/amq_pal_stdc.gsl" ]; then
        echo common/amq_pal_stdc.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_codegen.gsl" ]; then
        echo common/amq_pal_codegen.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_gen.gsl" ]; then
        echo common/amq_pal_gen.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_inherit.gsl" ]; then
        echo common/amq_pal_inherit.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_parse.gsl" ]; then
        echo common/amq_pal_parse.gsl>>_package.lst
    fi
    if [ -f "common/amq_pal_preproc.gsl" ]; then
        echo common/amq_pal_preproc.gsl>>_package.lst
    fi
    if [ -f "common/amq_sequence.icl" ]; then
        echo common/amq_sequence.icl>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.icl" ]; then
        echo common/amq_sequence_table.icl>>_package.lst
    fi
    if [ -f "common/amq_constants.icl" ]; then
        echo common/amq_constants.icl>>_package.lst
    fi
    if [ -f "common/amq_content_basic.icl" ]; then
        echo common/amq_content_basic.icl>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.icl" ]; then
        echo common/amq_content_basic_list.icl>>_package.lst
    fi
    if [ -f "common/prelude.pdl" ]; then
        echo common/prelude.pdl>>_package.lst
    fi
    if [ -f "common/license.gpl" ]; then
        echo common/license.gpl>>_package.lst
    fi
    if [ -f "common/project.pdl" ]; then
        echo common/project.pdl>>_package.lst
    fi
    if [ -f "common/readme.txt" ]; then
        echo common/readme.txt>>_package.lst
    fi
    if [ -f "common/amq_sequence_test.c" ]; then
        echo common/amq_sequence_test.c>>_package.lst
    fi
    if [ -f "common/amq_sequence.h" ]; then
        echo common/amq_sequence.h>>_package.lst
    fi
    if [ -f "common/amq_sequence.c" ]; then
        echo common/amq_sequence.c>>_package.lst
    fi
    if [ -f "common/amq_sequence.hpp" ]; then
        echo common/amq_sequence.hpp>>_package.lst
    fi
    if [ -f "common/amq_sequence.cpp" ]; then
        echo common/amq_sequence.cpp>>_package.lst
    fi
    if [ -f "common/amq_sequence_table_test.c" ]; then
        echo common/amq_sequence_table_test.c>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.h" ]; then
        echo common/amq_sequence_table.h>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.c" ]; then
        echo common/amq_sequence_table.c>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.hpp" ]; then
        echo common/amq_sequence_table.hpp>>_package.lst
    fi
    if [ -f "common/amq_sequence_table.cpp" ]; then
        echo common/amq_sequence_table.cpp>>_package.lst
    fi
    if [ -f "common/amq_constants.h" ]; then
        echo common/amq_constants.h>>_package.lst
    fi
    if [ -f "common/amq_constants.c" ]; then
        echo common/amq_constants.c>>_package.lst
    fi
    if [ -f "common/amq_constants.hpp" ]; then
        echo common/amq_constants.hpp>>_package.lst
    fi
    if [ -f "common/amq_constants.cpp" ]; then
        echo common/amq_constants.cpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_test.c" ]; then
        echo common/amq_content_basic_test.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic.h" ]; then
        echo common/amq_content_basic.h>>_package.lst
    fi
    if [ -f "common/amq_content_basic.c" ]; then
        echo common/amq_content_basic.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic.hpp" ]; then
        echo common/amq_content_basic.hpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic.cpp" ]; then
        echo common/amq_content_basic.cpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list_test.c" ]; then
        echo common/amq_content_basic_list_test.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.h" ]; then
        echo common/amq_content_basic_list.h>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.c" ]; then
        echo common/amq_content_basic_list.c>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.hpp" ]; then
        echo common/amq_content_basic_list.hpp>>_package.lst
    fi
    if [ -f "common/amq_content_basic_list.cpp" ]; then
        echo common/amq_content_basic_list.cpp>>_package.lst
    fi
    if [ -f "common/stamp_generate" ]; then
        echo common/stamp_generate>>_package.lst
    fi
    if [ -f "common/configure" ]; then
        echo common/configure>>_package.lst
    fi
    if [ -f "common/Makefile.unix" ]; then
        echo common/Makefile.unix>>_package.lst
    fi
    if [ -f "common/boomake" ]; then
        echo common/boomake>>_package.lst
    fi
    if [ -f "common/configure.bat" ]; then
        echo common/configure.bat>>_package.lst
    fi
    if [ -f "common/Makefile.win32" ]; then
        echo common/Makefile.win32>>_package.lst
    fi
    if [ -f "common/boomake.bat" ]; then
        echo common/boomake.bat>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building OpenAMQ_Common-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d OpenAMQ_Common-$MY_VERSION
    rm -f OpenAMQ_Common-$MY_VERSION-src.tar.gz
    tar -cf  OpenAMQ_Common-$MY_VERSION-src.tar OpenAMQ_Common-$MY_VERSION
    gzip OpenAMQ_Common-$MY_VERSION-src.tar
    rm -f OpenAMQ_Common-$MY_VERSION-src.zip
    carp "Building OpenAMQ_Common-$MY_VERSION-src.zip..."
    zip -lrmq OpenAMQ_Common-$MY_VERSION-src.zip OpenAMQ_Common-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "amq.asl" ]; then
        croak "amq.asl is missing"
    fi
    if [ ! -f "amq_exchange.asl" ]; then
        croak "amq_exchange.asl is missing"
    fi
    if [ ! -f "amq_queue.asl" ]; then
        croak "amq_queue.asl is missing"
    fi
    if [ ! -f "amq_basic.asl" ]; then
        croak "amq_basic.asl is missing"
    fi
    if [ ! -f "amq_pal.xnf" ]; then
        croak "amq_pal.xnf is missing"
    fi
    if [ ! -f "amq_pal_stdc.gsl" ]; then
        croak "amq_pal_stdc.gsl is missing"
    fi
    if [ ! -f "amq_pal_codegen.gsl" ]; then
        croak "amq_pal_codegen.gsl is missing"
    fi
    if [ ! -f "amq_pal_gen.gsl" ]; then
        croak "amq_pal_gen.gsl is missing"
    fi
    if [ ! -f "amq_pal_inherit.gsl" ]; then
        croak "amq_pal_inherit.gsl is missing"
    fi
    if [ ! -f "amq_pal_parse.gsl" ]; then
        croak "amq_pal_parse.gsl is missing"
    fi
    if [ ! -f "amq_pal_preproc.gsl" ]; then
        croak "amq_pal_preproc.gsl is missing"
    fi
    if [ ! -f "amq_sequence.icl" ]; then
        croak "amq_sequence.icl is missing"
    fi
    if [ ! -f "amq_sequence_table.icl" ]; then
        croak "amq_sequence_table.icl is missing"
    fi
    if [ ! -f "amq_constants.icl" ]; then
        croak "amq_constants.icl is missing"
    fi
    if [ ! -f "amq_content_basic.icl" ]; then
        croak "amq_content_basic.icl is missing"
    fi
    if [ ! -f "amq_content_basic_list.icl" ]; then
        croak "amq_content_basic_list.icl is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_sequence_test.c" ]; then
        croak "amq_sequence_test.c is missing"
    fi
    if [ ! -f "amq_sequence.h" ]; then
        croak "amq_sequence.h is missing"
    fi
    if [ ! -f "amq_sequence.c" ]; then
        croak "amq_sequence.c is missing"
    fi
    if [ ! -f "amq_sequence.hpp" ]; then
        croak "amq_sequence.hpp is missing"
    fi
    if [ ! -f "amq_sequence.cpp" ]; then
        croak "amq_sequence.cpp is missing"
    fi
    if [ ! -f "amq_sequence_table_test.c" ]; then
        croak "amq_sequence_table_test.c is missing"
    fi
    if [ ! -f "amq_sequence_table.h" ]; then
        croak "amq_sequence_table.h is missing"
    fi
    if [ ! -f "amq_sequence_table.c" ]; then
        croak "amq_sequence_table.c is missing"
    fi
    if [ ! -f "amq_sequence_table.hpp" ]; then
        croak "amq_sequence_table.hpp is missing"
    fi
    if [ ! -f "amq_sequence_table.cpp" ]; then
        croak "amq_sequence_table.cpp is missing"
    fi
    if [ ! -f "amq_constants.h" ]; then
        croak "amq_constants.h is missing"
    fi
    if [ ! -f "amq_constants.c" ]; then
        croak "amq_constants.c is missing"
    fi
    if [ ! -f "amq_constants.hpp" ]; then
        croak "amq_constants.hpp is missing"
    fi
    if [ ! -f "amq_constants.cpp" ]; then
        croak "amq_constants.cpp is missing"
    fi
    if [ ! -f "amq_content_basic_test.c" ]; then
        croak "amq_content_basic_test.c is missing"
    fi
    if [ ! -f "amq_content_basic.h" ]; then
        croak "amq_content_basic.h is missing"
    fi
    if [ ! -f "amq_content_basic.c" ]; then
        croak "amq_content_basic.c is missing"
    fi
    if [ ! -f "amq_content_basic.hpp" ]; then
        croak "amq_content_basic.hpp is missing"
    fi
    if [ ! -f "amq_content_basic.cpp" ]; then
        croak "amq_content_basic.cpp is missing"
    fi
    if [ ! -f "amq_content_basic_list_test.c" ]; then
        croak "amq_content_basic_list_test.c is missing"
    fi
    if [ ! -f "amq_content_basic_list.h" ]; then
        croak "amq_content_basic_list.h is missing"
    fi
    if [ ! -f "amq_content_basic_list.c" ]; then
        croak "amq_content_basic_list.c is missing"
    fi
    if [ ! -f "amq_content_basic_list.hpp" ]; then
        croak "amq_content_basic_list.hpp is missing"
    fi
    if [ ! -f "amq_content_basic_list.cpp" ]; then
        croak "amq_content_basic_list.cpp is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK BINARY FILES EXIST   ------------------------

a_check_binary_files_exist() {
:
    if [ ! -f "libamq_common.a" ]; then
        croak "libamq_common.a is missing"
    fi
    if [ ! -f "amq.asl" ]; then
        croak "amq.asl is missing"
    fi
    if [ ! -f "amq_exchange.asl" ]; then
        croak "amq_exchange.asl is missing"
    fi
    if [ ! -f "amq_queue.asl" ]; then
        croak "amq_queue.asl is missing"
    fi
    if [ ! -f "amq_basic.asl" ]; then
        croak "amq_basic.asl is missing"
    fi
    if [ ! -f "amq_pal_stdc.gsl" ]; then
        croak "amq_pal_stdc.gsl is missing"
    fi
    if [ ! -f "amq_pal_codegen.gsl" ]; then
        croak "amq_pal_codegen.gsl is missing"
    fi
    if [ ! -f "amq_pal_gen.gsl" ]; then
        croak "amq_pal_gen.gsl is missing"
    fi
    if [ ! -f "amq_pal_inherit.gsl" ]; then
        croak "amq_pal_inherit.gsl is missing"
    fi
    if [ ! -f "amq_pal_parse.gsl" ]; then
        croak "amq_pal_parse.gsl is missing"
    fi
    if [ ! -f "amq_pal_preproc.gsl" ]; then
        croak "amq_pal_preproc.gsl is missing"
    fi
    if [ ! -f "amq_sequence.icl" ]; then
        croak "amq_sequence.icl is missing"
    fi
    if [ ! -f "amq_sequence_table.icl" ]; then
        croak "amq_sequence_table.icl is missing"
    fi
    if [ ! -f "amq_constants.icl" ]; then
        croak "amq_constants.icl is missing"
    fi
    if [ ! -f "amq_content_basic.icl" ]; then
        croak "amq_content_basic.icl is missing"
    fi
    if [ ! -f "amq_content_basic_list.icl" ]; then
        croak "amq_content_basic_list.icl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_sequence.h" ]; then
        croak "amq_sequence.h is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence.hpp" ]; then
        croak "amq_sequence.hpp is missing"
    fi
    fi
    if [ ! -f "amq_sequence_table.h" ]; then
        croak "amq_sequence_table.h is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence_table.hpp" ]; then
        croak "amq_sequence_table.hpp is missing"
    fi
    fi
    if [ ! -f "amq_constants.h" ]; then
        croak "amq_constants.h is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_constants.hpp" ]; then
        croak "amq_constants.hpp is missing"
    fi
    fi
    if [ ! -f "amq_content_basic.h" ]; then
        croak "amq_content_basic.h is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic.hpp" ]; then
        croak "amq_content_basic.hpp is missing"
    fi
    fi
    if [ ! -f "amq_content_basic_list.h" ]; then
        croak "amq_content_basic_list.h is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic_list.hpp" ]; then
        croak "amq_content_basic_list.hpp is missing"
    fi
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "amq.asl" ]; then
        croak "amq.asl is missing"
    fi
    if [ ! -f "amq_exchange.asl" ]; then
        croak "amq_exchange.asl is missing"
    fi
    if [ ! -f "amq_queue.asl" ]; then
        croak "amq_queue.asl is missing"
    fi
    if [ ! -f "amq_basic.asl" ]; then
        croak "amq_basic.asl is missing"
    fi
    if [ ! -f "amq_sequence.icl" ]; then
        croak "amq_sequence.icl is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "amq.asl" ]; then
        croak "amq.asl is missing"
    fi
    if [ ! -f "amq_exchange.asl" ]; then
        croak "amq_exchange.asl is missing"
    fi
    if [ ! -f "amq_queue.asl" ]; then
        croak "amq_queue.asl is missing"
    fi
    if [ ! -f "amq_basic.asl" ]; then
        croak "amq_basic.asl is missing"
    fi
    if [ ! -f "amq_pal.xnf" ]; then
        croak "amq_pal.xnf is missing"
    fi
    if [ ! -f "amq_pal_stdc.gsl" ]; then
        croak "amq_pal_stdc.gsl is missing"
    fi
    if [ ! -f "amq_pal_codegen.gsl" ]; then
        croak "amq_pal_codegen.gsl is missing"
    fi
    if [ ! -f "amq_pal_gen.gsl" ]; then
        croak "amq_pal_gen.gsl is missing"
    fi
    if [ ! -f "amq_pal_inherit.gsl" ]; then
        croak "amq_pal_inherit.gsl is missing"
    fi
    if [ ! -f "amq_pal_parse.gsl" ]; then
        croak "amq_pal_parse.gsl is missing"
    fi
    if [ ! -f "amq_pal_preproc.gsl" ]; then
        croak "amq_pal_preproc.gsl is missing"
    fi
    if [ ! -f "amq_sequence.icl" ]; then
        croak "amq_sequence.icl is missing"
    fi
    if [ ! -f "amq_sequence_table.icl" ]; then
        croak "amq_sequence_table.icl is missing"
    fi
    if [ ! -f "amq_constants.icl" ]; then
        croak "amq_constants.icl is missing"
    fi
    if [ ! -f "amq_content_basic.icl" ]; then
        croak "amq_content_basic.icl is missing"
    fi
    if [ ! -f "amq_content_basic_list.icl" ]; then
        croak "amq_content_basic_list.icl is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_sequence_test.c" ]; then
        croak "amq_sequence_test.c is missing"
    fi
    if [ ! -f "amq_sequence.h" ]; then
        croak "amq_sequence.h is missing"
    fi
    if [ ! -f "amq_sequence.c" ]; then
        croak "amq_sequence.c is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence.hpp" ]; then
        croak "amq_sequence.hpp is missing"
    fi
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence.cpp" ]; then
        croak "amq_sequence.cpp is missing"
    fi
    fi
    if [ ! -f "amq_sequence_table_test.c" ]; then
        croak "amq_sequence_table_test.c is missing"
    fi
    if [ ! -f "amq_sequence_table.h" ]; then
        croak "amq_sequence_table.h is missing"
    fi
    if [ ! -f "amq_sequence_table.c" ]; then
        croak "amq_sequence_table.c is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence_table.hpp" ]; then
        croak "amq_sequence_table.hpp is missing"
    fi
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_sequence_table.cpp" ]; then
        croak "amq_sequence_table.cpp is missing"
    fi
    fi
    if [ ! -f "amq_constants.h" ]; then
        croak "amq_constants.h is missing"
    fi
    if [ ! -f "amq_constants.c" ]; then
        croak "amq_constants.c is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_constants.hpp" ]; then
        croak "amq_constants.hpp is missing"
    fi
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_constants.cpp" ]; then
        croak "amq_constants.cpp is missing"
    fi
    fi
    if [ ! -f "amq_content_basic_test.c" ]; then
        croak "amq_content_basic_test.c is missing"
    fi
    if [ ! -f "amq_content_basic.h" ]; then
        croak "amq_content_basic.h is missing"
    fi
    if [ ! -f "amq_content_basic.c" ]; then
        croak "amq_content_basic.c is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic.hpp" ]; then
        croak "amq_content_basic.hpp is missing"
    fi
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic.cpp" ]; then
        croak "amq_content_basic.cpp is missing"
    fi
    fi
    if [ ! -f "amq_content_basic_list_test.c" ]; then
        croak "amq_content_basic_list_test.c is missing"
    fi
    if [ ! -f "amq_content_basic_list.h" ]; then
        croak "amq_content_basic_list.h is missing"
    fi
    if [ ! -f "amq_content_basic_list.c" ]; then
        croak "amq_content_basic_list.c is missing"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic_list.hpp" ]; then
        croak "amq_content_basic_list.hpp is missing"
    fi
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    if [ ! -f "amq_content_basic_list.cpp" ]; then
        croak "amq_content_basic_list.cpp is missing"
    fi
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing OpenAMQ Common into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/lib/
    [ "$BOOM_TRACE" ] && echo "cp libamq_common.a $_INSTALL_ROOT/lib/"
    cp libamq_common.a $_INSTALL_ROOT/lib/ || croak "\"cp libamq_common.a $_INSTALL_ROOT/lib/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/lib/libamq_common.a"
    chmod 0644 $_INSTALL_ROOT/lib/libamq_common.a || croak "\"chmod 0644 $_INSTALL_ROOT/lib/libamq_common.a\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp amq.asl $_INSTALL_ROOT/bin/"
    cp amq.asl $_INSTALL_ROOT/bin/ || croak "\"cp amq.asl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq.asl"
    chmod 0644 $_INSTALL_ROOT/bin/amq.asl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_exchange.asl $_INSTALL_ROOT/bin/"
    cp amq_exchange.asl $_INSTALL_ROOT/bin/ || croak "\"cp amq_exchange.asl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_exchange.asl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_exchange.asl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_exchange.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_queue.asl $_INSTALL_ROOT/bin/"
    cp amq_queue.asl $_INSTALL_ROOT/bin/ || croak "\"cp amq_queue.asl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_queue.asl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_queue.asl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_queue.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_basic.asl $_INSTALL_ROOT/bin/"
    cp amq_basic.asl $_INSTALL_ROOT/bin/ || croak "\"cp amq_basic.asl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_basic.asl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_basic.asl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_basic.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_stdc.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_stdc.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_stdc.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_stdc.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_stdc.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_stdc.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_codegen.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_codegen.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_codegen.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_codegen.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_codegen.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_codegen.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_gen.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_gen.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_gen.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_gen.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_gen.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_gen.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_inherit.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_inherit.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_inherit.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_inherit.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_inherit.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_inherit.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_parse.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_parse.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_parse.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_parse.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_parse.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_parse.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_pal_preproc.gsl $_INSTALL_ROOT/bin/"
    cp amq_pal_preproc.gsl $_INSTALL_ROOT/bin/ || croak "\"cp amq_pal_preproc.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_pal_preproc.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_pal_preproc.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_pal_preproc.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence.icl $_INSTALL_ROOT/bin/"
    cp amq_sequence.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_sequence.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_sequence.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_sequence.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_sequence.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence_table.icl $_INSTALL_ROOT/bin/"
    cp amq_sequence_table.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_sequence_table.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_sequence_table.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_sequence_table.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_sequence_table.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_constants.icl $_INSTALL_ROOT/bin/"
    cp amq_constants.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_constants.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_constants.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_constants.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_constants.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic.icl $_INSTALL_ROOT/bin/"
    cp amq_content_basic.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_content_basic.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic_list.icl $_INSTALL_ROOT/bin/"
    cp amq_content_basic_list.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_content_basic_list.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic_list.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic_list.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_content_basic_list.icl\" failed"
    mkdir -p $_INSTALL_ROOT/doc/OpenAMQ_Common/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_Common/"
    cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_Common/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_Common/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_Common/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_Common/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_Common/readme.txt\" failed"
    mkdir -p $_INSTALL_ROOT/include/
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence.h $_INSTALL_ROOT/include/"
    cp amq_sequence.h $_INSTALL_ROOT/include/ || croak "\"cp amq_sequence.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_sequence.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_sequence.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_sequence.h\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence.hpp $_INSTALL_ROOT/include/"
    cp amq_sequence.hpp $_INSTALL_ROOT/include/ || croak "\"cp amq_sequence.hpp $_INSTALL_ROOT/include/\" failed"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_sequence.hpp"
    chmod 0644 $_INSTALL_ROOT/include/amq_sequence.hpp || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_sequence.hpp\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence_table.h $_INSTALL_ROOT/include/"
    cp amq_sequence_table.h $_INSTALL_ROOT/include/ || croak "\"cp amq_sequence_table.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.h\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "cp amq_sequence_table.hpp $_INSTALL_ROOT/include/"
    cp amq_sequence_table.hpp $_INSTALL_ROOT/include/ || croak "\"cp amq_sequence_table.hpp $_INSTALL_ROOT/include/\" failed"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.hpp"
    chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.hpp || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_sequence_table.hpp\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "cp amq_constants.h $_INSTALL_ROOT/include/"
    cp amq_constants.h $_INSTALL_ROOT/include/ || croak "\"cp amq_constants.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_constants.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_constants.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_constants.h\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "cp amq_constants.hpp $_INSTALL_ROOT/include/"
    cp amq_constants.hpp $_INSTALL_ROOT/include/ || croak "\"cp amq_constants.hpp $_INSTALL_ROOT/include/\" failed"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_constants.hpp"
    chmod 0644 $_INSTALL_ROOT/include/amq_constants.hpp || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_constants.hpp\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic.h $_INSTALL_ROOT/include/"
    cp amq_content_basic.h $_INSTALL_ROOT/include/ || croak "\"cp amq_content_basic.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.h\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic.hpp $_INSTALL_ROOT/include/"
    cp amq_content_basic.hpp $_INSTALL_ROOT/include/ || croak "\"cp amq_content_basic.hpp $_INSTALL_ROOT/include/\" failed"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.hpp"
    chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.hpp || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_content_basic.hpp\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic_list.h $_INSTALL_ROOT/include/"
    cp amq_content_basic_list.h $_INSTALL_ROOT/include/ || croak "\"cp amq_content_basic_list.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.h\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "cp amq_content_basic_list.hpp $_INSTALL_ROOT/include/"
    cp amq_content_basic_list.hpp $_INSTALL_ROOT/include/ || croak "\"cp amq_content_basic_list.hpp $_INSTALL_ROOT/include/\" failed"
    fi
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.hpp"
    chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.hpp || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_content_basic_list.hpp\" failed"
    fi
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."

    gsl -q -quiet:1 -target:doc amq.asl
    

    gsl -q -quiet:1 -target:pal amq.asl
    gsl -q -quiet:1 amq_pal.xnf
    
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq.asl"
    gsl -q -quiet:1 amq.asl || croak "\"gsl -q -quiet:1 amq.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_sequence.icl"
    gsl -q -quiet:1 -target:stdcpp amq_sequence.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_sequence.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_sequence.icl"
    gsl -q -quiet:1 amq_sequence.icl || croak "\"gsl -q -quiet:1 amq_sequence.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl"
    gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_sequence_table.icl"
    gsl -q -quiet:1 amq_sequence_table.icl || croak "\"gsl -q -quiet:1 amq_sequence_table.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_constants.icl"
    gsl -q -quiet:1 -target:stdcpp amq_constants.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_constants.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_constants.icl"
    gsl -q -quiet:1 amq_constants.icl || croak "\"gsl -q -quiet:1 amq_constants.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl"
    gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_content_basic.icl"
    gsl -q -quiet:1 amq_content_basic.icl || croak "\"gsl -q -quiet:1 amq_content_basic.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl"
    gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_content_basic_list.icl"
    gsl -q -quiet:1 amq_content_basic_list.icl || croak "\"gsl -q -quiet:1 amq_content_basic_list.icl\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."

    gsl -q -quiet:1 -target:doc amq.asl
    

    gsl -q -quiet:1 -target:pal amq.asl
    gsl -q -quiet:1 amq_pal.xnf
    
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq.asl"
    gsl -q -quiet:1 amq.asl || croak "\"gsl -q -quiet:1 amq.asl\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_sequence.icl"
    gsl -q -quiet:1 -target:stdcpp amq_sequence.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_sequence.icl\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_sequence.icl"
    gsl -q -quiet:1 amq_sequence.icl || croak "\"gsl -q -quiet:1 amq_sequence.icl\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl"
    gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_sequence_table.icl\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_sequence_table.icl"
    gsl -q -quiet:1 amq_sequence_table.icl || croak "\"gsl -q -quiet:1 amq_sequence_table.icl\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_constants.icl"
    gsl -q -quiet:1 -target:stdcpp amq_constants.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_constants.icl\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_constants.icl"
    gsl -q -quiet:1 amq_constants.icl || croak "\"gsl -q -quiet:1 amq_constants.icl\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl"
    gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_content_basic.icl\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_content_basic.icl"
    gsl -q -quiet:1 amq_content_basic.icl || croak "\"gsl -q -quiet:1 amq_content_basic.icl\" failed"
    if [ "$BOOM_MODEL_CPP" ]; then
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl"
    gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl || croak "\"gsl -q -quiet:1 -target:stdcpp amq_content_basic_list.icl\" failed"
    fi
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_content_basic_list.icl"
    gsl -q -quiet:1 amq_content_basic_list.icl || croak "\"gsl -q -quiet:1 amq_content_basic_list.icl\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED BINARIES   -----------------------

a_remove_generated_binaries() {
:
    rm -f libamq_common.a
    rm -f amq_sequence_test_test.o
    rm -f amq_sequence_test_test
    rm -f amq_sequence.o
    rm -f amq_sequence.opp
    rm -f amq_sequence_table_test_test.o
    rm -f amq_sequence_table_test_test
    rm -f amq_sequence_table.o
    rm -f amq_sequence_table.opp
    rm -f amq_constants.o
    rm -f amq_constants.opp
    rm -f amq_content_basic_test_test.o
    rm -f amq_content_basic_test_test
    rm -f amq_content_basic.o
    rm -f amq_content_basic.opp
    rm -f amq_content_basic_list_test_test.o
    rm -f amq_content_basic_list_test_test
    rm -f amq_content_basic_list.o
    rm -f amq_content_basic_list.opp
    rm -f amq_sequence_test.o
    rm -f amq_sequence_test
    rm -f amq_sequence.o
    rm -f amq_sequence_table_test.o
    rm -f amq_sequence_table_test
    rm -f amq_sequence_table.o
    rm -f amq_constants.o
    rm -f amq_content_basic_test.o
    rm -f amq_content_basic_test
    rm -f amq_content_basic.o
    rm -f amq_content_basic_list_test.o
    rm -f amq_content_basic_list_test
    rm -f amq_content_basic_list.o
    #   Remove byproducts of typical work
    rm -f core* 
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f amq_pal.xnf
    rm -f amq_pal_stdc.gsl
    rm -f amq_pal_codegen.gsl
    rm -f amq_pal_gen.gsl
    rm -f amq_pal_inherit.gsl
    rm -f amq_pal_parse.gsl
    rm -f amq_pal_preproc.gsl
    rm -f amq_sequence_table.icl
    rm -f amq_constants.icl
    rm -f amq_content_basic.icl
    rm -f amq_content_basic_list.icl
    rm -f amq_sequence_test.c
    rm -f amq_sequence.h
    rm -f amq_sequence.c
    rm -f amq_sequence.hpp
    rm -f amq_sequence.cpp
    rm -f amq_sequence_table_test.c
    rm -f amq_sequence_table.h
    rm -f amq_sequence_table.c
    rm -f amq_sequence_table.hpp
    rm -f amq_sequence_table.cpp
    rm -f amq_constants.h
    rm -f amq_constants.c
    rm -f amq_constants.hpp
    rm -f amq_constants.cpp
    rm -f amq_content_basic_test.c
    rm -f amq_content_basic.h
    rm -f amq_content_basic.c
    rm -f amq_content_basic.hpp
    rm -f amq_content_basic.cpp
    rm -f amq_content_basic_list_test.c
    rm -f amq_content_basic_list.h
    rm -f amq_content_basic_list.c
    rm -f amq_content_basic_list.hpp
    rm -f amq_content_basic_list.cpp
    rm -f stamp_generate
    rm -f OpenAMQ_Common_*.zip
    rm -f OpenAMQ_Common_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "OpenAMQ_Common-1.3d1"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    carp "Running regression tests..."
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_sequence_test"
    else
        RUN_COMMAND="./amq_sequence_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_sequence_table_test"
    else
        RUN_COMMAND="./amq_sequence_table_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_content_basic_test"
    else
        RUN_COMMAND="./amq_content_basic_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_content_basic_list_test"
    else
        RUN_COMMAND="./amq_content_basic_list_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files, and"
    echo "    compiles all source files."
echo "compile:"
    echo "  From the raw project sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the raw project sources, removes all generated"
    echo "    source and binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project.  Note that binary"
    echo "    distributions can only be created at the product level."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  From the packaged sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  From the stripped-down packaged sources, compiles all source files"
    echo "    without any code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
    echo "    This action is only valid after a successful build."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

@echo off
:-
:-  Boom builder for Libero 2.41
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=2.41
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [lr]: The IBASE variable is not set.              Please set it to the location where Libero should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    echo boom I: [lr]: Building Libero...
    if "!MSVCDir!"=="" set MSVCDir=C:\Program Files\Microsoft Visual Studio\VC98
    if not exist "!MSVCDir!\bin" (
        echo boom E: [lr]: Cannot find MSVC compiler in !MSVCdir!.
        echo boom E: [lr]: Please set MSVCDir environment variable to VC98 directory.
        set _exception=1
        goto :eof
    )
    set INCDIR=
    set LIBDIR=
    if "!BOOM_TRACE!"=="1" (
        set MY_COPTS=-v
    ) else (
        set MY_COPTS=-q
    )
    if not "!_LOCAL_BASE!"=="" (
        set MY_COPTS=!MY_COPTS! -li !_LOCAL_BASE!\include -ll !_LOCAL_BASE!\lib
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lr
    verify>nul
    call c !MY_COPTS! lr
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lr' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrcalc
    verify>nul
    call c !MY_COPTS! lrcalc
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrcalc' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lreval
    verify>nul
    call c !MY_COPTS! lreval
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lreval' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrcode
    verify>nul
    call c !MY_COPTS! lrcode
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrcode' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrload
    verify>nul
    call c !MY_COPTS! lrload
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrload' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrdump
    verify>nul
    call c !MY_COPTS! lrdump
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrdump' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrfree
    verify>nul
    call c !MY_COPTS! lrfree
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrfree' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrsort
    verify>nul
    call c !MY_COPTS! lrsort
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrsort' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrglib
    verify>nul
    call c !MY_COPTS! lrglib
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrglib' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrlibr
    verify>nul
    call c !MY_COPTS! lrlibr
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrlibr' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lroptn
    verify>nul
    call c !MY_COPTS! lroptn
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lroptn' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! lrsymb
    verify>nul
    call c !MY_COPTS! lrsymb
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! lrsymb' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrcalc
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrcalc
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrcalc' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lreval
    verify>nul
    call c !MY_COPTS! -r liblr.lib lreval
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lreval' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrcode
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrcode
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrcode' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrload
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrload
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrload' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrdump
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrdump
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrdump' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrfree
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrfree
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrfree' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrsort
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrsort
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrsort' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrglib
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrglib
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrglib' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrlibr
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrlibr
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrlibr' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lroptn
    verify>nul
    call c !MY_COPTS! -r liblr.lib lroptn
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lroptn' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -r liblr.lib lrsymb
    verify>nul
    call c !MY_COPTS! -r liblr.lib lrsymb
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -r liblr.lib lrsymb' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo c !MY_COPTS! -L lr
    verify>nul
    call c !MY_COPTS! -L lr
    if errorlevel 1 (
        echo boom E: [lr]: 'c !MY_COPTS! -L lr' failed - stop.
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist libero\version.h echo libero\version.h>>_package.lst
    if exist libero\lr.c echo libero\lr.c>>_package.lst
    if exist libero\lrcalc.c echo libero\lrcalc.c>>_package.lst
    if exist libero\lreval.c echo libero\lreval.c>>_package.lst
    if exist libero\lrcode.c echo libero\lrcode.c>>_package.lst
    if exist libero\lrload.c echo libero\lrload.c>>_package.lst
    if exist libero\lrdump.c echo libero\lrdump.c>>_package.lst
    if exist libero\lrfree.c echo libero\lrfree.c>>_package.lst
    if exist libero\lrsort.c echo libero\lrsort.c>>_package.lst
    if exist libero\lrglib.c echo libero\lrglib.c>>_package.lst
    if exist libero\lrlibr.c echo libero\lrlibr.c>>_package.lst
    if exist libero\lroptn.c echo libero\lroptn.c>>_package.lst
    if exist libero\lrsymb.c echo libero\lrsymb.c>>_package.lst
    if exist libero\lrpriv.h echo libero\lrpriv.h>>_package.lst
    if exist libero\lrschema.asm echo libero\lrschema.asm>>_package.lst
    if exist libero\lrschema.awk echo libero\lrschema.awk>>_package.lst
    if exist libero\lrschema.bsh echo libero\lrschema.bsh>>_package.lst
    if exist libero\lrschema.c echo libero\lrschema.c>>_package.lst
    if exist libero\lrschema.c99 echo libero\lrschema.c99>>_package.lst
    if exist libero\lrschema.cob echo libero\lrschema.cob>>_package.lst
    if exist libero\lrschema.cpp echo libero\lrschema.cpp>>_package.lst
    if exist libero\lrschema.csh echo libero\lrschema.csh>>_package.lst
    if exist libero\lrschema.jav echo libero\lrschema.jav>>_package.lst
    if exist libero\lrschema.ksh echo libero\lrschema.ksh>>_package.lst
    if exist libero\lrschema.mst echo libero\lrschema.mst>>_package.lst
    if exist libero\lrschema.pas echo libero\lrschema.pas>>_package.lst
    if exist libero\lrschema.pl echo libero\lrschema.pl>>_package.lst
    if exist libero\lrservice.pl echo libero\lrservice.pl>>_package.lst
    if exist libero\lrschema.py echo libero\lrschema.py>>_package.lst
    if exist libero\lrschema.php echo libero\lrschema.php>>_package.lst
    if exist libero\lrschema.rex echo libero\lrschema.rex>>_package.lst
    if exist libero\lrschema.sh echo libero\lrschema.sh>>_package.lst
    if exist libero\lrschema.sql echo libero\lrschema.sql>>_package.lst
    if exist libero\lrschema.vb echo libero\lrschema.vb>>_package.lst
    if exist libero\lrmesg.txt echo libero\lrmesg.txt>>_package.lst
    if exist libero\prelude.h echo libero\prelude.h>>_package.lst
    if exist libero\lr.ini echo libero\lr.ini>>_package.lst
    if exist libero\lr_eg.ini echo libero\lr_eg.ini>>_package.lst
    if exist libero\template echo libero\template>>_package.lst
    if exist libero\prelude.pdl echo libero\prelude.pdl>>_package.lst
    if exist libero\license.gpl echo libero\license.gpl>>_package.lst
    if exist libero\project.pdl echo libero\project.pdl>>_package.lst
    if exist libero\readme.txt echo libero\readme.txt>>_package.lst
    if exist libero\lrcalc.l echo libero\lrcalc.l>>_package.lst
    if exist libero\lrcalc.i echo libero\lrcalc.i>>_package.lst
    if exist libero\lrcalc.d echo libero\lrcalc.d>>_package.lst
    if exist libero\lreval.l echo libero\lreval.l>>_package.lst
    if exist libero\lreval.i echo libero\lreval.i>>_package.lst
    if exist libero\lreval.d echo libero\lreval.d>>_package.lst
    if exist libero\lrcode.l echo libero\lrcode.l>>_package.lst
    if exist libero\lrcode.i echo libero\lrcode.i>>_package.lst
    if exist libero\lrcode.d echo libero\lrcode.d>>_package.lst
    if exist libero\lrload.l echo libero\lrload.l>>_package.lst
    if exist libero\lrload.i echo libero\lrload.i>>_package.lst
    if exist libero\lrload.d echo libero\lrload.d>>_package.lst
    if exist libero\lrglib.h echo libero\lrglib.h>>_package.lst
    if exist libero\lrlibr.h echo libero\lrlibr.h>>_package.lst
    if exist libero\lroptn.h echo libero\lroptn.h>>_package.lst
    if exist libero\lrsymb.h echo libero\lrsymb.h>>_package.lst
    if exist libero\stamp_generate echo libero\stamp_generate>>_package.lst
    if exist libero\boomakew.bat echo libero\boomakew.bat>>_package.lst
    if exist libero\configure echo libero\configure>>_package.lst
    if exist libero\Makefile.unix echo libero\Makefile.unix>>_package.lst
    if exist libero\boomake echo libero\boomake>>_package.lst
    if exist libero\configure.bat echo libero\configure.bat>>_package.lst
    if exist libero\Makefile.win32 echo libero\Makefile.win32>>_package.lst
    if exist libero\boomake.bat echo libero\boomake.bat>>_package.lst
    if exist libero\lr.vcproj echo libero\lr.vcproj>>_package.lst
    if exist libero\liblr.vcproj echo libero\liblr.vcproj>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [lr]: Building lr-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d lr-!MY_VERSION!
    if exist  lr-!MY_VERSION!-src.zip del lr-!MY_VERSION!-src.zip
    zip -rmq lr-!MY_VERSION!-src.zip lr-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist version.h (
        echo boom E: [lr]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.c (
        echo boom E: [lr]: lr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.c (
        echo boom E: [lr]: lrcalc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.c (
        echo boom E: [lr]: lreval.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.c (
        echo boom E: [lr]: lrcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.c (
        echo boom E: [lr]: lrload.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrdump.c (
        echo boom E: [lr]: lrdump.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrfree.c (
        echo boom E: [lr]: lrfree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsort.c (
        echo boom E: [lr]: lrsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.c (
        echo boom E: [lr]: lrglib.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.c (
        echo boom E: [lr]: lrlibr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.c (
        echo boom E: [lr]: lroptn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.c (
        echo boom E: [lr]: lrsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrpriv.h (
        echo boom E: [lr]: lrpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.asm (
        echo boom E: [lr]: lrschema.asm is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.awk (
        echo boom E: [lr]: lrschema.awk is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.bsh (
        echo boom E: [lr]: lrschema.bsh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c (
        echo boom E: [lr]: lrschema.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c99 (
        echo boom E: [lr]: lrschema.c99 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cob (
        echo boom E: [lr]: lrschema.cob is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cpp (
        echo boom E: [lr]: lrschema.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.csh (
        echo boom E: [lr]: lrschema.csh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.jav (
        echo boom E: [lr]: lrschema.jav is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.ksh (
        echo boom E: [lr]: lrschema.ksh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.mst (
        echo boom E: [lr]: lrschema.mst is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pas (
        echo boom E: [lr]: lrschema.pas is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pl (
        echo boom E: [lr]: lrschema.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrservice.pl (
        echo boom E: [lr]: lrservice.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.py (
        echo boom E: [lr]: lrschema.py is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.php (
        echo boom E: [lr]: lrschema.php is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.rex (
        echo boom E: [lr]: lrschema.rex is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sh (
        echo boom E: [lr]: lrschema.sh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sql (
        echo boom E: [lr]: lrschema.sql is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.vb (
        echo boom E: [lr]: lrschema.vb is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrmesg.txt (
        echo boom E: [lr]: lrmesg.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [lr]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.ini (
        echo boom E: [lr]: lr.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr_eg.ini (
        echo boom E: [lr]: lr_eg.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist template (
        echo boom E: [lr]: template is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [lr]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [lr]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.l (
        echo boom E: [lr]: lrcalc.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.i (
        echo boom E: [lr]: lrcalc.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.d (
        echo boom E: [lr]: lrcalc.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.l (
        echo boom E: [lr]: lreval.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.i (
        echo boom E: [lr]: lreval.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.d (
        echo boom E: [lr]: lreval.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.l (
        echo boom E: [lr]: lrcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.i (
        echo boom E: [lr]: lrcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.d (
        echo boom E: [lr]: lrcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.l (
        echo boom E: [lr]: lrload.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.i (
        echo boom E: [lr]: lrload.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.d (
        echo boom E: [lr]: lrload.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.h (
        echo boom E: [lr]: lrglib.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.h (
        echo boom E: [lr]: lrlibr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.h (
        echo boom E: [lr]: lroptn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.h (
        echo boom E: [lr]: lrsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [lr]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [lr]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [lr]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [lr]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [lr]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [lr]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [lr]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [lr]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.vcproj (
        echo boom E: [lr]: lr.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist liblr.vcproj (
        echo boom E: [lr]: liblr.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist lrschema.asm (
        echo boom E: [lr]: lrschema.asm is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.awk (
        echo boom E: [lr]: lrschema.awk is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.bsh (
        echo boom E: [lr]: lrschema.bsh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c (
        echo boom E: [lr]: lrschema.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c99 (
        echo boom E: [lr]: lrschema.c99 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cob (
        echo boom E: [lr]: lrschema.cob is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cpp (
        echo boom E: [lr]: lrschema.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.csh (
        echo boom E: [lr]: lrschema.csh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.jav (
        echo boom E: [lr]: lrschema.jav is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.ksh (
        echo boom E: [lr]: lrschema.ksh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.mst (
        echo boom E: [lr]: lrschema.mst is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pas (
        echo boom E: [lr]: lrschema.pas is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pl (
        echo boom E: [lr]: lrschema.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrservice.pl (
        echo boom E: [lr]: lrservice.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.py (
        echo boom E: [lr]: lrschema.py is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.php (
        echo boom E: [lr]: lrschema.php is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.rex (
        echo boom E: [lr]: lrschema.rex is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sh (
        echo boom E: [lr]: lrschema.sh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sql (
        echo boom E: [lr]: lrschema.sql is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.vb (
        echo boom E: [lr]: lrschema.vb is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrmesg.txt (
        echo boom E: [lr]: lrmesg.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.exe (
        echo boom E: [lr]: lr.exe is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.ini (
        echo boom E: [lr]: lr.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [lr]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist version.h (
        echo boom E: [lr]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.c (
        echo boom E: [lr]: lr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.c (
        echo boom E: [lr]: lrcalc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.c (
        echo boom E: [lr]: lreval.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.c (
        echo boom E: [lr]: lrcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.c (
        echo boom E: [lr]: lrload.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrdump.c (
        echo boom E: [lr]: lrdump.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrfree.c (
        echo boom E: [lr]: lrfree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsort.c (
        echo boom E: [lr]: lrsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.c (
        echo boom E: [lr]: lrglib.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.c (
        echo boom E: [lr]: lrlibr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.c (
        echo boom E: [lr]: lroptn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.c (
        echo boom E: [lr]: lrsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrpriv.h (
        echo boom E: [lr]: lrpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.asm (
        echo boom E: [lr]: lrschema.asm is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.awk (
        echo boom E: [lr]: lrschema.awk is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.bsh (
        echo boom E: [lr]: lrschema.bsh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c (
        echo boom E: [lr]: lrschema.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c99 (
        echo boom E: [lr]: lrschema.c99 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cob (
        echo boom E: [lr]: lrschema.cob is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cpp (
        echo boom E: [lr]: lrschema.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.csh (
        echo boom E: [lr]: lrschema.csh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.jav (
        echo boom E: [lr]: lrschema.jav is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.ksh (
        echo boom E: [lr]: lrschema.ksh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.mst (
        echo boom E: [lr]: lrschema.mst is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pas (
        echo boom E: [lr]: lrschema.pas is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pl (
        echo boom E: [lr]: lrschema.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrservice.pl (
        echo boom E: [lr]: lrservice.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.py (
        echo boom E: [lr]: lrschema.py is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.php (
        echo boom E: [lr]: lrschema.php is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.rex (
        echo boom E: [lr]: lrschema.rex is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sh (
        echo boom E: [lr]: lrschema.sh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sql (
        echo boom E: [lr]: lrschema.sql is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.vb (
        echo boom E: [lr]: lrschema.vb is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrmesg.txt (
        echo boom E: [lr]: lrmesg.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [lr]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.ini (
        echo boom E: [lr]: lr.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr_eg.ini (
        echo boom E: [lr]: lr_eg.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist template (
        echo boom E: [lr]: template is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [lr]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [lr]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.l (
        echo boom E: [lr]: lrcalc.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.l (
        echo boom E: [lr]: lreval.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.l (
        echo boom E: [lr]: lrcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.l (
        echo boom E: [lr]: lrload.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.h (
        echo boom E: [lr]: lrglib.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.h (
        echo boom E: [lr]: lrlibr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.h (
        echo boom E: [lr]: lroptn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.h (
        echo boom E: [lr]: lrsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [lr]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [lr]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [lr]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist version.h (
        echo boom E: [lr]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.c (
        echo boom E: [lr]: lr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.c (
        echo boom E: [lr]: lrcalc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.c (
        echo boom E: [lr]: lreval.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.c (
        echo boom E: [lr]: lrcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.c (
        echo boom E: [lr]: lrload.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrdump.c (
        echo boom E: [lr]: lrdump.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrfree.c (
        echo boom E: [lr]: lrfree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsort.c (
        echo boom E: [lr]: lrsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.c (
        echo boom E: [lr]: lrglib.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.c (
        echo boom E: [lr]: lrlibr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.c (
        echo boom E: [lr]: lroptn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.c (
        echo boom E: [lr]: lrsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrpriv.h (
        echo boom E: [lr]: lrpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.asm (
        echo boom E: [lr]: lrschema.asm is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.awk (
        echo boom E: [lr]: lrschema.awk is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.bsh (
        echo boom E: [lr]: lrschema.bsh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c (
        echo boom E: [lr]: lrschema.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.c99 (
        echo boom E: [lr]: lrschema.c99 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cob (
        echo boom E: [lr]: lrschema.cob is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.cpp (
        echo boom E: [lr]: lrschema.cpp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.csh (
        echo boom E: [lr]: lrschema.csh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.jav (
        echo boom E: [lr]: lrschema.jav is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.ksh (
        echo boom E: [lr]: lrschema.ksh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.mst (
        echo boom E: [lr]: lrschema.mst is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pas (
        echo boom E: [lr]: lrschema.pas is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.pl (
        echo boom E: [lr]: lrschema.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrservice.pl (
        echo boom E: [lr]: lrservice.pl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.py (
        echo boom E: [lr]: lrschema.py is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.php (
        echo boom E: [lr]: lrschema.php is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.rex (
        echo boom E: [lr]: lrschema.rex is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sh (
        echo boom E: [lr]: lrschema.sh is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.sql (
        echo boom E: [lr]: lrschema.sql is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrschema.vb (
        echo boom E: [lr]: lrschema.vb is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrmesg.txt (
        echo boom E: [lr]: lrmesg.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [lr]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.ini (
        echo boom E: [lr]: lr.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr_eg.ini (
        echo boom E: [lr]: lr_eg.ini is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist template (
        echo boom E: [lr]: template is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [lr]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [lr]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.l (
        echo boom E: [lr]: lrcalc.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.i (
        echo boom E: [lr]: lrcalc.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcalc.d (
        echo boom E: [lr]: lrcalc.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.l (
        echo boom E: [lr]: lreval.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.i (
        echo boom E: [lr]: lreval.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lreval.d (
        echo boom E: [lr]: lreval.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.l (
        echo boom E: [lr]: lrcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.i (
        echo boom E: [lr]: lrcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrcode.d (
        echo boom E: [lr]: lrcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.l (
        echo boom E: [lr]: lrload.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.i (
        echo boom E: [lr]: lrload.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrload.d (
        echo boom E: [lr]: lrload.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrglib.h (
        echo boom E: [lr]: lrglib.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrlibr.h (
        echo boom E: [lr]: lrlibr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lroptn.h (
        echo boom E: [lr]: lroptn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lrsymb.h (
        echo boom E: [lr]: lrsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [lr]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [lr]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [lr]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [lr]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [lr]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [lr]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [lr]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [lr]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist lr.vcproj (
        echo boom E: [lr]: lr.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist liblr.vcproj (
        echo boom E: [lr]: liblr.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [lr]: installing Libero into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.asm !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.asm !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.asm !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.awk !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.awk !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.awk !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.bsh !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.bsh !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.bsh !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.c !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.c !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.c !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.c99 !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.c99 !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.c99 !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.cob !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.cob !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.cob !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.cpp !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.cpp !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.cpp !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.csh !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.csh !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.csh !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.jav !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.jav !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.jav !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.ksh !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.ksh !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.ksh !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.mst !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.mst !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.mst !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.pas !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.pas !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.pas !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.pl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.pl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.pl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrservice.pl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrservice.pl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrservice.pl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.py !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.py !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.py !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.php !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.php !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.php !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.rex !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.rex !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.rex !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.sh !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.sh !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.sh !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.sql !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.sql !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.sql !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrschema.vb !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrschema.vb !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrschema.vb !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lrmesg.txt !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lrmesg.txt !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lrmesg.txt !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lr.exe !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lr.exe !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lr.exe !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y lr.ini !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y lr.ini !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y lr.ini !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\doc\Libero\nul mkdir !_INSTALL_ROOT!\doc\Libero\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\Libero\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\Libero\>nul
    if errorlevel 1 (
        echo boom E: [lr]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\Libero\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [lr]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [lr]: Generating files...
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrcalc.l
    verify>nul
    call lr -quiet lrcalc.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrcalc.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lreval.l
    verify>nul
    call lr -quiet lreval.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lreval.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrcode.l
    verify>nul
    call lr -quiet lrcode.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrload.l
    verify>nul
    call lr -quiet lrload.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrload.l' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [lr]: Generating files...
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrcalc.l
    verify>nul
    call lr -quiet lrcalc.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrcalc.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lreval.l
    verify>nul
    call lr -quiet lreval.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lreval.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrcode.l
    verify>nul
    call lr -quiet lrcode.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet lrload.l
    verify>nul
    call lr -quiet lrload.l
    if errorlevel 1 (
        echo boom E: [lr]: 'lr -quiet lrload.l' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist lr.exe del lr.exe
    if exist lr.obj del lr.obj
    if exist lr.exe del lr.exe
    if exist lrcalc.obj del lrcalc.obj
    if exist lreval.obj del lreval.obj
    if exist lrcode.obj del lrcode.obj
    if exist lrload.obj del lrload.obj
    if exist lrdump.obj del lrdump.obj
    if exist lrfree.obj del lrfree.obj
    if exist lrsort.obj del lrsort.obj
    if exist lrglib.obj del lrglib.obj
    if exist lrlibr.obj del lrlibr.obj
    if exist lroptn.obj del lroptn.obj
    if exist lrsymb.obj del lrsymb.obj
    if exist liblr.lib del liblr.lib
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist lrcalc.i del lrcalc.i
    if exist lrcalc.d del lrcalc.d
    if exist lreval.i del lreval.i
    if exist lreval.d del lreval.d
    if exist lrcode.i del lrcode.i
    if exist lrcode.d del lrcode.d
    if exist lrload.i del lrload.i
    if exist lrload.d del lrload.d
    if exist stamp_generate del stamp_generate
    if exist configure del configure
    if exist Makefile.unix del Makefile.unix
    if exist configure.bat del configure.bat
    if exist Makefile.win32 del Makefile.win32
    if exist lr.vcproj del lr.vcproj
    if exist liblr.vcproj del liblr.vcproj
    if exist lr_*.zip del lr_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo lr-2.41
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [lr]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    exit /b 0

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    exit /b 0

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    echo Unknown command - use one of:
    echo.
    goto r_!state!
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    exit /b 0


exit /b 0

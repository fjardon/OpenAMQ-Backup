/*---------------------------------------------------------------------------*
 *  ggpars.d - LIBERO dialog data definitions for ggpars.c.                  *
 *  Generated by LIBERO 2.4 on  6 Oct, 2010, 19:32.                          *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define abort_event                     0
#define after_event                     1
#define anomaly_event                   2
#define append_event                    3
#define arguments_event                 4
#define as_event                        5
#define assign_event                    6
#define before_event                    7
#define bracketed_identifier_event      8
#define by_event                        9
#define call_event                      10
#define close_event                     11
#define close_bracket_event             12
#define close_comment_event             13
#define comment_event                   14
#define continue_attribute_event        15
#define continue_scope_event            16
#define continue_scope_or_attribute_event 17
#define copy_event                      18
#define default_operator_event          19
#define define_event                    20
#define delete_event                    21
#define direct_event                    22
#define echo_event                      23
#define else_event                      24
#define elsif_event                     25
#define empty_stack_event               26
#define end_for_event                   27
#define end_function_event              28
#define end_if_event                    29
#define end_macro_event                 30
#define end_new_event                   31
#define end_of_file_event               32
#define end_of_line_event               33
#define end_scope_event                 34
#define end_template_event              35
#define end_while_event                 36
#define error_event                     37
#define expression_event                38
#define extend_event                    39
#define for_event                       40
#define format_event                    41
#define from_event                      42
#define function_event                  43
#define gsl_event                       44
#define identifier_event                45
#define if_event                        46
#define implicit_assign_or_invoke_event 47
#define include_event                   48
#define incoming_event                  49
#define invoke_event                    50
#define last_event                      51
#define line_event                      52
#define literal_event                   53
#define load_event                      54
#define locator_event                   55
#define macro_event                     56
#define macro_args_event                57
#define macro_return_event              58
#define member_event                    59
#define modifier_event                  60
#define move_event                      61
#define new_event                       62
#define next_event                      63
#define next_arg_event                  64
#define no_bracket_event                65
#define noalias_event                   66
#define nostack_event                   67
#define number_event                    68
#define open_event                      69
#define open_bracket_event              70
#define open_comment_event              71
#define operand_event                   72
#define operator_event                  73
#define other_event                     74
#define output_event                    75
#define point_event                     76
#define pretty_event                    77
#define quote_event                     78
#define quoted_event                    79
#define return_event                    80
#define save_event                      81
#define scope_event                     82
#define script_event                    83
#define shutdown_event                  84
#define sign_event                      85
#define simple_operand_event            86
#define sort_event                      87
#define spaces_event                    88
#define substitute_event                89
#define template_event                  90
#define text_event                      91
#define to_event                        92
#define unary_operator_event            93
#define where_event                     94
#define while_event                     95
#define xml_event                       96
#define _LR_STATE_after_init            0
#define _LR_STATE_allow_text            1
#define _LR_STATE_expect_text           2
#define _LR_STATE_expect_operand        3
#define _LR_STATE_after_sign            4
#define _LR_STATE_after_sign_point      5
#define _LR_STATE_after_point           6
#define _LR_STATE_after_number          7
#define _LR_STATE_after_number_point    8
#define _LR_STATE_allow_operand         9
#define _LR_STATE_continue_comment      10
#define _LR_STATE_continue_quoted       11
#define _LR_STATE_expect_number         12
#define _LR_STATE_expect_signed_number  13
#define _LR_STATE_identifier_superstate 14
#define _LR_STATE_expect_identifier     15
#define _LR_STATE_allow_identifier      16
#define _LR_STATE_continue_identifier   17
#define _LR_STATE_expect_bracketed_identifier 18
#define _LR_STATE_continue_bracketed_identifier 19
#define _LR_STATE_scope_superstate      20
#define _LR_STATE_expect_scope          21
#define _LR_STATE_allow_scope           22
#define _LR_STATE_continue_scope        23
#define _LR_STATE_scope_attribute_superstate 24
#define _LR_STATE_continue_scope_or_attribute 25
#define _LR_STATE_expect_scope_attribute 26
#define _LR_STATE_continue_attribute    27
#define _LR_STATE_expect_operator       28
#define _LR_STATE_after_simple_operand  29
#define _LR_STATE_expect_arguments      30
#define _LR_STATE_expect_substitute     31
#define _LR_STATE_expect_modifier       32
#define _LR_STATE_expect_script         33
#define _LR_STATE_allow_number_as_text  34
#define _LR_STATE_expect_literal        35
#define _LR_STATE_expect_assign_or_args 36
#define _LR_STATE_expect_assign         37
#define _LR_STATE_after_macro           38
#define _LR_STATE_allow_macro_args      39
#define _LR_STATE_expect_macro_args     40
#define _LR_STATE_expect_argument       41
#define _LR_STATE_expect_invoke_args    42
#define _LR_STATE_expect_locator        43
#define _LR_STATE_expect_source         44
#define _LR_STATE_expect_direct         45
#define _LR_STATE_continue_direct       46
#define _LR_STATE_expect_terminator     47
#define _LR_STATE_expect_save           48
#define _LR_STATE_expect_new            49
#define _LR_STATE_expect_for            50
#define _LR_STATE_expect_scope_modifier 51
#define _LR_STATE_expect_end_of_line    52
#define _LR_STATE_returning             53
#define _LR_STATE_defaults              54
#define _LR_defaults_state              54


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE read_script_line             (THREAD *thread);
MODULE generate_script_exception    (THREAD *thread);
MODULE insert_line_node             (THREAD *thread);
MODULE ready_for_op1_field          (THREAD *thread);
MODULE get_template_token           (THREAD *thread);
MODULE generate_comment_exception   (THREAD *thread);
MODULE generate_line_exception      (THREAD *thread);
MODULE get_script_command_token     (THREAD *thread);
MODULE push_expression_state        (THREAD *thread);
MODULE get_expression_token         (THREAD *thread);
MODULE insert_comment_node          (THREAD *thread);
MODULE commit_memory_allocations    (THREAD *thread);
MODULE return_ok_feedback           (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE rollback_memory_allocations  (THREAD *thread);
MODULE return_eof_feedback          (THREAD *thread);
MODULE insert_text_node             (THREAD *thread);
MODULE count_token_width            (THREAD *thread);
MODULE push_text_state              (THREAD *thread);
MODULE push_substitute_state        (THREAD *thread);
MODULE insert_substitute_node       (THREAD *thread);
MODULE insert_spaces_only_node      (THREAD *thread);
MODULE set_extend_flag              (THREAD *thread);
MODULE return_to_root_node          (THREAD *thread);
MODULE push_quote_character         (THREAD *thread);
MODULE push_operand_state           (THREAD *thread);
MODULE insert_literal_node          (THREAD *thread);
MODULE count_spaces_and_token_width (THREAD *thread);
MODULE get_quoted_token             (THREAD *thread);
MODULE save_the_sign                (THREAD *thread);
MODULE insert_unary_operator_node   (THREAD *thread);
MODULE ready_for_op2_field          (THREAD *thread);
MODULE insert_number_node           (THREAD *thread);
MODULE push_simple_operand_state    (THREAD *thread);
MODULE push_continue_scope_or_attribute_state (THREAD *thread);
MODULE insert_symbol_node           (THREAD *thread);
MODULE ready_for_scope_field        (THREAD *thread);
MODULE get_bracketed_identifier_token (THREAD *thread);
MODULE push_continue_attribute_state (THREAD *thread);
MODULE push_continue_scope_state    (THREAD *thread);
MODULE insert_member_node           (THREAD *thread);
MODULE insert_unknown_operand_node  (THREAD *thread);
MODULE push_identifier_state        (THREAD *thread);
MODULE add_one_bracket              (THREAD *thread);
MODULE get_comment_token            (THREAD *thread);
MODULE dialog_call                  (THREAD *thread);
MODULE copy_the_operator            (THREAD *thread);
MODULE restore_the_sign             (THREAD *thread);
MODULE rewind_to_same_token         (THREAD *thread);
MODULE signal_internal_error        (THREAD *thread);
MODULE return_error_feedback        (THREAD *thread);
MODULE return_to_operand            (THREAD *thread);
MODULE pop_previous_state           (THREAD *thread);
MODULE insert_empty_text_node       (THREAD *thread);
MODULE return_one_more              (THREAD *thread);
MODULE ready_for_name_field         (THREAD *thread);
MODULE change_number_to_symbol_node (THREAD *thread);
MODULE return_to_expression         (THREAD *thread);
MODULE dialog_return                (THREAD *thread);
MODULE push_quoted_state            (THREAD *thread);
MODULE make_line_break              (THREAD *thread);
MODULE push_bracketed_identifier_state (THREAD *thread);
MODULE return_to_scope              (THREAD *thread);
MODULE change_operand_to_symbol_node (THREAD *thread);
MODULE move_scope_to_name           (THREAD *thread);
MODULE insert_operator_node         (THREAD *thread);
MODULE close_one_bracket            (THREAD *thread);
MODULE change_to_call_node          (THREAD *thread);
MODULE push_call_state              (THREAD *thread);
MODULE push_arguments_state         (THREAD *thread);
MODULE return_to_arguments          (THREAD *thread);
MODULE get_modifier_token           (THREAD *thread);
MODULE ready_for_as_field           (THREAD *thread);
MODULE confirm_modifier_specified   (THREAD *thread);
MODULE push_modifier_state          (THREAD *thread);
MODULE insert_empty_node_if_needed  (THREAD *thread);
MODULE insert_close_node            (THREAD *thread);
MODULE insert_else_node             (THREAD *thread);
MODULE insert_end_if_node           (THREAD *thread);
MODULE insert_end_for_node          (THREAD *thread);
MODULE insert_end_scope_node        (THREAD *thread);
MODULE insert_end_macro_node        (THREAD *thread);
MODULE insert_end_function_node     (THREAD *thread);
MODULE insert_end_new_node          (THREAD *thread);
MODULE insert_end_while_node        (THREAD *thread);
MODULE insert_output_node           (THREAD *thread);
MODULE insert_append_node           (THREAD *thread);
MODULE insert_echo_node             (THREAD *thread);
MODULE insert_abort_node            (THREAD *thread);
MODULE push_define_state            (THREAD *thread);
MODULE insert_define_node           (THREAD *thread);
MODULE push_implicit_assign_or_invoke_state (THREAD *thread);
MODULE push_macro_state             (THREAD *thread);
MODULE insert_macro_node            (THREAD *thread);
MODULE insert_function_node         (THREAD *thread);
MODULE insert_return_node           (THREAD *thread);
MODULE push_invoke_state            (THREAD *thread);
MODULE insert_call_node             (THREAD *thread);
MODULE insert_gsl_node              (THREAD *thread);
MODULE get_script_token             (THREAD *thread);
MODULE insert_direct_node           (THREAD *thread);
MODULE push_xml_state               (THREAD *thread);
MODULE insert_xml_node              (THREAD *thread);
MODULE insert_template_node         (THREAD *thread);
MODULE insert_end_template_node     (THREAD *thread);
MODULE push_save_state              (THREAD *thread);
MODULE insert_save_node             (THREAD *thread);
MODULE insert_if_node               (THREAD *thread);
MODULE insert_elsif_node            (THREAD *thread);
MODULE push_new_state               (THREAD *thread);
MODULE push_locator_state           (THREAD *thread);
MODULE insert_new_node              (THREAD *thread);
MODULE insert_move_node             (THREAD *thread);
MODULE insert_copy_node             (THREAD *thread);
MODULE push_load_state              (THREAD *thread);
MODULE insert_delete_node           (THREAD *thread);
MODULE push_for_state               (THREAD *thread);
MODULE insert_for_node              (THREAD *thread);
MODULE push_scope_state             (THREAD *thread);
MODULE insert_scope_node            (THREAD *thread);
MODULE insert_while_node            (THREAD *thread);
MODULE insert_next_node             (THREAD *thread);
MODULE insert_last_node             (THREAD *thread);
MODULE insert_sort_node             (THREAD *thread);
MODULE ready_for_to_field           (THREAD *thread);
MODULE ready_for_before_field       (THREAD *thread);
MODULE ready_for_after_field        (THREAD *thread);
MODULE get_direct_quoted_token      (THREAD *thread);
MODULE unset_stacked_flag           (THREAD *thread);
MODULE expect_end_of_line           (THREAD *thread);
MODULE error_if_empty_expression    (THREAD *thread);
MODULE return_to_operator           (THREAD *thread);
MODULE signal_unexpected_end_of_file (THREAD *thread);
MODULE signal_invalid_token         (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [55][97] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,9,0,0,0,0,0,33,0,0,0,0,0,0,0,1,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0
     ,0,0,1,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3
     ,0,1,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3
     ,0,1,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,15,0,0,0,0,0,0,0,0,7,3,18,10,0,0,0,0,6,0,11,0,3,0,0,0,0,4,0
     ,0,3,3,0,0,0,3,0,0,0
    },
    { 3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     ,3,3,3,3,3,3,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     ,3,3,3,3,3,3,3,3,7,3,3,3,3,3,3,3,5,3,3,3,3,3,3,3,3,3,3,3,4,3
     ,3,3,3,3,3,3,3
    },
    { 6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
     ,6,6,6,6,6,6,6,5,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
     ,6,6,6,6,6,6,6,6,53,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5
     ,6,6,6,6,6,6,6,6
    },
    { 53,53,6,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,6,53,6
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,18,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,6,3,53,53,53,53,53,53,53
    },
    { 53,53,7,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,7,53,7
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,15
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,8,53,53,53
     ,7,53,53,53,53,53,53,53,7,53,53,53,53,53,53,53,53
    },
    { 53,53,8,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,8,53,8
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,18,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,8,3,53,53,53,53,53,53,53
    },
    { 53,53,9,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,9,53,9
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,15
     ,53,53,53,53,53,53,53,53,7,9,18,10,53,53,53,53,6,53,11,53,9
     ,53,53,53,53,4,53,53,9,9,53,53,53,9,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,10,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,11,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0
     ,0,3,0,11,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,53,0,0,10,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0
     ,0,12,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,53,0,0,10,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0
     ,0,13,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,3,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,18,10,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0
     ,0,15,3,0,0,0,0,0,0,0
    },
    { 53,53,16,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,16,53,16
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,18,10,53,53,53,53,53,53,53,53
     ,16,53,53,53,53,53,53,53,16,3,53,53,53,53,53,53,53
    },
    { 53,53,17,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,17,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,3,53,53,53,53,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,3,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,3,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,15,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0
     ,0,20,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,15,0,0,0,0,0,0,0,0,23,0,18,10,0,0,0,0,53,0,0,0,21,0,0,0,0
     ,13,0,0,21,3,0,0,0,0,0,0,0
    },
    { 53,53,22,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,22,53,22
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,17,53,53,53,53,53,15
     ,53,53,53,53,53,53,53,53,23,53,18,10,53,53,53,53,53,53,53,53
     ,22,53,53,53,53,13,53,53,22,3,53,53,53,53,53,53,53
    },
    { 53,53,23,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,23,53,23
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,15
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,53,53,53,53
     ,23,53,53,53,53,53,53,53,23,53,53,53,53,53,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,15,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0
     ,0,24,0,0,0,0,0,0,0,0
    },
    { 53,53,25,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,25,53,25
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,15
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,16,53,53,53
     ,25,53,53,53,53,53,53,53,25,53,53,53,53,53,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,15,0,0,0,0,0,0,0,0,25,0,18,10,0,0,0,0,16,0,0,0,26,0,0,0,0
     ,13,0,0,26,3,0,0,0,0,0,0,0
    },
    { 53,53,27,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,27,53,27
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,16,53,53,53
     ,27,53,53,53,53,53,53,53,27,53,53,53,53,53,53,53,53
    },
    { 53,53,28,53,53,53,53,53,53,53,53,28,53,53,53,53,53,53,53,9
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,28,53,28
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,3,53,53,53,53,53,53
     ,28,53,53,53,53,3,53,53,28,53,53,53,53,3,53,53,53
    },
    { 53,53,29,53,53,53,53,53,53,53,53,29,53,53,53,53,53,53,53,9
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,29,53,29
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,9,53,10,53,3,53,53,53,53,53,53
     ,29,53,53,53,53,3,53,53,29,53,53,53,53,3,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,9,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0
     ,30,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 31,31,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
     ,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,31,32
     ,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
     ,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
     ,31,31,31,31,31,31,31,31,31,3,31,32,31,31,31,31,31
    },
    { 9,0,0,3,0,0,0,0,0,0,0,52,0,0,33,0,0,0,22,0,26,22,45,3,52,3,0
     ,16,52,52,52,16,0,33,16,52,52,0,0,0,26,0,0,35,44,0,3,0,3,0
     ,15,16,0,17,3,0,35,0,9,15,0,22,26,16,0,0,0,0,25,0,18,10,0,0
     ,0,3,16,0,0,0,33,21,21,0,0,13,0,26,0,3,34,0,0,0,0,3,43
    },
    { 53,53,34,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,34,53,34
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,53,53,53,53
     ,34,53,53,53,53,53,53,53,34,53,53,53,53,53,53,53,53
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0
     ,35,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,9,0,10,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0
     ,36,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0
     ,37,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,38,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,39,0,10,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0
     ,0,38,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0
     ,39,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,41,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0
     ,0,40,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0
     ,41,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,42,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,9,0,10,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0
     ,42,0,0,0,0,0,0,0,0
    },
    { 53,21,43,53,53,15,53,21,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,43,53,43
     ,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53
     ,53,53,53,53,53,53,53,53,53,53,53,10,53,53,53,53,53,53,53,53
     ,43,53,53,53,53,53,53,53,43,53,53,53,21,53,53,53,53
    },
    { 3,3,44,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     ,3,3,3,3,3,3,3,44,3,44,3,3,3,3,3,3,3,3,3,47,3,3,3,3,3,3,3,3
     ,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,44,3,3,3,3,3,3
     ,3,44,3,3,3,3,3,3,3,3
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,45,0,0,3,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,46,0,45,0,0,0,0,0,0
     ,0,45,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0
     ,0,0,0,46,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0
     ,47,0,0,53,0,0,0,0,0
    },
    { 0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0
     ,48,0,0,0,0,0,0,0,0
    },
    { 0,15,0,0,0,15,0,15,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,49,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,49,49,0,0,0,10,0,0,0,0,0,0,0,0,49,0,0,0,0
     ,0,0,0,49,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,15,0,0,0,3,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,50,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,50,50,0,0,0,10,0,0,0,0,0,0,0,0,50,0,0,0,0,0
     ,0,0,50,0,0,0,0,0,3,0,0
    },
    { 0,0,0,0,0,15,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,51,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,51,51,0,0,0,10,0,0,0,0,0,0,0,0,51,0,0,0,0,0
     ,0,0,51,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,52,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0
     ,52,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,30,0,0,0,18,0,28,0,0,0,0,27,23,25,0,0,37,0,0,0,0,0
     ,52,0,0,0,0,0,0,0,0,0,0,0,53,0,50,0,0,0,0,17,0,36,0,0,42,0,0
     ,0,43,43,38,40,0,0,32,0,49,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0
     ,11,0,48,51,0,0,0,29,0,0,31,0,1,0,0,0,0,44
    },
    { 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
     ,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
     ,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
     ,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
     ,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
    }
};

static word _LR_action [55][97] =
{
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,7,0,0,0,0,0,3,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0
     ,1,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,11,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,9,0,8,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9
     ,0,8,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0
     ,19,0,0,0,0,0,0,0,0,15,21,18,24,0,0,0,0,16,0,12,0,22,0,0,0,0
     ,13,0,0,22,20,0,0,0,14,0,0,0
    },
    { 28,28,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,27,28,23
     ,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
     ,28,28,28,28,28,28,28,28,25,28,28,28,28,28,28,28,16,28,28,28
     ,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28
    },
    { 30,30,26,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,27,30,23
     ,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,29,30,30,30,30,30,30,30,30,30,30,30
     ,30,30,30,30,30,30,30,30,22,30,30,30,30,30,30,30,30
    },
    { 35,35,26,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
     ,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,27,35,23
     ,35,35,35,35,35,35,35,35,35,35,35,35,35,32,35,35,35,35,35,35
     ,35,35,35,35,35,35,35,35,31,35,34,35,35,35,35,35,35,35,35,35
     ,35,35,35,35,35,35,35,35,22,33,35,35,35,35,35,35,35
    },
    { 38,38,26,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,27,38,23
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37
     ,38,38,38,38,38,38,38,38,38,38,38,24,38,38,38,38,36,38,38,38
     ,22,38,38,38,38,38,38,38,22,38,38,38,38,38,38,38,38
    },
    { 38,38,26,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,27,38,23
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,40,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,39,38,42,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,22,41,38,38,38,38,38,38,38
    },
    { 43,43,26,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,27,43,23
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,17,43,43,43,43,43,19
     ,43,43,43,43,43,43,43,43,15,21,18,24,43,43,43,43,16,43,12,43
     ,22,43,43,43,43,13,43,43,22,20,43,43,43,14,43,43,43
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,46,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,51,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0
     ,0,48,0,47,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,52,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,53,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,55,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,56,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,55,0,0,0,0,0,0,0
    },
    { 38,38,26,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,27,38,23
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,54,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,56,24,38,38,38,38,38,38,38,38
     ,22,38,38,38,38,38,38,38,22,55,38,38,38,38,38,38,38
    },
    { 38,38,26,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,27,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,54,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,54,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,55,38,38,38,38,38,38,38
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,58,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,58,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,60,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0
     ,60,0,0,0,0,0,0,0,0,54,0,62,24,0,0,0,0,61,0,0,0,22,0,0,0,0
     ,64,0,0,22,65,0,0,0,0,0,0,0
    },
    { 66,66,26,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,27,66,23
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,63,66,66,66,66,66,60
     ,66,66,66,66,66,66,66,66,54,66,62,24,66,66,66,66,61,66,66,66
     ,22,66,66,66,66,64,66,66,22,65,66,66,66,66,66,66,66
    },
    { 66,66,26,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,27,66,23
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,60
     ,66,66,66,66,66,66,66,66,66,66,66,24,66,66,66,66,66,66,66,66
     ,22,66,66,66,66,66,66,66,22,66,66,66,66,66,66,66,66
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,67,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 69,69,26,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69
     ,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,27,69,23
     ,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,67
     ,69,69,69,69,69,69,69,69,69,69,69,24,69,69,69,69,68,69,69,69
     ,22,69,69,69,69,69,69,69,22,69,69,69,69,69,69,69,69
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0
     ,67,0,0,0,0,0,0,0,0,54,0,71,24,0,0,0,0,70,0,0,0,22,0,0,0,0
     ,74,0,0,22,73,0,0,0,0,0,0,0
    },
    { 66,66,26,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,27,66,23
     ,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
     ,66,66,66,66,66,66,66,66,66,66,66,24,66,66,66,66,68,66,66,66
     ,22,66,66,66,66,66,66,66,22,66,66,66,66,66,66,66,66
    },
    { 43,43,26,43,43,43,43,43,43,43,43,76,43,43,43,43,43,43,43,75
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,27,43,23
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43
     ,43,43,43,43,43,43,43,43,43,43,43,24,43,75,43,43,43,43,43,43
     ,22,43,43,43,43,75,43,43,22,43,43,43,43,75,43,43,43
    },
    { 43,43,26,43,43,43,43,43,43,43,43,76,43,43,43,43,43,43,43,75
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,27,43,23
     ,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43
     ,43,43,43,43,43,43,43,43,43,77,43,24,43,75,43,43,43,43,43,43
     ,22,43,43,43,43,75,43,43,22,43,43,43,43,75,43,43,43
    },
    { 0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,78,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,83,0,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0
    },
    { 86,86,26,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86
     ,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,27,86,83
     ,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86
     ,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86
     ,86,86,86,86,86,86,86,86,86,85,86,84,86,86,86,86,86
    },
    { 99,0,0,97,0,0,0,0,0,0,0,87,0,0,6,0,0,0,123,0,100,125,114,98
     ,88,120,0,90,93,89,92,94,0,6,91,117,95,0,0,0,126,0,0,109,113
     ,0,119,0,112,0,111,130,0,101,124,0,108,0,110,105,0,122,121
     ,129,0,0,0,0,106,0,102,24,0,0,0,96,104,0,0,0,132,118,127,0,0
     ,107,0,131,0,103,116,0,0,0,0,128,115
    },
    { 38,38,26,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,27,38,23
     ,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
     ,38,38,38,38,38,38,38,38,133,38,38,24,38,38,38,38,38,38,38
     ,38,22,38,38,38,38,38,38,38,22,38,38,38,38,38,38,38,38
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,135,0,24,0,0,0,0,0,0,0,0,136,0,0,0,0
     ,0,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,136,0,0,0,0,0
     ,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,139,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,138,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0
     ,0,0,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,141,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0
     ,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0
     ,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,139,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,142,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0
     ,0,0,0,22,0,0,0,0,0,0,0,0
    },
    { 147,145,26,147,147,146,147,144,147,147,147,147,147,147,147
     ,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147
     ,147,147,147,147,147,147,147,27,147,137,147,147,147,147,147
     ,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147
     ,147,147,147,147,147,147,147,147,147,147,147,24,147,147,147
     ,147,147,147,147,147,136,147,147,147,147,147,147,147,136,147
     ,147,147,143,147,147,147,147
    },
    { 150,150,26,150,150,150,150,150,150,150,150,150,150,150,150
     ,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150
     ,150,150,150,150,150,150,150,27,150,137,150,150,148,150,150
     ,150,150,150,150,149,150,150,150,150,150,150,150,150,150,150
     ,150,150,150,150,150,150,150,150,150,150,150,24,150,150,150
     ,150,150,150,150,150,136,150,150,150,150,150,150,150,136,150
     ,150,150,150,150,150,150,150
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,137,0,0,148,0,0,0,0,0,0,149,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,151,0,136,0,0,0
     ,0,0,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0
     ,0,0,0,152,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0
     ,22,0,0,133,0,0,0,0,0
    },
    { 0,0,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,136,0,0,0,0,0
     ,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,158,0,0,0,155,0,157,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,139,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,156,159,0,0,0,24,0,0,0,0,0,0,0,0
     ,136,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,160,0,0,0,162,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,139,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,156,159,0,0,0,24,0,0,0,0,0,0,0,0,136
     ,0,0,0,0,0,0,0,136,0,0,0,0,0,161,0,0
    },
    { 0,0,0,0,0,163,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,139,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,156,159,0,0,0,24,0,0,0,0,0,0,0,0,136,0
     ,0,0,0,0,0,0,136,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,164,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,22,0,0,0,0,0
     ,0,0,22,0,0,0,0,0,0,0,0
    },
    { 0,0,0,0,22,0,0,0,169,0,172,0,0,0,0,22,22,22,0,0,171,0,0,0,0
     ,0,175,0,0,0,0,0,0,0,0,0,0,0,165,0,171,0,0,0,0,22,0,171,0,0
     ,172,0,0,0,174,171,172,22,0,0,173,0,171,0,0,0,0,0,0,0,0,0
     ,168,0,0,0,0,0,0,170,0,171,171,0,0,0,168,0,0,167,0,166,0,0,0
     ,0,136
    },
    { 177,177,26,177,177,177,177,177,177,177,177,177,177,177,177
     ,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177
     ,177,177,176,177,177,177,177,27,177,177,177,177,177,177,177
     ,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177
     ,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177
     ,177,177,177,177,177,177,177,177,177,178,177,177,177,177,177
     ,177,177,177,177,177,177,177
    }
};

#if (defined (SMT_PROFILE))
static word _LR_count [134];
static long _LR_time  [134];
static word _LR_flow  [55][97];
#endif

static word _LR_offset [] =
{
    0,
    0,
    6,
    12,
    15,
    18,
    22,
    27,
    31,
    35,
    42,
    49,
    55,
    62,
    66,
    71,
    78,
    82,
    90,
    97,
    107,
    118,
    122,
    124,
    128,
    131,
    139,
    144,
    148,
    154,
    162,
    168,
    175,
    184,
    196,
    204,
    211,
    215,
    225,
    229,
    235,
    241,
    250,
    255,
    259,
    261,
    264,
    266,
    270,
    277,
    283,
    287,
    292,
    299,
    305,
    309,
    316,
    319,
    323,
    330,
    334,
    341,
    345,
    349,
    354,
    359,
    367,
    371,
    378,
    385,
    391,
    397,
    401,
    406,
    414,
    419,
    424,
    428,
    435,
    442,
    446,
    450,
    454,
    457,
    461,
    465,
    473,
    479,
    482,
    485,
    488,
    492,
    496,
    499,
    502,
    506,
    509,
    513,
    517,
    521,
    525,
    530,
    538,
    545,
    556,
    565,
    575,
    582,
    590,
    596,
    602,
    606,
    611,
    615,
    618,
    621,
    625,
    629,
    632,
    637,
    641,
    645,
    651,
    656,
    661,
    666,
    670,
    675,
    680,
    684,
    688,
    692,
    697,
    699,
    704,
    709,
    715,
    717,
    721,
    725,
    730,
    734,
    739,
    744,
    748,
    752,
    756,
    760,
    763,
    766,
    769,
    773,
    777,
    781,
    786,
    789,
    793,
    798,
    802,
    806,
    809,
    813,
    817,
    821,
    825,
    829,
    836,
    838,
    841,
    844,
    846,
    848,
    851,
    854,
    856,
    860,
    863,
    868,
    873
};

static word _LR_vector [] =
{
    0,1,2,3,4,_LR_STOP,
    0,1,5,6,7,_LR_STOP,
    8,9,_LR_STOP,
    5,7,_LR_STOP,
    2,3,4,_LR_STOP,
    10,11,12,13,_LR_STOP,
    14,15,13,_LR_STOP,
    16,17,4,_LR_STOP,
    18,19,20,17,3,9,_LR_STOP,
    21,22,23,11,12,13,_LR_STOP,
    21,23,11,12,13,_LR_STOP,
    24,25,26,27,3,28,_LR_STOP,
    29,17,9,_LR_STOP,
    30,17,31,9,_LR_STOP,
    25,32,3,16,17,9,_LR_STOP,
    25,17,9,_LR_STOP,
    33,34,35,36,16,17,9,_LR_STOP,
    33,34,35,17,36,37,_LR_STOP,
    25,38,39,35,36,40,27,31,9,_LR_STOP,
    33,34,41,3,42,19,20,17,3,9,_LR_STOP,
    43,17,9,_LR_STOP,
    9,_LR_STOP,
    22,0,9,_LR_STOP,
    44,45,_LR_STOP,
    25,32,46,3,16,17,9,_LR_STOP,
    49,14,50,13,_LR_STOP,
    14,50,13,_LR_STOP,
    47,30,31,48,9,_LR_STOP,
    32,46,31,16,17,51,52,_LR_STOP,
    30,31,25,48,9,_LR_STOP,
    32,31,16,17,51,52,_LR_STOP,
    35,36,53,54,55,16,17,9,_LR_STOP,
    42,19,35,36,53,54,55,20,17,3,9,_LR_STOP,
    35,36,53,54,55,17,37,_LR_STOP,
    35,36,53,54,48,52,_LR_STOP,
    54,27,9,_LR_STOP,
    38,39,54,27,56,36,40,31,9,_LR_STOP,
    51,48,52,_LR_STOP,
    31,16,17,51,52,_LR_STOP,
    56,55,16,17,9,_LR_STOP,
    42,19,56,55,20,17,3,9,_LR_STOP,
    56,55,17,37,_LR_STOP,
    57,48,52,_LR_STOP,
    58,_LR_STOP,
    0,44,_LR_STOP,
    44,_LR_STOP,
    16,17,28,_LR_STOP,
    59,19,20,17,3,9,_LR_STOP,
    21,51,54,27,52,_LR_STOP,
    22,0,28,_LR_STOP,
    21,60,0,28,_LR_STOP,
    32,3,16,17,51,52,_LR_STOP,
    16,46,17,51,52,_LR_STOP,
    16,17,9,_LR_STOP,
    42,19,20,17,3,9,_LR_STOP,
    27,37,_LR_STOP,
    16,17,37,_LR_STOP,
    61,19,20,17,3,9,_LR_STOP,
    17,51,52,_LR_STOP,
    62,39,40,27,31,9,_LR_STOP,
    53,62,52,_LR_STOP,
    39,17,37,_LR_STOP,
    39,16,17,9,_LR_STOP,
    39,29,17,9,_LR_STOP,
    39,42,19,20,17,3,9,_LR_STOP,
    62,48,52,_LR_STOP,
    38,39,40,27,31,9,_LR_STOP,
    62,54,63,27,55,9,_LR_STOP,
    62,54,64,48,52,_LR_STOP,
    53,54,17,55,9,_LR_STOP,
    34,17,37,_LR_STOP,
    34,16,17,9,_LR_STOP,
    34,42,19,20,17,3,9,_LR_STOP,
    34,29,17,9,_LR_STOP,
    65,27,31,9,_LR_STOP,
    66,27,9,_LR_STOP,
    67,68,69,3,17,9,_LR_STOP,
    70,65,27,31,69,9,_LR_STOP,
    27,70,52,_LR_STOP,
    27,31,71,_LR_STOP,
    27,72,71,_LR_STOP,
    27,52,_LR_STOP,
    22,0,71,_LR_STOP,
    16,17,71,_LR_STOP,
    73,74,19,20,17,3,9,_LR_STOP,
    75,51,54,48,71,_LR_STOP,
    76,9,_LR_STOP,
    77,9,_LR_STOP,
    78,9,_LR_STOP,
    79,36,9,_LR_STOP,
    80,36,9,_LR_STOP,
    81,9,_LR_STOP,
    82,9,_LR_STOP,
    83,36,9,_LR_STOP,
    84,9,_LR_STOP,
    85,3,9,_LR_STOP,
    86,3,9,_LR_STOP,
    87,3,9,_LR_STOP,
    88,3,9,_LR_STOP,
    89,90,36,9,_LR_STOP,
    91,34,90,36,16,17,9,_LR_STOP,
    91,34,90,17,36,37,_LR_STOP,
    91,34,90,36,42,19,20,17,3,9,_LR_STOP,
    89,90,17,36,53,54,55,9,_LR_STOP,
    89,38,39,90,36,40,27,31,9,_LR_STOP,
    89,90,36,16,17,9,_LR_STOP,
    89,34,90,36,29,17,9,_LR_STOP,
    92,34,93,36,9,_LR_STOP,
    92,34,94,36,9,_LR_STOP,
    95,3,9,_LR_STOP,
    96,97,55,9,_LR_STOP,
    98,36,9,_LR_STOP,
    98,99,_LR_STOP,
    100,99,_LR_STOP,
    101,102,99,_LR_STOP,
    103,3,9,_LR_STOP,
    104,9,_LR_STOP,
    105,106,36,9,_LR_STOP,
    107,3,9,_LR_STOP,
    108,3,9,_LR_STOP,
    109,110,111,36,9,_LR_STOP,
    110,112,36,9,_LR_STOP,
    110,113,36,9,_LR_STOP,
    114,102,36,9,_LR_STOP,
    115,36,9,_LR_STOP,
    116,117,36,9,_LR_STOP,
    118,119,36,9,_LR_STOP,
    120,3,9,_LR_STOP,
    121,36,9,_LR_STOP,
    122,36,9,_LR_STOP,
    116,123,36,9,_LR_STOP,
    7,_LR_STOP,
    16,17,51,52,_LR_STOP,
    46,27,31,9,_LR_STOP,
    67,69,3,17,9,_LR_STOP,
    99,_LR_STOP,
    22,0,99,_LR_STOP,
    27,31,9,_LR_STOP,
    23,11,12,13,_LR_STOP,
    27,23,9,_LR_STOP,
    65,17,31,9,_LR_STOP,
    69,3,27,9,_LR_STOP,
    110,124,9,_LR_STOP,
    110,125,9,_LR_STOP,
    110,126,9,_LR_STOP,
    110,72,9,_LR_STOP,
    48,52,_LR_STOP,
    36,9,_LR_STOP,
    55,4,_LR_STOP,
    48,3,9,_LR_STOP,
    24,3,127,_LR_STOP,
    16,17,127,_LR_STOP,
    21,60,0,127,_LR_STOP,
    72,9,_LR_STOP,
    109,72,9,_LR_STOP,
    72,53,54,99,_LR_STOP,
    109,125,9,_LR_STOP,
    109,126,9,_LR_STOP,
    128,99,_LR_STOP,
    116,72,9,_LR_STOP,
    116,3,9,_LR_STOP,
    116,31,9,_LR_STOP,
    118,72,9,_LR_STOP,
    11,12,13,_LR_STOP,
    129,23,130,11,12,13,_LR_STOP,
    4,_LR_STOP,
    54,71,_LR_STOP,
    131,9,_LR_STOP,
    37,_LR_STOP,
    28,_LR_STOP,
    54,99,_LR_STOP,
    54,9,_LR_STOP,
    71,_LR_STOP,
    54,54,99,_LR_STOP,
    23,9,_LR_STOP,
    132,14,50,13,_LR_STOP,
    133,14,50,13,_LR_STOP,
    14,13,_LR_STOP
};

static HOOK *_LR_module [134] = {
    read_script_line,
    generate_script_exception,
    insert_line_node,
    ready_for_op1_field,
    get_template_token,
    generate_comment_exception,
    generate_line_exception,
    get_script_command_token,
    push_expression_state,
    get_expression_token,
    insert_comment_node,
    commit_memory_allocations,
    return_ok_feedback,
    terminate_the_thread,
    rollback_memory_allocations,
    return_eof_feedback,
    insert_text_node,
    count_token_width,
    push_text_state,
    push_substitute_state,
    insert_substitute_node,
    insert_spaces_only_node,
    set_extend_flag,
    return_to_root_node,
    push_quote_character,
    push_operand_state,
    insert_literal_node,
    count_spaces_and_token_width,
    get_quoted_token,
    save_the_sign,
    insert_unary_operator_node,
    ready_for_op2_field,
    insert_number_node,
    push_simple_operand_state,
    push_continue_scope_or_attribute_state,
    insert_symbol_node,
    ready_for_scope_field,
    get_bracketed_identifier_token,
    push_continue_attribute_state,
    push_continue_scope_state,
    insert_member_node,
    insert_unknown_operand_node,
    push_identifier_state,
    add_one_bracket,
    get_comment_token,
    dialog_call,
    copy_the_operator,
    restore_the_sign,
    rewind_to_same_token,
    signal_internal_error,
    return_error_feedback,
    return_to_operand,
    pop_previous_state,
    insert_empty_text_node,
    return_one_more,
    ready_for_name_field,
    change_number_to_symbol_node,
    return_to_expression,
    dialog_return,
    push_quoted_state,
    make_line_break,
    push_bracketed_identifier_state,
    return_to_scope,
    change_operand_to_symbol_node,
    move_scope_to_name,
    insert_operator_node,
    close_one_bracket,
    change_to_call_node,
    push_call_state,
    push_arguments_state,
    return_to_arguments,
    get_modifier_token,
    ready_for_as_field,
    confirm_modifier_specified,
    push_modifier_state,
    insert_empty_node_if_needed,
    insert_close_node,
    insert_else_node,
    insert_end_if_node,
    insert_end_for_node,
    insert_end_scope_node,
    insert_end_macro_node,
    insert_end_function_node,
    insert_end_new_node,
    insert_end_while_node,
    insert_output_node,
    insert_append_node,
    insert_echo_node,
    insert_abort_node,
    push_define_state,
    insert_define_node,
    push_implicit_assign_or_invoke_state,
    push_macro_state,
    insert_macro_node,
    insert_function_node,
    insert_return_node,
    push_invoke_state,
    insert_call_node,
    insert_gsl_node,
    get_script_token,
    insert_direct_node,
    push_xml_state,
    insert_xml_node,
    insert_template_node,
    insert_end_template_node,
    push_save_state,
    insert_save_node,
    insert_if_node,
    insert_elsif_node,
    push_new_state,
    push_locator_state,
    insert_new_node,
    insert_move_node,
    insert_copy_node,
    push_load_state,
    insert_delete_node,
    push_for_state,
    insert_for_node,
    push_scope_state,
    insert_scope_node,
    insert_while_node,
    insert_next_node,
    insert_last_node,
    insert_sort_node,
    ready_for_to_field,
    ready_for_before_field,
    ready_for_after_field,
    get_direct_quoted_token,
    unset_stacked_flag,
    expect_end_of_line,
    error_if_empty_expression,
    return_to_operator,
    signal_unexpected_end_of_file,
    signal_invalid_token
};

#if (defined (DEBUG))
static char *_LR_mname [134] =
{
     "Read-Script-Line",
     "Generate-Script-Exception",
     "Insert-Line-Node",
     "Ready-For-Op1-Field",
     "Get-Template-Token",
     "Generate-Comment-Exception",
     "Generate-Line-Exception",
     "Get-Script-Command-Token",
     "Push-Expression-State",
     "Get-Expression-Token",
     "Insert-Comment-Node",
     "Commit-Memory-Allocations",
     "Return-Ok-Feedback",
     "Terminate-The-Thread",
     "Rollback-Memory-Allocations",
     "Return-Eof-Feedback",
     "Insert-Text-Node",
     "Count-Token-Width",
     "Push-Text-State",
     "Push-Substitute-State",
     "Insert-Substitute-Node",
     "Insert-Spaces-Only-Node",
     "Set-Extend-Flag",
     "Return-To-Root-Node",
     "Push-Quote-Character",
     "Push-Operand-State",
     "Insert-Literal-Node",
     "Count-Spaces-And-Token-Width",
     "Get-Quoted-Token",
     "Save-The-Sign",
     "Insert-Unary-Operator-Node",
     "Ready-For-Op2-Field",
     "Insert-Number-Node",
     "Push-Simple-Operand-State",
     "Push-Continue-Scope-Or-Attribute-State",
     "Insert-Symbol-Node",
     "Ready-For-Scope-Field",
     "Get-Bracketed-Identifier-Token",
     "Push-Continue-Attribute-State",
     "Push-Continue-Scope-State",
     "Insert-Member-Node",
     "Insert-Unknown-Operand-Node",
     "Push-Identifier-State",
     "Add-One-Bracket",
     "Get-Comment-Token",
     "Dialog-Call",
     "Copy-The-Operator",
     "Restore-The-Sign",
     "Rewind-To-Same-Token",
     "Signal-Internal-Error",
     "Return-Error-Feedback",
     "Return-To-Operand",
     "Pop-Previous-State",
     "Insert-Empty-Text-Node",
     "Return-One-More",
     "Ready-For-Name-Field",
     "Change-Number-To-Symbol-Node",
     "Return-To-Expression",
     "Dialog-Return",
     "Push-Quoted-State",
     "Make-Line-Break",
     "Push-Bracketed-Identifier-State",
     "Return-To-Scope",
     "Change-Operand-To-Symbol-Node",
     "Move-Scope-To-Name",
     "Insert-Operator-Node",
     "Close-One-Bracket",
     "Change-To-Call-Node",
     "Push-Call-State",
     "Push-Arguments-State",
     "Return-To-Arguments",
     "Get-Modifier-Token",
     "Ready-For-As-Field",
     "Confirm-Modifier-Specified",
     "Push-Modifier-State",
     "Insert-Empty-Node-If-Needed",
     "Insert-Close-Node",
     "Insert-Else-Node",
     "Insert-End-If-Node",
     "Insert-End-For-Node",
     "Insert-End-Scope-Node",
     "Insert-End-Macro-Node",
     "Insert-End-Function-Node",
     "Insert-End-New-Node",
     "Insert-End-While-Node",
     "Insert-Output-Node",
     "Insert-Append-Node",
     "Insert-Echo-Node",
     "Insert-Abort-Node",
     "Push-Define-State",
     "Insert-Define-Node",
     "Push-Implicit-Assign-Or-Invoke-State",
     "Push-Macro-State",
     "Insert-Macro-Node",
     "Insert-Function-Node",
     "Insert-Return-Node",
     "Push-Invoke-State",
     "Insert-Call-Node",
     "Insert-Gsl-Node",
     "Get-Script-Token",
     "Insert-Direct-Node",
     "Push-Xml-State",
     "Insert-Xml-Node",
     "Insert-Template-Node",
     "Insert-End-Template-Node",
     "Push-Save-State",
     "Insert-Save-Node",
     "Insert-If-Node",
     "Insert-Elsif-Node",
     "Push-New-State",
     "Push-Locator-State",
     "Insert-New-Node",
     "Insert-Move-Node",
     "Insert-Copy-Node",
     "Push-Load-State",
     "Insert-Delete-Node",
     "Push-For-State",
     "Insert-For-Node",
     "Push-Scope-State",
     "Insert-Scope-Node",
     "Insert-While-Node",
     "Insert-Next-Node",
     "Insert-Last-Node",
     "Insert-Sort-Node",
     "Ready-For-To-Field",
     "Ready-For-Before-Field",
     "Ready-For-After-Field",
     "Get-Direct-Quoted-Token",
     "Unset-Stacked-Flag",
     "Expect-End-Of-Line",
     "Error-If-Empty-Expression",
     "Return-To-Operator",
     "Signal-Unexpected-End-Of-File",
     "Signal-Invalid-Token"
};

static char *_LR_sname [55] =
{
     "After-Init",
     "Allow-Text",
     "Expect-Text",
     "Expect-Operand",
     "After-Sign",
     "After-Sign-Point",
     "After-Point",
     "After-Number",
     "After-Number-Point",
     "Allow-Operand",
     "Continue-Comment",
     "Continue-Quoted",
     "Expect-Number",
     "Expect-Signed-Number",
     "Identifier-Superstate",
     "Expect-Identifier",
     "Allow-Identifier",
     "Continue-Identifier",
     "Expect-Bracketed-Identifier",
     "Continue-Bracketed-Identifier",
     "Scope-Superstate",
     "Expect-Scope",
     "Allow-Scope",
     "Continue-Scope",
     "Scope-Attribute-Superstate",
     "Continue-Scope-Or-Attribute",
     "Expect-Scope-Attribute",
     "Continue-Attribute",
     "Expect-Operator",
     "After-Simple-Operand",
     "Expect-Arguments",
     "Expect-Substitute",
     "Expect-Modifier",
     "Expect-Script",
     "Allow-Number-As-Text",
     "Expect-Literal",
     "Expect-Assign-Or-Args",
     "Expect-Assign",
     "After-Macro",
     "Allow-Macro-Args",
     "Expect-Macro-Args",
     "Expect-Argument",
     "Expect-Invoke-Args",
     "Expect-Locator",
     "Expect-Source",
     "Expect-Direct",
     "Continue-Direct",
     "Expect-Terminator",
     "Expect-Save",
     "Expect-New",
     "Expect-For",
     "Expect-Scope-Modifier",
     "Expect-End-Of-Line",
     "Returning",
     "Defaults"
};

static char *_LR_ename [97] =
{
     "Abort-Event",
     "After-Event",
     "Anomaly-Event",
     "Append-Event",
     "Arguments-Event",
     "As-Event",
     "Assign-Event",
     "Before-Event",
     "Bracketed-Identifier-Event",
     "By-Event",
     "Call-Event",
     "Close-Event",
     "Close-Bracket-Event",
     "Close-Comment-Event",
     "Comment-Event",
     "Continue-Attribute-Event",
     "Continue-Scope-Event",
     "Continue-Scope-Or-Attribute-Event",
     "Copy-Event",
     "Default-Operator-Event",
     "Define-Event",
     "Delete-Event",
     "Direct-Event",
     "Echo-Event",
     "Else-Event",
     "Elsif-Event",
     "Empty-Stack-Event",
     "End-For-Event",
     "End-Function-Event",
     "End-If-Event",
     "End-Macro-Event",
     "End-New-Event",
     "End-Of-File-Event",
     "End-Of-Line-Event",
     "End-Scope-Event",
     "End-Template-Event",
     "End-While-Event",
     "Error-Event",
     "Expression-Event",
     "Extend-Event",
     "For-Event",
     "Format-Event",
     "From-Event",
     "Function-Event",
     "Gsl-Event",
     "Identifier-Event",
     "If-Event",
     "Implicit-Assign-Or-Invoke-Event",
     "Include-Event",
     "Incoming-Event",
     "Invoke-Event",
     "Last-Event",
     "Line-Event",
     "Literal-Event",
     "Load-Event",
     "Locator-Event",
     "Macro-Event",
     "Macro-Args-Event",
     "Macro-Return-Event",
     "Member-Event",
     "Modifier-Event",
     "Move-Event",
     "New-Event",
     "Next-Event",
     "Next-Arg-Event",
     "No-Bracket-Event",
     "Noalias-Event",
     "Nostack-Event",
     "Number-Event",
     "Open-Event",
     "Open-Bracket-Event",
     "Open-Comment-Event",
     "Operand-Event",
     "Operator-Event",
     "Other-Event",
     "Output-Event",
     "Point-Event",
     "Pretty-Event",
     "Quote-Event",
     "Quoted-Event",
     "Return-Event",
     "Save-Event",
     "Scope-Event",
     "Script-Event",
     "Shutdown-Event",
     "Sign-Event",
     "Simple-Operand-Event",
     "Sort-Event",
     "Spaces-Event",
     "Substitute-Event",
     "Template-Event",
     "Text-Event",
     "To-Event",
     "Unary-Operator-Event",
     "Where-Event",
     "While-Event",
     "Xml-Event"
};
#else
static char *_LR_mname [134] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94",
     "95",
     "96",
     "97",
     "98",
     "99",
     "100",
     "101",
     "102",
     "103",
     "104",
     "105",
     "106",
     "107",
     "108",
     "109",
     "110",
     "111",
     "112",
     "113",
     "114",
     "115",
     "116",
     "117",
     "118",
     "119",
     "120",
     "121",
     "122",
     "123",
     "124",
     "125",
     "126",
     "127",
     "128",
     "129",
     "130",
     "131",
     "132",
     "133"
};

static char *_LR_sname [55] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54"
};

static char *_LR_ename [97] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42",
     "43",
     "44",
     "45",
     "46",
     "47",
     "48",
     "49",
     "50",
     "51",
     "52",
     "53",
     "54",
     "55",
     "56",
     "57",
     "58",
     "59",
     "60",
     "61",
     "62",
     "63",
     "64",
     "65",
     "66",
     "67",
     "68",
     "69",
     "70",
     "71",
     "72",
     "73",
     "74",
     "75",
     "76",
     "77",
     "78",
     "79",
     "80",
     "81",
     "82",
     "83",
     "84",
     "85",
     "86",
     "87",
     "88",
     "89",
     "90",
     "91",
     "92",
     "93",
     "94",
     "95",
     "96"
};
#endif

MODULE dialog_call (THREAD *thread)
{
    LR_LOCATION
        *location;

        
    if (LR_location_cache)
      {
        location = LR_location_cache;
        LR_location_cache = location-> next;
        location-> next = NULL;
      }
    else
        location = memt_alloc (NULL, sizeof (LR_LOCATION));
        
    location-> state  = thread-> LR_savest;
    location-> event  = return_event;
    location-> number = 0;
    location-> next   = thread-> LR_location_stack;
    thread-> LR_location_stack = location;
}

MODULE dialog_return (THREAD *thread)
{
    _dialog_return (thread);
}


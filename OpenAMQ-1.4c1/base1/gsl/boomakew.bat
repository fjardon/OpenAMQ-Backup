@echo off
:-
:-  Boom builder for GSL 3.1c2
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=3.1c2
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [gsl]: The IBASE variable is not set.             Please set it to the location where GSL should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist gsl\version.h echo gsl\version.h>>_package.lst
    if exist gsl\gsl3.c echo gsl\gsl3.c>>_package.lst
    if exist gsl\gsldb.c echo gsl\gsldb.c>>_package.lst
    if exist gsl\ggcode.xml echo gsl\ggcode.xml>>_package.lst
    if exist gsl\ggpars.xml echo gsl\ggpars.xml>>_package.lst
    if exist gsl\ggscrp.xml echo gsl\ggscrp.xml>>_package.lst
    if exist gsl\gghead.h echo gsl\gghead.h>>_package.lst
    if exist gsl\ggpriv.h echo gsl\ggpriv.h>>_package.lst
    if exist gsl\ggfunc.inc echo gsl\ggfunc.inc>>_package.lst
    if exist gsl\ggobjt.c echo gsl\ggobjt.c>>_package.lst
    if exist gsl\ggcomm.c echo gsl\ggcomm.c>>_package.lst
    if exist gsl\ggthrd.c echo gsl\ggthrd.c>>_package.lst
    if exist gsl\ggmail.c echo gsl\ggmail.c>>_package.lst
    if exist gsl\ggsock.c echo gsl\ggsock.c>>_package.lst
    if exist gsl\ggobjt.gsl echo gsl\ggobjt.gsl>>_package.lst
    if exist gsl\ggmacro.gsl echo gsl\ggmacro.gsl>>_package.lst
    if exist gsl\ggreport.gsl echo gsl\ggreport.gsl>>_package.lst
    if exist gsl\console.gsl echo gsl\console.gsl>>_package.lst
    if exist gsl\gsldoc.txt echo gsl\gsldoc.txt>>_package.lst
    if exist gsl\prelude.pdl echo gsl\prelude.pdl>>_package.lst
    if exist gsl\license.gpl echo gsl\license.gpl>>_package.lst
    if exist gsl\project.pdl echo gsl\project.pdl>>_package.lst
    if exist gsl\readme.txt echo gsl\readme.txt>>_package.lst
    if exist gsl\ggcode.l echo gsl\ggcode.l>>_package.lst
    if exist gsl\ggcode.i echo gsl\ggcode.i>>_package.lst
    if exist gsl\ggcode.d echo gsl\ggcode.d>>_package.lst
    if exist gsl\ggcode.c echo gsl\ggcode.c>>_package.lst
    if exist gsl\ggcode.h echo gsl\ggcode.h>>_package.lst
    if exist gsl\ggcodem.c echo gsl\ggcodem.c>>_package.lst
    if exist gsl\ggcodem.h echo gsl\ggcodem.h>>_package.lst
    if exist gsl\ggpars.l echo gsl\ggpars.l>>_package.lst
    if exist gsl\ggpars.i echo gsl\ggpars.i>>_package.lst
    if exist gsl\ggpars.d echo gsl\ggpars.d>>_package.lst
    if exist gsl\ggpars.c echo gsl\ggpars.c>>_package.lst
    if exist gsl\ggpars.h echo gsl\ggpars.h>>_package.lst
    if exist gsl\ggparsm.c echo gsl\ggparsm.c>>_package.lst
    if exist gsl\ggparsm.h echo gsl\ggparsm.h>>_package.lst
    if exist gsl\ggscrp.l echo gsl\ggscrp.l>>_package.lst
    if exist gsl\ggscrp.i echo gsl\ggscrp.i>>_package.lst
    if exist gsl\ggscrp.d echo gsl\ggscrp.d>>_package.lst
    if exist gsl\ggscrp.c echo gsl\ggscrp.c>>_package.lst
    if exist gsl\ggscrp.h echo gsl\ggscrp.h>>_package.lst
    if exist gsl\ggscrpm.c echo gsl\ggscrpm.c>>_package.lst
    if exist gsl\ggscrpm.h echo gsl\ggscrpm.h>>_package.lst
    if exist gsl\ggobjt.h echo gsl\ggobjt.h>>_package.lst
    if exist gsl\ggcomm.h echo gsl\ggcomm.h>>_package.lst
    if exist gsl\ggconv.c echo gsl\ggconv.c>>_package.lst
    if exist gsl\ggconv.h echo gsl\ggconv.h>>_package.lst
    if exist gsl\ggenvt.c echo gsl\ggenvt.c>>_package.lst
    if exist gsl\ggenvt.h echo gsl\ggenvt.h>>_package.lst
    if exist gsl\ggthrd.h echo gsl\ggthrd.h>>_package.lst
    if exist gsl\ggmath.c echo gsl\ggmath.c>>_package.lst
    if exist gsl\ggmath.h echo gsl\ggmath.h>>_package.lst
    if exist gsl\ggmail.l echo gsl\ggmail.l>>_package.lst
    if exist gsl\ggmail.i echo gsl\ggmail.i>>_package.lst
    if exist gsl\ggmail.d echo gsl\ggmail.d>>_package.lst
    if exist gsl\ggmail.h echo gsl\ggmail.h>>_package.lst
    if exist gsl\ggsock.l echo gsl\ggsock.l>>_package.lst
    if exist gsl\ggsock.i echo gsl\ggsock.i>>_package.lst
    if exist gsl\ggsock.d echo gsl\ggsock.d>>_package.lst
    if exist gsl\ggsock.h echo gsl\ggsock.h>>_package.lst
    if exist gsl\ggfile.c echo gsl\ggfile.c>>_package.lst
    if exist gsl\ggfile.h echo gsl\ggfile.h>>_package.lst
    if exist gsl\ggstrn.c echo gsl\ggstrn.c>>_package.lst
    if exist gsl\ggstrn.h echo gsl\ggstrn.h>>_package.lst
    if exist gsl\ggzip.c echo gsl\ggzip.c>>_package.lst
    if exist gsl\ggzip.h echo gsl\ggzip.h>>_package.lst
    if exist gsl\ggdate.c echo gsl\ggdate.c>>_package.lst
    if exist gsl\ggdate.h echo gsl\ggdate.h>>_package.lst
    if exist gsl\ggtime.c echo gsl\ggtime.c>>_package.lst
    if exist gsl\ggtime.h echo gsl\ggtime.h>>_package.lst
    if exist gsl\ggdir.c echo gsl\ggdir.c>>_package.lst
    if exist gsl\ggdir.h echo gsl\ggdir.h>>_package.lst
    if exist gsl\ggpcre.c echo gsl\ggpcre.c>>_package.lst
    if exist gsl\ggpcre.h echo gsl\ggpcre.h>>_package.lst
    if exist gsl\ggcons.c echo gsl\ggcons.c>>_package.lst
    if exist gsl\ggcons.h echo gsl\ggcons.h>>_package.lst
    if exist gsl\ggproc.c echo gsl\ggproc.c>>_package.lst
    if exist gsl\ggproc.h echo gsl\ggproc.h>>_package.lst
    if exist gsl\gsl3.h echo gsl\gsl3.h>>_package.lst
    if exist gsl\stamp_generate echo gsl\stamp_generate>>_package.lst
    if exist gsl\boomakew.bat echo gsl\boomakew.bat>>_package.lst
    if exist gsl\configure echo gsl\configure>>_package.lst
    if exist gsl\Makefile.unix echo gsl\Makefile.unix>>_package.lst
    if exist gsl\boomake echo gsl\boomake>>_package.lst
    if exist gsl\configure.bat echo gsl\configure.bat>>_package.lst
    if exist gsl\Makefile.win32 echo gsl\Makefile.win32>>_package.lst
    if exist gsl\boomake.bat echo gsl\boomake.bat>>_package.lst
    if exist gsl\gsl3.vcproj echo gsl\gsl3.vcproj>>_package.lst
    if exist gsl\libgsl3.vcproj echo gsl\libgsl3.vcproj>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [gsl]: Building gsl-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d gsl-!MY_VERSION!
    if exist  gsl-!MY_VERSION!-src.zip del gsl-!MY_VERSION!-src.zip
    zip -rmq gsl-!MY_VERSION!-src.zip gsl-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.c (
        echo boom E: [gsl]: gsl3.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldb.c (
        echo boom E: [gsl]: gsldb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.xml (
        echo boom E: [gsl]: ggscrp.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.c (
        echo boom E: [gsl]: ggthrd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.c (
        echo boom E: [gsl]: ggmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.c (
        echo boom E: [gsl]: ggsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.i (
        echo boom E: [gsl]: ggcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.d (
        echo boom E: [gsl]: ggcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.c (
        echo boom E: [gsl]: ggcodem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.i (
        echo boom E: [gsl]: ggpars.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.d (
        echo boom E: [gsl]: ggpars.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.c (
        echo boom E: [gsl]: ggparsm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.l (
        echo boom E: [gsl]: ggscrp.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.i (
        echo boom E: [gsl]: ggscrp.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.d (
        echo boom E: [gsl]: ggscrp.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.c (
        echo boom E: [gsl]: ggscrp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrpm.c (
        echo boom E: [gsl]: ggscrpm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrpm.h (
        echo boom E: [gsl]: ggscrpm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.c (
        echo boom E: [gsl]: ggconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.c (
        echo boom E: [gsl]: ggenvt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.c (
        echo boom E: [gsl]: ggmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.l (
        echo boom E: [gsl]: ggmail.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.i (
        echo boom E: [gsl]: ggmail.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.d (
        echo boom E: [gsl]: ggmail.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.h (
        echo boom E: [gsl]: ggmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.l (
        echo boom E: [gsl]: ggsock.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.i (
        echo boom E: [gsl]: ggsock.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.d (
        echo boom E: [gsl]: ggsock.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.c (
        echo boom E: [gsl]: ggfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.c (
        echo boom E: [gsl]: ggstrn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.c (
        echo boom E: [gsl]: ggzip.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.h (
        echo boom E: [gsl]: ggzip.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.c (
        echo boom E: [gsl]: ggdate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.h (
        echo boom E: [gsl]: ggdate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.c (
        echo boom E: [gsl]: ggtime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.c (
        echo boom E: [gsl]: ggdir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.h (
        echo boom E: [gsl]: ggdir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.c (
        echo boom E: [gsl]: ggpcre.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.c (
        echo boom E: [gsl]: ggcons.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.h (
        echo boom E: [gsl]: ggcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.c (
        echo boom E: [gsl]: ggproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.h (
        echo boom E: [gsl]: gsl3.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [gsl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [gsl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [gsl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [gsl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [gsl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [gsl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.vcproj (
        echo boom E: [gsl]: gsl3.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libgsl3.vcproj (
        echo boom E: [gsl]: libgsl3.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.exe (
        echo boom E: [gsl]: gsl3.exe is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libgsl3.lib (
        echo boom E: [gsl]: libgsl3.lib is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrpm.h (
        echo boom E: [gsl]: ggscrpm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.h (
        echo boom E: [gsl]: ggzip.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.h (
        echo boom E: [gsl]: ggdate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.h (
        echo boom E: [gsl]: ggdir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.h (
        echo boom E: [gsl]: ggcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.h (
        echo boom E: [gsl]: gsl3.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.c (
        echo boom E: [gsl]: gsl3.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldb.c (
        echo boom E: [gsl]: gsldb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.xml (
        echo boom E: [gsl]: ggscrp.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.gxl (
        echo boom E: [gsl]: ggconv.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.gxl (
        echo boom E: [gsl]: ggenvt.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.c (
        echo boom E: [gsl]: ggthrd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.gxl (
        echo boom E: [gsl]: ggmath.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.c (
        echo boom E: [gsl]: ggmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.c (
        echo boom E: [gsl]: ggsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.gxl (
        echo boom E: [gsl]: ggfile.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.gxl (
        echo boom E: [gsl]: ggstrn.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.gxl (
        echo boom E: [gsl]: ggzip.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.gxl (
        echo boom E: [gsl]: ggdate.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.gxl (
        echo boom E: [gsl]: ggtime.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.gxl (
        echo boom E: [gsl]: ggdir.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.gxl (
        echo boom E: [gsl]: ggpcre.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.gxl (
        echo boom E: [gsl]: ggcons.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.gxl (
        echo boom E: [gsl]: ggproc.gxl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.l (
        echo boom E: [gsl]: ggscrp.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.c (
        echo boom E: [gsl]: ggscrp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.l (
        echo boom E: [gsl]: ggmail.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.h (
        echo boom E: [gsl]: ggmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.l (
        echo boom E: [gsl]: ggsock.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [gsl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist version.h (
        echo boom E: [gsl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.c (
        echo boom E: [gsl]: gsl3.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldb.c (
        echo boom E: [gsl]: gsldb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.xml (
        echo boom E: [gsl]: ggcode.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.xml (
        echo boom E: [gsl]: ggpars.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.xml (
        echo boom E: [gsl]: ggscrp.xml is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gghead.h (
        echo boom E: [gsl]: gghead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpriv.h (
        echo boom E: [gsl]: ggpriv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfunc.inc (
        echo boom E: [gsl]: ggfunc.inc is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.c (
        echo boom E: [gsl]: ggobjt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.c (
        echo boom E: [gsl]: ggcomm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.c (
        echo boom E: [gsl]: ggthrd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.c (
        echo boom E: [gsl]: ggmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.c (
        echo boom E: [gsl]: ggsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.gsl (
        echo boom E: [gsl]: ggobjt.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmacro.gsl (
        echo boom E: [gsl]: ggmacro.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggreport.gsl (
        echo boom E: [gsl]: ggreport.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist console.gsl (
        echo boom E: [gsl]: console.gsl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsldoc.txt (
        echo boom E: [gsl]: gsldoc.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [gsl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [gsl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.l (
        echo boom E: [gsl]: ggcode.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.i (
        echo boom E: [gsl]: ggcode.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.d (
        echo boom E: [gsl]: ggcode.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.c (
        echo boom E: [gsl]: ggcode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcode.h (
        echo boom E: [gsl]: ggcode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.c (
        echo boom E: [gsl]: ggcodem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcodem.h (
        echo boom E: [gsl]: ggcodem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.l (
        echo boom E: [gsl]: ggpars.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.i (
        echo boom E: [gsl]: ggpars.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.d (
        echo boom E: [gsl]: ggpars.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.c (
        echo boom E: [gsl]: ggpars.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpars.h (
        echo boom E: [gsl]: ggpars.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.c (
        echo boom E: [gsl]: ggparsm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggparsm.h (
        echo boom E: [gsl]: ggparsm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.l (
        echo boom E: [gsl]: ggscrp.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.i (
        echo boom E: [gsl]: ggscrp.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.d (
        echo boom E: [gsl]: ggscrp.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.c (
        echo boom E: [gsl]: ggscrp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrp.h (
        echo boom E: [gsl]: ggscrp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrpm.c (
        echo boom E: [gsl]: ggscrpm.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggscrpm.h (
        echo boom E: [gsl]: ggscrpm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggobjt.h (
        echo boom E: [gsl]: ggobjt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcomm.h (
        echo boom E: [gsl]: ggcomm.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.c (
        echo boom E: [gsl]: ggconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggconv.h (
        echo boom E: [gsl]: ggconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.c (
        echo boom E: [gsl]: ggenvt.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggenvt.h (
        echo boom E: [gsl]: ggenvt.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggthrd.h (
        echo boom E: [gsl]: ggthrd.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.c (
        echo boom E: [gsl]: ggmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmath.h (
        echo boom E: [gsl]: ggmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.l (
        echo boom E: [gsl]: ggmail.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.i (
        echo boom E: [gsl]: ggmail.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.d (
        echo boom E: [gsl]: ggmail.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggmail.h (
        echo boom E: [gsl]: ggmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.l (
        echo boom E: [gsl]: ggsock.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.i (
        echo boom E: [gsl]: ggsock.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.d (
        echo boom E: [gsl]: ggsock.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggsock.h (
        echo boom E: [gsl]: ggsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.c (
        echo boom E: [gsl]: ggfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggfile.h (
        echo boom E: [gsl]: ggfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.c (
        echo boom E: [gsl]: ggstrn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggstrn.h (
        echo boom E: [gsl]: ggstrn.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.c (
        echo boom E: [gsl]: ggzip.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggzip.h (
        echo boom E: [gsl]: ggzip.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.c (
        echo boom E: [gsl]: ggdate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdate.h (
        echo boom E: [gsl]: ggdate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.c (
        echo boom E: [gsl]: ggtime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggtime.h (
        echo boom E: [gsl]: ggtime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.c (
        echo boom E: [gsl]: ggdir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggdir.h (
        echo boom E: [gsl]: ggdir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.c (
        echo boom E: [gsl]: ggpcre.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggpcre.h (
        echo boom E: [gsl]: ggpcre.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.c (
        echo boom E: [gsl]: ggcons.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggcons.h (
        echo boom E: [gsl]: ggcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.c (
        echo boom E: [gsl]: ggproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist ggproc.h (
        echo boom E: [gsl]: ggproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.h (
        echo boom E: [gsl]: gsl3.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [gsl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [gsl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [gsl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [gsl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [gsl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [gsl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [gsl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [gsl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist gsl3.vcproj (
        echo boom E: [gsl]: gsl3.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libgsl3.vcproj (
        echo boom E: [gsl]: libgsl3.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [gsl]: installing GSL into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if "!BOOM_TRACE!"=="1" echo copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggobjt.gsl !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y gsl3.exe !_INSTALL_ROOT!\bin\>nul
    verify>nul
    call copy/y gsl3.exe !_INSTALL_ROOT!\bin\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsl3.exe !_INSTALL_ROOT!\bin\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\lib\nul mkdir !_INSTALL_ROOT!\lib\
    if "!BOOM_TRACE!"=="1" echo copy/y libgsl3.lib !_INSTALL_ROOT!\lib\>nul
    verify>nul
    call copy/y libgsl3.lib !_INSTALL_ROOT!\lib\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y libgsl3.lib !_INSTALL_ROOT!\lib\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\doc\GSL\nul mkdir !_INSTALL_ROOT!\doc\GSL\
    if "!BOOM_TRACE!"=="1" echo copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul
    verify>nul
    call copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsldoc.txt !_INSTALL_ROOT!\doc\GSL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if not exist !_INSTALL_ROOT!\doc\GSL\nul mkdir !_INSTALL_ROOT!\doc\GSL\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\GSL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggcodem.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggparsm.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggscrpm.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggscrpm.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggscrpm.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggconv.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggconv.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggconv.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggenvt.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggmath.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggmath.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggmath.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggfile.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggfile.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggfile.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggstrn.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggzip.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggzip.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggzip.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggdate.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggdate.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggdate.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggtime.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggtime.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggtime.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggdir.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggdir.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggdir.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggpcre.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggcons.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggcons.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggcons.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y ggproc.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y ggproc.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y ggproc.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo copy/y gsl3.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y gsl3.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [gsl]: 'copy/y gsl3.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [gsl]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [gsl]: Generating files...
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggcode.xml
    verify>nul
    call gsl3 -q ggcode.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggcode.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggpars.xml
    verify>nul
    call gsl3 -q ggpars.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggpars.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggscrp.xml
    verify>nul
    call gsl3 -q ggscrp.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggscrp.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggconv.gxl
    verify>nul
    call gsl3 -q ggconv.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggconv.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggenvt.gxl
    verify>nul
    call gsl3 -q ggenvt.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggenvt.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggmath.gxl
    verify>nul
    call gsl3 -q ggmath.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggmath.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggfile.gxl
    verify>nul
    call gsl3 -q ggfile.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggfile.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggstrn.gxl
    verify>nul
    call gsl3 -q ggstrn.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggstrn.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggzip.gxl
    verify>nul
    call gsl3 -q ggzip.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggzip.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggdate.gxl
    verify>nul
    call gsl3 -q ggdate.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggdate.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggtime.gxl
    verify>nul
    call gsl3 -q ggtime.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggtime.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggdir.gxl
    verify>nul
    call gsl3 -q ggdir.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggdir.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggpcre.gxl
    verify>nul
    call gsl3 -q ggpcre.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggpcre.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggcons.gxl
    verify>nul
    call gsl3 -q ggcons.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggcons.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggproc.gxl
    verify>nul
    call gsl3 -q ggproc.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggproc.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggcode.l
    verify>nul
    call lr -quiet ggcode.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggpars.l
    verify>nul
    call lr -quiet ggpars.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggpars.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggscrp.l
    verify>nul
    call lr -quiet ggscrp.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggscrp.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggmail.l
    verify>nul
    call lr -quiet ggmail.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggmail.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggsock.l
    verify>nul
    call lr -quiet ggsock.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggsock.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist gsl3.h del gsl3.h
    if "!BOOM_TRACE!"=="1" echo type gghead.h>>gsl3.h
    verify>nul
    call type gghead.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gghead.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpars.h>>gsl3.h
    verify>nul
    call type ggpars.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpars.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggparsm.h>>gsl3.h
    verify>nul
    call type ggparsm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggparsm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrp.h>>gsl3.h
    verify>nul
    call type ggscrp.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrp.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrpm.h>>gsl3.h
    verify>nul
    call type ggscrpm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrpm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcomm.h>>gsl3.h
    verify>nul
    call type ggcomm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcomm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcode.h>>gsl3.h
    verify>nul
    call type ggcode.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcode.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcodem.h>>gsl3.h
    verify>nul
    call type ggcodem.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcodem.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggobjt.h>>gsl3.h
    verify>nul
    call type ggobjt.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggobjt.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl3.h
    verify>nul
    call type ggthrd.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggenvt.h>>gsl3.h
    verify>nul
    call type ggenvt.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggenvt.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggfile.h>>gsl3.h
    verify>nul
    call type ggfile.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggfile.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggconv.h>>gsl3.h
    verify>nul
    call type ggconv.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggconv.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmath.h>>gsl3.h
    verify>nul
    call type ggmath.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmath.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmail.h>>gsl3.h
    verify>nul
    call type ggmail.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmail.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsock.h>>gsl3.h
    verify>nul
    call type ggsock.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsock.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggstrn.h>>gsl3.h
    verify>nul
    call type ggstrn.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggstrn.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl3.h
    verify>nul
    call type ggthrd.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggzip.h>>gsl3.h
    verify>nul
    call type ggzip.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggzip.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdate.h>>gsl3.h
    verify>nul
    call type ggdate.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdate.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggtime.h>>gsl3.h
    verify>nul
    call type ggtime.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggtime.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdir.h>>gsl3.h
    verify>nul
    call type ggdir.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdir.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [gsl]: Generating files...
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggcode.xml
    verify>nul
    call gsl3 -q ggcode.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggcode.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggpars.xml
    verify>nul
    call gsl3 -q ggpars.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggpars.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggscrp.xml
    verify>nul
    call gsl3 -q ggscrp.xml
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggscrp.xml' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggconv.gxl
    verify>nul
    call gsl3 -q ggconv.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggconv.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggenvt.gxl
    verify>nul
    call gsl3 -q ggenvt.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggenvt.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggmath.gxl
    verify>nul
    call gsl3 -q ggmath.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggmath.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggfile.gxl
    verify>nul
    call gsl3 -q ggfile.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggfile.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggstrn.gxl
    verify>nul
    call gsl3 -q ggstrn.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggstrn.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggzip.gxl
    verify>nul
    call gsl3 -q ggzip.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggzip.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggdate.gxl
    verify>nul
    call gsl3 -q ggdate.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggdate.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggtime.gxl
    verify>nul
    call gsl3 -q ggtime.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggtime.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggdir.gxl
    verify>nul
    call gsl3 -q ggdir.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggdir.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggpcre.gxl
    verify>nul
    call gsl3 -q ggpcre.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggpcre.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggcons.gxl
    verify>nul
    call gsl3 -q ggcons.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggcons.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo gsl3 -q ggproc.gxl
    verify>nul
    call gsl3 -q ggproc.gxl
    if errorlevel 1 (
        echo boom E: [gsl]: 'gsl3 -q ggproc.gxl' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggcode.l
    verify>nul
    call lr -quiet ggcode.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggcode.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggpars.l
    verify>nul
    call lr -quiet ggpars.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggpars.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggscrp.l
    verify>nul
    call lr -quiet ggscrp.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggscrp.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggmail.l
    verify>nul
    call lr -quiet ggmail.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggmail.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet ggsock.l
    verify>nul
    call lr -quiet ggsock.l
    if errorlevel 1 (
        echo boom E: [gsl]: 'lr -quiet ggsock.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist gsl3.h del gsl3.h
    if "!BOOM_TRACE!"=="1" echo type gghead.h>>gsl3.h
    verify>nul
    call type gghead.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type gghead.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggpars.h>>gsl3.h
    verify>nul
    call type ggpars.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggpars.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggparsm.h>>gsl3.h
    verify>nul
    call type ggparsm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggparsm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrp.h>>gsl3.h
    verify>nul
    call type ggscrp.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrp.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggscrpm.h>>gsl3.h
    verify>nul
    call type ggscrpm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggscrpm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcomm.h>>gsl3.h
    verify>nul
    call type ggcomm.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcomm.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcode.h>>gsl3.h
    verify>nul
    call type ggcode.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcode.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggcodem.h>>gsl3.h
    verify>nul
    call type ggcodem.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggcodem.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggobjt.h>>gsl3.h
    verify>nul
    call type ggobjt.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggobjt.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl3.h
    verify>nul
    call type ggthrd.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggenvt.h>>gsl3.h
    verify>nul
    call type ggenvt.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggenvt.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggfile.h>>gsl3.h
    verify>nul
    call type ggfile.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggfile.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggconv.h>>gsl3.h
    verify>nul
    call type ggconv.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggconv.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmath.h>>gsl3.h
    verify>nul
    call type ggmath.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmath.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggmail.h>>gsl3.h
    verify>nul
    call type ggmail.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggmail.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggsock.h>>gsl3.h
    verify>nul
    call type ggsock.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggsock.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggstrn.h>>gsl3.h
    verify>nul
    call type ggstrn.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggstrn.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggthrd.h>>gsl3.h
    verify>nul
    call type ggthrd.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggthrd.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggzip.h>>gsl3.h
    verify>nul
    call type ggzip.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggzip.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdate.h>>gsl3.h
    verify>nul
    call type ggdate.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdate.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggtime.h>>gsl3.h
    verify>nul
    call type ggtime.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggtime.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type ggdir.h>>gsl3.h
    verify>nul
    call type ggdir.h>>gsl3.h
    if errorlevel 1 (
        echo boom E: [gsl]: 'type ggdir.h>>gsl3.h' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist gsl3.exe del gsl3.exe
    if exist libgsl3.lib del libgsl3.lib
    if exist gsl3.obj del gsl3.obj
    if exist gsl3.exe del gsl3.exe
    if exist gsldb.obj del gsldb.obj
    if exist gsldb.exe del gsldb.exe
    if exist ggcode.obj del ggcode.obj
    if exist ggcodemm.obj del ggcodemm.obj
    if exist ggpars.obj del ggpars.obj
    if exist ggparsmm.obj del ggparsmm.obj
    if exist ggscrp.obj del ggscrp.obj
    if exist ggscrpmm.obj del ggscrpmm.obj
    if exist ggobjt.obj del ggobjt.obj
    if exist ggcomm.obj del ggcomm.obj
    if exist ggconv.obj del ggconv.obj
    if exist ggenvt.obj del ggenvt.obj
    if exist ggthrd.obj del ggthrd.obj
    if exist ggmath.obj del ggmath.obj
    if exist ggmail.obj del ggmail.obj
    if exist ggsock.obj del ggsock.obj
    if exist ggfile.obj del ggfile.obj
    if exist ggstrn.obj del ggstrn.obj
    if exist ggzip.obj del ggzip.obj
    if exist ggdate.obj del ggdate.obj
    if exist ggtime.obj del ggtime.obj
    if exist ggdir.obj del ggdir.obj
    if exist ggpcre.obj del ggpcre.obj
    if exist ggcons.obj del ggcons.obj
    if exist ggproc.obj del ggproc.obj
    if exist ggcode.obj del ggcode.obj
    if exist ggcodem.obj del ggcodem.obj
    if exist ggpars.obj del ggpars.obj
    if exist ggparsm.obj del ggparsm.obj
    if exist ggscrp.obj del ggscrp.obj
    if exist ggscrpm.obj del ggscrpm.obj
    if exist ggconv.obj del ggconv.obj
    if exist ggenvt.obj del ggenvt.obj
    if exist ggmath.obj del ggmath.obj
    if exist ggfile.obj del ggfile.obj
    if exist ggstrn.obj del ggstrn.obj
    if exist ggzip.obj del ggzip.obj
    if exist ggdate.obj del ggdate.obj
    if exist ggtime.obj del ggtime.obj
    if exist ggdir.obj del ggdir.obj
    if exist ggpcre.obj del ggpcre.obj
    if exist ggcons.obj del ggcons.obj
    if exist ggproc.obj del ggproc.obj
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist ggcode.i del ggcode.i
    if exist ggcode.d del ggcode.d
    if exist ggcodem.c del ggcodem.c
    if exist ggcodem.h del ggcodem.h
    if exist ggpars.i del ggpars.i
    if exist ggpars.d del ggpars.d
    if exist ggparsm.c del ggparsm.c
    if exist ggparsm.h del ggparsm.h
    if exist ggscrp.i del ggscrp.i
    if exist ggscrp.d del ggscrp.d
    if exist ggscrpm.c del ggscrpm.c
    if exist ggscrpm.h del ggscrpm.h
    if exist ggconv.c del ggconv.c
    if exist ggconv.h del ggconv.h
    if exist ggenvt.c del ggenvt.c
    if exist ggenvt.h del ggenvt.h
    if exist ggmath.c del ggmath.c
    if exist ggmath.h del ggmath.h
    if exist ggmail.i del ggmail.i
    if exist ggmail.d del ggmail.d
    if exist ggsock.i del ggsock.i
    if exist ggsock.d del ggsock.d
    if exist ggfile.c del ggfile.c
    if exist ggfile.h del ggfile.h
    if exist ggstrn.c del ggstrn.c
    if exist ggstrn.h del ggstrn.h
    if exist ggzip.c del ggzip.c
    if exist ggzip.h del ggzip.h
    if exist ggdate.c del ggdate.c
    if exist ggdate.h del ggdate.h
    if exist ggtime.c del ggtime.c
    if exist ggtime.h del ggtime.h
    if exist ggdir.c del ggdir.c
    if exist ggdir.h del ggdir.h
    if exist ggpcre.c del ggpcre.c
    if exist ggpcre.h del ggpcre.h
    if exist ggcons.c del ggcons.c
    if exist ggcons.h del ggcons.h
    if exist ggproc.c del ggproc.c
    if exist ggproc.h del ggproc.h
    if exist gsl3.h del gsl3.h
    if exist stamp_generate del stamp_generate
    if exist configure del configure
    if exist Makefile.unix del Makefile.unix
    if exist configure.bat del configure.bat
    if exist Makefile.win32 del Makefile.win32
    if exist gsl3.vcproj del gsl3.vcproj
    if exist libgsl3.vcproj del libgsl3.vcproj
    if exist gsl_*.zip del gsl_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo gsl-3.1c2
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [gsl]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    goto s_win32
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    goto r_win32

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    goto s_win32
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    goto r_win32

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    goto s_win32
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    goto r_win32


exit /b 0

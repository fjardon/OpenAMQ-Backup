#   'Parse' engine for pdl
#
#   Generated by iMatix GSLgen
#   For copyright and license please see project license.
#

function pdl_parse_pdl (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in pdl")
    endif
    if (.[install]?"") = ""
        .[install] = ""
    endif
    if (.[deploy]?"") = ""
        .[deploy] = ""
    endif
    if !defined (.[version])
        pdl_parse_error ("Required attribute 'version' not defined in pdl")
    endif
    if (.[copyright]?"") = ""
        .[copyright] = "Copyright (c) The Author"
    endif
    if (.[workflow]?"") = ""
        .[workflow] = "standard.pwl"
    endif
    if (.[library]?"") = ""
        .[library] = "liblocal"
    endif
    
    pdl.acronym ?= name
    pdl.acronym = "$(pdl.acronym:c)"
    pdl.product ?= acronym
    for pdl.class
        resolve_class_inheritence ()
    endfor
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "include"
        elsif name () = "inherit"
        elsif name () = "file"
        elsif name () = "class"
        elsif name () = "target"
        elsif name () = "actions"
        elsif name () = "directory"
        elsif name () = "use"
        elsif name () = "set"
        elsif name () = "distrib"
        else
            pdl_parse_error ("<$(name ())> not allowed in pdl")
        endif
    endfor

    #    Process each set of entities separately
    for [include]
        pdl_parse_include ('include')
    endfor
    for [inherit]
        pdl_parse_inherit ('inherit')
    endfor
    for [file]
        pdl_parse_file ('file')
    endfor
    for [class]
        pdl_parse_class ('class')
    endfor
    for [target]
        pdl_parse_target ('target')
    endfor
    for [actions]
        pdl_parse_actions ('actions')
    endfor
    for [directory]
        pdl_parse_directory ('directory')
    endfor
    for [use]
        pdl_parse_use ('use')
    endfor
    for [set]
        pdl_parse_set ('set')
    endfor
    for [distrib]
        pdl_parse_distrib ('distrib')
    endfor
    
    #   Resolve all file derivations
    if library <> ""
        assert_dependency (library, "private library")
    endif
    walk_project ("",,"resolve_file_derivations")
    walk_project ("","resolve_dir_copies", "resolve_file_copies")

    #   Load child projects for product-level distributions
    for distrib
        >boom I: loading definitions for $(distrib.name)...
        for project
            if count (pdl.project, count.directory = project.directory, count) = 0
                if dir.setcwd (project.directory) = 0
                    new pdl.project as new_project
                        new_project.directory = project.directory
                        new_project.pdlfile   = project.pdlfile
                        pdl_load ("new_project", pdlfile + ".pdl")
                    endnew
                    dir.setcwd ("..")
                else
                    echo "boom E: no such directory - $(project.directory)"
                endif
            endif
        endfor
    endfor
endfunction

function pdl_parse_include (tag)
    if !defined (.[filename])
        pdl_parse_error ("Required attribute 'filename' not defined in include")
    endif
    if (.[required]?"") = ""
        .[required] = "1"
    endif
    if defined (.[required])
        if    .[required] ?= "0"
        elsif .[required] ?= "1"
        else
            pdl_parse_error ("Attribute 'required' has illegal value '$(.[required]?)' in include")
        endif
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in include")
    endfor
endfunction

function pdl_parse_inherit (tag)
    if !defined (.[filename])
        pdl_parse_error ("Required attribute 'filename' not defined in inherit")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in inherit")
    endfor
endfunction

function pdl_parse_file (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in file")
    endif
    if defined (.[filetype])
        if    .[filetype] ?= "command"
        elsif .[filetype] ?= "object"
        elsif .[filetype] ?= "library"
        else
            pdl_parse_error ("Attribute 'filetype' has illegal value '$(.[filetype]?)' in file")
        endif
    endif
    
    if !defined (file.class)
        file.class = class?
        if !defined (file.class)
            abort ("File '$(name)' does not have a class definition")
        endif
    endif
    if count ([-1].file, count.name = file.name & (count.filetype?"") = (file.filetype?""), count) > 1
        abort ("File '$(name)' defined more than once in project")
    endif
    if count (pdl.class, count.name ?= class, count) = 0
        abort ("Class '$(class:)' is not defined")
    else
        inherit_file_class ()
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "configure"
        elsif name () = "generate"
        elsif name () = "build"
        elsif name () = "test"
        elsif name () = "distrib"
        elsif name () = "install"
        elsif name () = "clean"
        elsif name () = "degen"
        elsif name () = "derive"
        else
            pdl_parse_error ("<$(name ())> not allowed in file")
        endif
    endfor

    #    Process each set of entities separately
    for [configure]
        pdl_parse_configure ('configure')
    endfor
    for [generate]
        pdl_parse_generate ('generate')
    endfor
    for [build]
        pdl_parse_build ('build')
    endfor
    for [test]
        pdl_parse_test ('test')
    endfor
    for [distrib]
        pdl_parse_distrib_file ('distrib')
    endfor
    for [install]
        pdl_parse_install_file ('install')
    endfor
    for [clean]
        pdl_parse_clean ('clean')
    endfor
    for [degen]
        pdl_parse_degen ('degen')
    endfor
    for [derive]
        pdl_parse_derive ('derive')
    endfor
endfunction

function pdl_parse_configure (tag)
    pdl_parse_configure_step ('configure')
endfunction

function pdl_parse_configure_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        else
            pdl_parse_error ("<$(name ())> not allowed in configure step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
endfunction

function pdl_parse_execute (tag)
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in execute")
    endfor
endfunction

function pdl_parse_generate (tag)
    pdl_parse_generate_step ('generate')
endfunction

function pdl_parse_generate_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        elsif name () = "collect"
        elsif name () = "copy"
        else
            pdl_parse_error ("<$(name ())> not allowed in generate step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
    for [collect]
        pdl_parse_collect ('collect')
    endfor
    for [copy]
        pdl_parse_copy ('copy')
    endfor
endfunction

function pdl_parse_copy (tag)
    if !defined (.[from])
        pdl_parse_error ("Required attribute 'from' not defined in copy")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in copy")
    endfor
endfunction

function pdl_parse_collect (tag)
    
    if !defined (into)
        if defined (file.name)
            collect.into  = file.name
            collect.class = file.class
        else
            pdl_parse_error ("Required attribute 'acronym' not defined in pdl")
        endif
    endif
    assert_dependency (into, class)
    #   Force file to be generated
    for pdl.file where name = into
        file.generated  = 1
        file.model     ?= collect.model?
    endfor
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "file"
        else
            pdl_parse_error ("<$(name ())> not allowed in collect")
        endif
    endfor

    #    Process each set of entities separately
    for [file]
        pdl_parse_collect_file ('file')
    endfor
endfunction

function pdl_parse_collect_file (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in file")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in file")
    endfor
endfunction

function pdl_parse_build (tag)
    pdl_parse_build_step ('build')
endfunction

function pdl_parse_build_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        elsif name () = "compile"
        elsif name () = "replace"
        elsif name () = "link"
        elsif name () = "copy"
        else
            pdl_parse_error ("<$(name ())> not allowed in build step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
    for [compile]
        pdl_parse_compile ('compile')
    endfor
    for [replace]
        pdl_parse_replace ('replace')
    endfor
    for [link]
        pdl_parse_link ('link')
    endfor
    for [copy]
        pdl_parse_copy ('copy')
    endfor
endfunction

function pdl_parse_compile (tag)
    if (.[as]?"") = ""
        .[as] = "c"
    endif
    if defined (.[as])
        if    .[as] ?= "c"
        elsif .[as] ?= "c++"
        else
            pdl_parse_error ("Attribute 'as' has illegal value '$(.[as]?)' in compile")
        endif
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in compile")
    endfor
endfunction

function pdl_parse_replace (tag)
    if (.[as]?"") = ""
        .[as] = "c"
    endif
    if defined (.[as])
        if    .[as] ?= "c"
        elsif .[as] ?= "c++"
        else
            pdl_parse_error ("Attribute 'as' has illegal value '$(.[as]?)' in replace")
        endif
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in replace")
    endfor
endfunction

function pdl_parse_link (tag)
    if (.[as]?"") = ""
        .[as] = "c"
    endif
    if defined (.[as])
        if    .[as] ?= "c"
        elsif .[as] ?= "c++"
        else
            pdl_parse_error ("Attribute 'as' has illegal value '$(.[as]?)' in link")
        endif
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in link")
    endfor
endfunction

function pdl_parse_test (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        elsif name () = "run"
        else
            pdl_parse_error ("<$(name ())> not allowed in test")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
    for [run]
        pdl_parse_run ('run')
    endfor
endfunction

function pdl_parse_run (tag)
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in run")
    endfor
endfunction

function pdl_parse_distrib_file (tag)
    if !defined (.[as])
        pdl_parse_error ("Required attribute 'as' not defined in distrib")
    endif
    if defined (.[as])
        if    .[as] ?= "source"
        elsif .[as] ?= "binary"
        else
            pdl_parse_error ("Attribute 'as' has illegal value '$(.[as]?)' in distrib")
        endif
    endif
    if defined (.[format])
        if    .[format] ?= "raw"
        else
            pdl_parse_error ("Attribute 'format' has illegal value '$(.[format]?)' in distrib")
        endif
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in distrib")
    endfor
endfunction

function pdl_parse_install_file (tag)
    if !defined (.[as])
        pdl_parse_error ("Required attribute 'as' not defined in install")
    endif
    if defined (.[as])
        if    .[as] ?= "include"
        elsif .[as] ?= "library"
        elsif .[as] ?= "command"
        elsif .[as] ?= "resource"
        elsif .[as] ?= "script"
        elsif .[as] ?= "license"
        elsif .[as] ?= "readme"
        elsif .[as] ?= "document"
        else
            pdl_parse_error ("Attribute 'as' has illegal value '$(.[as]?)' in install")
        endif
    endif
    pdl_parse_install_step ('install')
endfunction

function pdl_parse_install (tag)
    pdl_parse_install_step ('install')
endfunction

function pdl_parse_install_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        else
            pdl_parse_error ("<$(name ())> not allowed in install step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
endfunction

function pdl_parse_clean (tag)
    pdl_parse_clean_step ('clean')
endfunction

function pdl_parse_clean_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        else
            pdl_parse_error ("<$(name ())> not allowed in clean step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
endfunction

function pdl_parse_degen (tag)
    pdl_parse_degen_step ('degen')
endfunction

function pdl_parse_degen_step (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        else
            pdl_parse_error ("<$(name ())> not allowed in degen step")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
endfunction

function pdl_parse_target (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in target")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in target")
    endfor
endfunction

function pdl_parse_derive (tag)
    if (.[extension]?"") = ""
        .[extension] = ""
    endif
    if !defined (.[class])
        pdl_parse_error ("Required attribute 'class' not defined in derive")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in derive")
    endfor
endfunction

function pdl_parse_class (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in class")
    endif
    if (.[generated]?"") = ""
        .[generated] = "0"
    endif
    if (.[shared]?"") = ""
        .[shared] = "0"
    endif
    if (.[filetype]?"") = ""
        .[filetype] = ""
    endif
    if defined (.[filetype])
        if    .[filetype] ?= ""
        elsif .[filetype] ?= "command"
        elsif .[filetype] ?= "object"
        elsif .[filetype] ?= "library"
        else
            pdl_parse_error ("Attribute 'filetype' has illegal value '$(.[filetype]?)' in class")
        endif
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "configure"
        elsif name () = "generate"
        elsif name () = "build"
        elsif name () = "test"
        elsif name () = "distrib"
        elsif name () = "install"
        elsif name () = "clean"
        elsif name () = "degen"
        elsif name () = "derive"
        else
            pdl_parse_error ("<$(name ())> not allowed in class")
        endif
    endfor

    #    Process each set of entities separately
    for [configure]
        pdl_parse_configure ('configure')
    endfor
    for [generate]
        pdl_parse_generate ('generate')
    endfor
    for [build]
        pdl_parse_build ('build')
    endfor
    for [test]
        pdl_parse_test ('test')
    endfor
    for [distrib]
        pdl_parse_distrib_file ('distrib')
    endfor
    for [install]
        pdl_parse_install_file ('install')
    endfor
    for [clean]
        pdl_parse_clean ('clean')
    endfor
    for [degen]
        pdl_parse_degen ('degen')
    endfor
    for [derive]
        pdl_parse_derive ('derive')
    endfor
endfunction

function pdl_parse_actions (tag)
    if (.[when]?"") = ""
        .[when] = "before"
    endif
    if defined (.[when])
        if    .[when] ?= "before"
        elsif .[when] ?= "after"
        else
            pdl_parse_error ("Attribute 'when' has illegal value '$(.[when]?)' in actions")
        endif
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "configure"
        elsif name () = "generate"
        elsif name () = "build"
        elsif name () = "install"
        elsif name () = "distsrc"
        elsif name () = "clean"
        elsif name () = "degen"
        else
            pdl_parse_error ("<$(name ())> not allowed in actions")
        endif
    endfor

    #    Process each set of entities separately
    for [configure]
        pdl_parse_configure ('configure')
    endfor
    for [generate]
        pdl_parse_generate ('generate')
    endfor
    for [build]
        pdl_parse_build ('build')
    endfor
    for [install]
        pdl_parse_install ('install')
    endfor
    for [distsrc]
        pdl_parse_distsrc ('distsrc')
    endfor
    for [clean]
        pdl_parse_clean ('clean')
    endfor
    for [degen]
        pdl_parse_degen ('degen')
    endfor
endfunction

function pdl_parse_distsrc (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "execute"
        else
            pdl_parse_error ("<$(name ())> not allowed in distsrc")
        endif
    endfor

    #    Process each set of entities separately
    for [execute]
        pdl_parse_execute ('execute')
    endfor
endfunction

function pdl_parse_directory (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in directory")
    endif
    if (.[keep_paths]?"") = ""
        .[keep_paths] = "1"
    endif
    if defined (.[keep_paths])
        if    .[keep_paths] ?= "0"
        elsif .[keep_paths] ?= "1"
        else
            pdl_parse_error ("Attribute 'keep_paths' has illegal value '$(.[keep_paths]?)' in directory")
        endif
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "directory"
        elsif name () = "file"
        elsif name () = "actions"
        else
            pdl_parse_error ("<$(name ())> not allowed in directory")
        endif
    endfor

    #    Process each set of entities separately
    for [directory]
        pdl_parse_directory ('directory')
    endfor
    for [file]
        pdl_parse_file ('file')
    endfor
    for [actions]
        pdl_parse_actions ('actions')
    endfor
    
    if library <> ""
        assert_dependency (library, "private library")
    endif
endfunction

function pdl_parse_use (tag)
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "library"
        else
            pdl_parse_error ("<$(name ())> not allowed in use")
        endif
    endfor

    #    Process each set of entities separately
    for [library]
        pdl_parse_library ('library')
    endfor
endfunction

function pdl_parse_library (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in library")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in library")
    endfor
endfunction

function pdl_parse_set (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in set")
    endif
    if !defined (.[value])
        pdl_parse_error ("Required attribute 'value' not defined in set")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in set")
    endfor
endfunction

function pdl_parse_distrib (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in distrib")
    endif
    if !defined (.[type])
        pdl_parse_error ("Required attribute 'type' not defined in distrib")
    endif
    if defined (.[type])
        if    .[type] ?= "boot"
        elsif .[type] ?= "source"
        elsif .[type] ?= "install"
        else
            pdl_parse_error ("Attribute 'type' has illegal value '$(.[type]?)' in distrib")
        endif
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "project"
        elsif name () = "packager"
        elsif name () = "prune"
        elsif name () = "argument"
        else
            pdl_parse_error ("<$(name ())> not allowed in distrib")
        endif
    endfor

    #    Process each set of entities separately
    for [project]
        pdl_parse_project ('project')
    endfor
    for [packager]
        pdl_parse_packager ('packager')
    endfor
    for [prune]
        pdl_parse_prune ('prune')
    endfor
    for [argument]
        pdl_parse_argument ('argument')
    endfor
endfunction

function pdl_parse_project (tag)
    if !defined (.[directory])
        pdl_parse_error ("Required attribute 'directory' not defined in project")
    endif
    if (.[pdlfile]?"") = ""
        .[pdlfile] = "project"
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in project")
    endfor
endfunction

function pdl_parse_packager (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in packager")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in packager")
    endfor
endfunction

function pdl_parse_prune (tag)
    if !defined (.[filename])
        pdl_parse_error ("Required attribute 'filename' not defined in prune")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in prune")
    endfor
endfunction

function pdl_parse_argument (tag)
    if !defined (.[name])
        pdl_parse_error ("Required attribute 'name' not defined in argument")
    endif
    if !defined (.[value])
        pdl_parse_error ("Required attribute 'value' not defined in argument")
    endif
    for . where defined (name ())
        pdl_parse_error ("<$(name ())> not allowed in argument")
    endfor
endfunction

function resolve_class_inheritence ()
    if !defined (class.resolved)
        class.resolved = 1
        if defined (class.inherit)
            class_inherit = class.inherit
            for pdl.class where name = class_inherit
                resolve_class_inheritence ()
            endfor
            for pdl.class as inheritclass where name = class.inherit
                class.generated ?= inheritclass.generated?0
                class.shared    ?= inheritclass.shared?0
                class.filetype  ?= inheritclass.filetype?""
                class.model     ?= inheritclass.model?
                for . as child
                    copy child to class
                endfor
            endfor
        endif
    endif
endfunction

function resolve_file_derivations (path)
    file.location = my.path        #   Relative location for file
    for file.derive
        assert_dependency ((derive.filename? file.basename + (extension?"")), class, file., derive.model?file.model, derive.generated)
    endfor
endfunction

function resolve_dir_copies (path)
    for . as step
        for copy
            if defined (directory.name)
                parent = "directory"
            else
                parent = "pdl"
            endif
            for $(parent).file where name = filename
                file.generated = 1
            endfor
            if count ($(parent).file, count.name = filename, count) = 0
                abort "Destination '$(filename)' for copy is missing from project"
            endif
        endfor
    endfor
endfunction

function resolve_file_copies (path)
    for . as step
        for copy
            file.generated = 1
            if defined (copy.filename)
                echo "To copy files, use the copy command at the project/directory level"
            endif
        endfor
    endfor
    if defined (string.locate (file.name, "?")) | defined (string.locate (file.name, "*"))
        file.wildcard = 1
    else
        file.wildcard = 0
    endif
endfunction


function pdl_parse_error (message)
    echo (my.message)
endfunction

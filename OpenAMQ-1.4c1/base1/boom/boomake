#!/bin/sh
#
#   Boom builder for Boom 2.5d0
#   Generated by iMatix Boom from scripted.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [boom]: $* - stop" 1>&2
    else
        echo "boom E: [boom]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [boom]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="2.5d0"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,mt on all platforms.
#
if [ -z "$BOOM_MODEL" ]; then
    BOOM_MODEL=release,mt
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
            BOOM_MODEL="$BOOM_MODEL,mt"
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where Boom should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "boom/boom_ver.gsl" ]; then
        echo boom/boom_ver.gsl>>_package.lst
    fi
    if [ -f "boom/boom" ]; then
        echo boom/boom>>_package.lst
    fi
    if [ -f "boom/pkg_zip.bat" ]; then
        echo boom/pkg_zip.bat>>_package.lst
    fi
    if [ -f "boom/pkg_tgz" ]; then
        echo boom/pkg_tgz>>_package.lst
    fi
    if [ -f "boom/boom.gsl" ]; then
        echo boom/boom.gsl>>_package.lst
    fi
    if [ -f "boom/boom.bat" ]; then
        echo boom/boom.bat>>_package.lst
    fi
    if [ -f "boom/bootstrap.gsl" ]; then
        echo boom/bootstrap.gsl>>_package.lst
    fi
    if [ -f "boom/mkpdl.bat" ]; then
        echo boom/mkpdl.bat>>_package.lst
    fi
    if [ -f "boom/mkpdl" ]; then
        echo boom/mkpdl>>_package.lst
    fi
    if [ -f "boom/version" ]; then
        echo boom/version>>_package.lst
    fi
    if [ -f "boom/buildxnf.gsl" ]; then
        echo boom/buildxnf.gsl>>_package.lst
    fi
    if [ -f "boom/mod_xnf.gsl" ]; then
        echo boom/mod_xnf.gsl>>_package.lst
    fi
    if [ -f "boom/mod_pdl.gsl" ]; then
        echo boom/mod_pdl.gsl>>_package.lst
    fi
    if [ -f "boom/mod_pwl.gsl" ]; then
        echo boom/mod_pwl.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_win32.gsl" ]; then
        echo boom/pwl_win32.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_msvc.gsl" ]; then
        echo boom/pwl_msvc.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_msvc9.gsl" ]; then
        echo boom/pwl_msvc9.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_os2.gsl" ]; then
        echo boom/pwl_os2.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_unix.gsl" ]; then
        echo boom/pwl_unix.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_vms.gsl" ]; then
        echo boom/pwl_vms.gsl>>_package.lst
    fi
    if [ -f "boom/pwl_lib.gsl" ]; then
        echo boom/pwl_lib.gsl>>_package.lst
    fi
    if [ -f "boom/pdlparse.gsl" ]; then
        echo boom/pdlparse.gsl>>_package.lst
    fi
    if [ -f "boom/pwlparse.gsl" ]; then
        echo boom/pwlparse.gsl>>_package.lst
    fi
    if [ -f "boom/version.gsl" ]; then
        echo boom/version.gsl>>_package.lst
    fi
    if [ -f "boom/makefile.gsl" ]; then
        echo boom/makefile.gsl>>_package.lst
    fi
    if [ -f "boom/license.gsl" ]; then
        echo boom/license.gsl>>_package.lst
    fi
    if [ -f "boom/classes.pdl" ]; then
        echo boom/classes.pdl>>_package.lst
    fi
    if [ -f "boom/standard.pwl" ]; then
        echo boom/standard.pwl>>_package.lst
    fi
    if [ -f "boom/scripted.pwl" ]; then
        echo boom/scripted.pwl>>_package.lst
    fi
    if [ -f "boom/simple.pwl" ]; then
        echo boom/simple.pwl>>_package.lst
    fi
    if [ -f "boom/product.pwl" ]; then
        echo boom/product.pwl>>_package.lst
    fi
    if [ -f "boom/targets.pwl" ]; then
        echo boom/targets.pwl>>_package.lst
    fi
    if [ -f "boom/parsers.gsl" ]; then
        echo boom/parsers.gsl>>_package.lst
    fi
    if [ -f "boom/xnf.xnf" ]; then
        echo boom/xnf.xnf>>_package.lst
    fi
    if [ -f "boom/pdl.xnf" ]; then
        echo boom/pdl.xnf>>_package.lst
    fi
    if [ -f "boom/pwl.xnf" ]; then
        echo boom/pwl.xnf>>_package.lst
    fi
    if [ -f "boom/boom.txt" ]; then
        echo boom/boom.txt>>_package.lst
    fi
    if [ -f "boom/gdstyle.css" ]; then
        echo boom/gdstyle.css>>_package.lst
    fi
    if [ -f "boom/mainlogo.jpg" ]; then
        echo boom/mainlogo.jpg>>_package.lst
    fi
    if [ -f "boom/boom.html" ]; then
        echo boom/boom.html>>_package.lst
    fi
    if [ -f "boom/boom_1.html" ]; then
        echo boom/boom_1.html>>_package.lst
    fi
    if [ -f "boom/boom_2.html" ]; then
        echo boom/boom_2.html>>_package.lst
    fi
    if [ -f "boom/boom_3.html" ]; then
        echo boom/boom_3.html>>_package.lst
    fi
    if [ -f "boom/boom_bot.html" ]; then
        echo boom/boom_bot.html>>_package.lst
    fi
    if [ -f "boom/boom_toc.html" ]; then
        echo boom/boom_toc.html>>_package.lst
    fi
    if [ -f "boom/boom_top.html" ]; then
        echo boom/boom_top.html>>_package.lst
    fi
    if [ -f "boom/prelude.pdl" ]; then
        echo boom/prelude.pdl>>_package.lst
    fi
    if [ -f "boom/license.gpl" ]; then
        echo boom/license.gpl>>_package.lst
    fi
    if [ -f "boom/project.pdl" ]; then
        echo boom/project.pdl>>_package.lst
    fi
    if [ -f "boom/readme.txt" ]; then
        echo boom/readme.txt>>_package.lst
    fi
    if [ -f "boom/stamp_generate" ]; then
        echo boom/stamp_generate>>_package.lst
    fi
    if [ -f "boom/boomakew.bat" ]; then
        echo boom/boomakew.bat>>_package.lst
    fi
    if [ -f "boom/configure" ]; then
        echo boom/configure>>_package.lst
    fi
    if [ -f "boom/Makefile.unix" ]; then
        echo boom/Makefile.unix>>_package.lst
    fi
    if [ -f "boom/boomake" ]; then
        echo boom/boomake>>_package.lst
    fi
    if [ -f "boom/configure.bat" ]; then
        echo boom/configure.bat>>_package.lst
    fi
    if [ -f "boom/Makefile.win32" ]; then
        echo boom/Makefile.win32>>_package.lst
    fi
    if [ -f "boom/boomake.bat" ]; then
        echo boom/boomake.bat>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building boom-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d boom-$MY_VERSION
    rm -f boom-$MY_VERSION-src.tar.gz
    tar -cf  boom-$MY_VERSION-src.tar boom-$MY_VERSION
    gzip boom-$MY_VERSION-src.tar
    rm -f boom-$MY_VERSION-src.zip
    carp "Building boom-$MY_VERSION-src.zip..."
    zip -lrmq boom-$MY_VERSION-src.zip boom-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "boom_ver.gsl" ]; then
        croak "boom_ver.gsl is missing"
    fi
    if [ ! -f "boom" ]; then
        croak "boom is missing"
    fi
    if [ ! -f "pkg_tgz" ]; then
        croak "pkg_tgz is missing"
    fi
    if [ ! -f "boom.gsl" ]; then
        croak "boom.gsl is missing"
    fi
    if [ ! -f "boom.bat" ]; then
        croak "boom.bat is missing"
    fi
    if [ ! -f "bootstrap.gsl" ]; then
        croak "bootstrap.gsl is missing"
    fi
    if [ ! -f "mkpdl.bat" ]; then
        croak "mkpdl.bat is missing"
    fi
    if [ ! -f "mkpdl" ]; then
        croak "mkpdl is missing"
    fi
    if [ ! -f "version" ]; then
        croak "version is missing"
    fi
    if [ ! -f "buildxnf.gsl" ]; then
        croak "buildxnf.gsl is missing"
    fi
    if [ ! -f "mod_xnf.gsl" ]; then
        croak "mod_xnf.gsl is missing"
    fi
    if [ ! -f "mod_pdl.gsl" ]; then
        croak "mod_pdl.gsl is missing"
    fi
    if [ ! -f "mod_pwl.gsl" ]; then
        croak "mod_pwl.gsl is missing"
    fi
    if [ ! -f "pwl_win32.gsl" ]; then
        croak "pwl_win32.gsl is missing"
    fi
    if [ ! -f "pwl_msvc.gsl" ]; then
        croak "pwl_msvc.gsl is missing"
    fi
    if [ ! -f "pwl_msvc9.gsl" ]; then
        croak "pwl_msvc9.gsl is missing"
    fi
    if [ ! -f "pwl_os2.gsl" ]; then
        croak "pwl_os2.gsl is missing"
    fi
    if [ ! -f "pwl_unix.gsl" ]; then
        croak "pwl_unix.gsl is missing"
    fi
    if [ ! -f "pwl_vms.gsl" ]; then
        croak "pwl_vms.gsl is missing"
    fi
    if [ ! -f "pwl_lib.gsl" ]; then
        croak "pwl_lib.gsl is missing"
    fi
    if [ ! -f "pdlparse.gsl" ]; then
        croak "pdlparse.gsl is missing"
    fi
    if [ ! -f "pwlparse.gsl" ]; then
        croak "pwlparse.gsl is missing"
    fi
    if [ ! -f "version.gsl" ]; then
        croak "version.gsl is missing"
    fi
    if [ ! -f "makefile.gsl" ]; then
        croak "makefile.gsl is missing"
    fi
    if [ ! -f "license.gsl" ]; then
        croak "license.gsl is missing"
    fi
    if [ ! -f "classes.pdl" ]; then
        croak "classes.pdl is missing"
    fi
    if [ ! -f "standard.pwl" ]; then
        croak "standard.pwl is missing"
    fi
    if [ ! -f "scripted.pwl" ]; then
        croak "scripted.pwl is missing"
    fi
    if [ ! -f "simple.pwl" ]; then
        croak "simple.pwl is missing"
    fi
    if [ ! -f "product.pwl" ]; then
        croak "product.pwl is missing"
    fi
    if [ ! -f "targets.pwl" ]; then
        croak "targets.pwl is missing"
    fi
    if [ ! -f "parsers.gsl" ]; then
        croak "parsers.gsl is missing"
    fi
    if [ ! -f "xnf.xnf" ]; then
        croak "xnf.xnf is missing"
    fi
    if [ ! -f "pdl.xnf" ]; then
        croak "pdl.xnf is missing"
    fi
    if [ ! -f "pwl.xnf" ]; then
        croak "pwl.xnf is missing"
    fi
    if [ ! -f "boom.txt" ]; then
        croak "boom.txt is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "boom.html" ]; then
        croak "boom.html is missing"
    fi
    if [ ! -f "boom_1.html" ]; then
        croak "boom_1.html is missing"
    fi
    if [ ! -f "boom_2.html" ]; then
        croak "boom_2.html is missing"
    fi
    if [ ! -f "boom_3.html" ]; then
        croak "boom_3.html is missing"
    fi
    if [ ! -f "boom_bot.html" ]; then
        croak "boom_bot.html is missing"
    fi
    if [ ! -f "boom_toc.html" ]; then
        croak "boom_toc.html is missing"
    fi
    if [ ! -f "boom_top.html" ]; then
        croak "boom_top.html is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "boom_ver.gsl" ]; then
        croak "boom_ver.gsl is missing"
    fi
    if [ ! -f "boom" ]; then
        croak "boom is missing"
    fi
    if [ ! -f "pkg_tgz" ]; then
        croak "pkg_tgz is missing"
    fi
    if [ ! -f "boom.gsl" ]; then
        croak "boom.gsl is missing"
    fi
    if [ ! -f "boom.bat" ]; then
        croak "boom.bat is missing"
    fi
    if [ ! -f "bootstrap.gsl" ]; then
        croak "bootstrap.gsl is missing"
    fi
    if [ ! -f "mkpdl.bat" ]; then
        croak "mkpdl.bat is missing"
    fi
    if [ ! -f "mkpdl" ]; then
        croak "mkpdl is missing"
    fi
    if [ ! -f "version" ]; then
        croak "version is missing"
    fi
    if [ ! -f "buildxnf.gsl" ]; then
        croak "buildxnf.gsl is missing"
    fi
    if [ ! -f "mod_xnf.gsl" ]; then
        croak "mod_xnf.gsl is missing"
    fi
    if [ ! -f "mod_pdl.gsl" ]; then
        croak "mod_pdl.gsl is missing"
    fi
    if [ ! -f "mod_pwl.gsl" ]; then
        croak "mod_pwl.gsl is missing"
    fi
    if [ ! -f "pwl_win32.gsl" ]; then
        croak "pwl_win32.gsl is missing"
    fi
    if [ ! -f "pwl_msvc.gsl" ]; then
        croak "pwl_msvc.gsl is missing"
    fi
    if [ ! -f "pwl_msvc9.gsl" ]; then
        croak "pwl_msvc9.gsl is missing"
    fi
    if [ ! -f "pwl_os2.gsl" ]; then
        croak "pwl_os2.gsl is missing"
    fi
    if [ ! -f "pwl_unix.gsl" ]; then
        croak "pwl_unix.gsl is missing"
    fi
    if [ ! -f "pwl_vms.gsl" ]; then
        croak "pwl_vms.gsl is missing"
    fi
    if [ ! -f "pwl_lib.gsl" ]; then
        croak "pwl_lib.gsl is missing"
    fi
    if [ ! -f "pdlparse.gsl" ]; then
        croak "pdlparse.gsl is missing"
    fi
    if [ ! -f "pwlparse.gsl" ]; then
        croak "pwlparse.gsl is missing"
    fi
    if [ ! -f "version.gsl" ]; then
        croak "version.gsl is missing"
    fi
    if [ ! -f "makefile.gsl" ]; then
        croak "makefile.gsl is missing"
    fi
    if [ ! -f "license.gsl" ]; then
        croak "license.gsl is missing"
    fi
    if [ ! -f "classes.pdl" ]; then
        croak "classes.pdl is missing"
    fi
    if [ ! -f "standard.pwl" ]; then
        croak "standard.pwl is missing"
    fi
    if [ ! -f "scripted.pwl" ]; then
        croak "scripted.pwl is missing"
    fi
    if [ ! -f "simple.pwl" ]; then
        croak "simple.pwl is missing"
    fi
    if [ ! -f "product.pwl" ]; then
        croak "product.pwl is missing"
    fi
    if [ ! -f "targets.pwl" ]; then
        croak "targets.pwl is missing"
    fi
    if [ ! -f "parsers.gsl" ]; then
        croak "parsers.gsl is missing"
    fi
    if [ ! -f "xnf.xnf" ]; then
        croak "xnf.xnf is missing"
    fi
    if [ ! -f "pdl.xnf" ]; then
        croak "pdl.xnf is missing"
    fi
    if [ ! -f "pwl.xnf" ]; then
        croak "pwl.xnf is missing"
    fi
    if [ ! -f "boom.txt" ]; then
        croak "boom.txt is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "boom.html" ]; then
        croak "boom.html is missing"
    fi
    if [ ! -f "boom_1.html" ]; then
        croak "boom_1.html is missing"
    fi
    if [ ! -f "boom_2.html" ]; then
        croak "boom_2.html is missing"
    fi
    if [ ! -f "boom_3.html" ]; then
        croak "boom_3.html is missing"
    fi
    if [ ! -f "boom_bot.html" ]; then
        croak "boom_bot.html is missing"
    fi
    if [ ! -f "boom_toc.html" ]; then
        croak "boom_toc.html is missing"
    fi
    if [ ! -f "boom_top.html" ]; then
        croak "boom_top.html is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "boom_ver.gsl" ]; then
        croak "boom_ver.gsl is missing"
    fi
    if [ ! -f "boom" ]; then
        croak "boom is missing"
    fi
    if [ ! -f "pkg_tgz" ]; then
        croak "pkg_tgz is missing"
    fi
    if [ ! -f "boom.gsl" ]; then
        croak "boom.gsl is missing"
    fi
    if [ ! -f "boom.bat" ]; then
        croak "boom.bat is missing"
    fi
    if [ ! -f "bootstrap.gsl" ]; then
        croak "bootstrap.gsl is missing"
    fi
    if [ ! -f "mkpdl.bat" ]; then
        croak "mkpdl.bat is missing"
    fi
    if [ ! -f "mkpdl" ]; then
        croak "mkpdl is missing"
    fi
    if [ ! -f "version" ]; then
        croak "version is missing"
    fi
    if [ ! -f "buildxnf.gsl" ]; then
        croak "buildxnf.gsl is missing"
    fi
    if [ ! -f "mod_xnf.gsl" ]; then
        croak "mod_xnf.gsl is missing"
    fi
    if [ ! -f "mod_pdl.gsl" ]; then
        croak "mod_pdl.gsl is missing"
    fi
    if [ ! -f "mod_pwl.gsl" ]; then
        croak "mod_pwl.gsl is missing"
    fi
    if [ ! -f "pwl_win32.gsl" ]; then
        croak "pwl_win32.gsl is missing"
    fi
    if [ ! -f "pwl_msvc.gsl" ]; then
        croak "pwl_msvc.gsl is missing"
    fi
    if [ ! -f "pwl_msvc9.gsl" ]; then
        croak "pwl_msvc9.gsl is missing"
    fi
    if [ ! -f "pwl_os2.gsl" ]; then
        croak "pwl_os2.gsl is missing"
    fi
    if [ ! -f "pwl_unix.gsl" ]; then
        croak "pwl_unix.gsl is missing"
    fi
    if [ ! -f "pwl_vms.gsl" ]; then
        croak "pwl_vms.gsl is missing"
    fi
    if [ ! -f "pwl_lib.gsl" ]; then
        croak "pwl_lib.gsl is missing"
    fi
    if [ ! -f "pdlparse.gsl" ]; then
        croak "pdlparse.gsl is missing"
    fi
    if [ ! -f "pwlparse.gsl" ]; then
        croak "pwlparse.gsl is missing"
    fi
    if [ ! -f "version.gsl" ]; then
        croak "version.gsl is missing"
    fi
    if [ ! -f "makefile.gsl" ]; then
        croak "makefile.gsl is missing"
    fi
    if [ ! -f "license.gsl" ]; then
        croak "license.gsl is missing"
    fi
    if [ ! -f "classes.pdl" ]; then
        croak "classes.pdl is missing"
    fi
    if [ ! -f "standard.pwl" ]; then
        croak "standard.pwl is missing"
    fi
    if [ ! -f "scripted.pwl" ]; then
        croak "scripted.pwl is missing"
    fi
    if [ ! -f "simple.pwl" ]; then
        croak "simple.pwl is missing"
    fi
    if [ ! -f "product.pwl" ]; then
        croak "product.pwl is missing"
    fi
    if [ ! -f "targets.pwl" ]; then
        croak "targets.pwl is missing"
    fi
    if [ ! -f "parsers.gsl" ]; then
        croak "parsers.gsl is missing"
    fi
    if [ ! -f "xnf.xnf" ]; then
        croak "xnf.xnf is missing"
    fi
    if [ ! -f "pdl.xnf" ]; then
        croak "pdl.xnf is missing"
    fi
    if [ ! -f "pwl.xnf" ]; then
        croak "pwl.xnf is missing"
    fi
    if [ ! -f "boom.txt" ]; then
        croak "boom.txt is missing"
    fi
    if [ ! -f "gdstyle.css" ]; then
        croak "gdstyle.css is missing"
    fi
    if [ ! -f "mainlogo.jpg" ]; then
        croak "mainlogo.jpg is missing"
    fi
    if [ ! -f "boom.html" ]; then
        croak "boom.html is missing"
    fi
    if [ ! -f "boom_1.html" ]; then
        croak "boom_1.html is missing"
    fi
    if [ ! -f "boom_2.html" ]; then
        croak "boom_2.html is missing"
    fi
    if [ ! -f "boom_3.html" ]; then
        croak "boom_3.html is missing"
    fi
    if [ ! -f "boom_bot.html" ]; then
        croak "boom_bot.html is missing"
    fi
    if [ ! -f "boom_toc.html" ]; then
        croak "boom_toc.html is missing"
    fi
    if [ ! -f "boom_top.html" ]; then
        croak "boom_top.html is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing Boom into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp boom_ver.gsl $_INSTALL_ROOT/bin/"
    cp boom_ver.gsl $_INSTALL_ROOT/bin/ || croak "\"cp boom_ver.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/boom_ver.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/boom_ver.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/boom_ver.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom $_INSTALL_ROOT/bin/"
    cp boom $_INSTALL_ROOT/bin/ || croak "\"cp boom $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/boom"
    chmod 0755 $_INSTALL_ROOT/bin/boom || croak "\"chmod 0755 $_INSTALL_ROOT/bin/boom\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pkg_tgz $_INSTALL_ROOT/bin/"
    cp pkg_tgz $_INSTALL_ROOT/bin/ || croak "\"cp pkg_tgz $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/pkg_tgz"
    chmod 0755 $_INSTALL_ROOT/bin/pkg_tgz || croak "\"chmod 0755 $_INSTALL_ROOT/bin/pkg_tgz\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom.gsl $_INSTALL_ROOT/bin/"
    cp boom.gsl $_INSTALL_ROOT/bin/ || croak "\"cp boom.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/boom.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/boom.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/boom.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom.bat $_INSTALL_ROOT/bin/"
    cp boom.bat $_INSTALL_ROOT/bin/ || croak "\"cp boom.bat $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/boom.bat"
    chmod 0644 $_INSTALL_ROOT/bin/boom.bat || croak "\"chmod 0644 $_INSTALL_ROOT/bin/boom.bat\" failed"
    [ "$BOOM_TRACE" ] && echo "cp bootstrap.gsl $_INSTALL_ROOT/bin/"
    cp bootstrap.gsl $_INSTALL_ROOT/bin/ || croak "\"cp bootstrap.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/bootstrap.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/bootstrap.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/bootstrap.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mkpdl.bat $_INSTALL_ROOT/bin/"
    cp mkpdl.bat $_INSTALL_ROOT/bin/ || croak "\"cp mkpdl.bat $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mkpdl.bat"
    chmod 0644 $_INSTALL_ROOT/bin/mkpdl.bat || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mkpdl.bat\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mkpdl $_INSTALL_ROOT/bin/"
    cp mkpdl $_INSTALL_ROOT/bin/ || croak "\"cp mkpdl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/mkpdl"
    chmod 0755 $_INSTALL_ROOT/bin/mkpdl || croak "\"chmod 0755 $_INSTALL_ROOT/bin/mkpdl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp version $_INSTALL_ROOT/bin/"
    cp version $_INSTALL_ROOT/bin/ || croak "\"cp version $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/version"
    chmod 0755 $_INSTALL_ROOT/bin/version || croak "\"chmod 0755 $_INSTALL_ROOT/bin/version\" failed"
    [ "$BOOM_TRACE" ] && echo "cp buildxnf.gsl $_INSTALL_ROOT/bin/"
    cp buildxnf.gsl $_INSTALL_ROOT/bin/ || croak "\"cp buildxnf.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/buildxnf.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/buildxnf.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/buildxnf.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mod_xnf.gsl $_INSTALL_ROOT/bin/"
    cp mod_xnf.gsl $_INSTALL_ROOT/bin/ || croak "\"cp mod_xnf.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mod_xnf.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/mod_xnf.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mod_xnf.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mod_pdl.gsl $_INSTALL_ROOT/bin/"
    cp mod_pdl.gsl $_INSTALL_ROOT/bin/ || croak "\"cp mod_pdl.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mod_pdl.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/mod_pdl.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mod_pdl.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mod_pwl.gsl $_INSTALL_ROOT/bin/"
    cp mod_pwl.gsl $_INSTALL_ROOT/bin/ || croak "\"cp mod_pwl.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/mod_pwl.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/mod_pwl.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/mod_pwl.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_win32.gsl $_INSTALL_ROOT/bin/"
    cp pwl_win32.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_win32.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_win32.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_win32.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_win32.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_msvc.gsl $_INSTALL_ROOT/bin/"
    cp pwl_msvc.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_msvc.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_msvc9.gsl $_INSTALL_ROOT/bin/"
    cp pwl_msvc9.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_msvc9.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc9.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc9.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_msvc9.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_os2.gsl $_INSTALL_ROOT/bin/"
    cp pwl_os2.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_os2.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_os2.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_os2.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_os2.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_unix.gsl $_INSTALL_ROOT/bin/"
    cp pwl_unix.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_unix.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_unix.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_unix.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_unix.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_vms.gsl $_INSTALL_ROOT/bin/"
    cp pwl_vms.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_vms.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_vms.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_vms.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_vms.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwl_lib.gsl $_INSTALL_ROOT/bin/"
    cp pwl_lib.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwl_lib.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwl_lib.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwl_lib.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwl_lib.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pdlparse.gsl $_INSTALL_ROOT/bin/"
    cp pdlparse.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pdlparse.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pdlparse.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pdlparse.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pdlparse.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp pwlparse.gsl $_INSTALL_ROOT/bin/"
    cp pwlparse.gsl $_INSTALL_ROOT/bin/ || croak "\"cp pwlparse.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/pwlparse.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/pwlparse.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/pwlparse.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp version.gsl $_INSTALL_ROOT/bin/"
    cp version.gsl $_INSTALL_ROOT/bin/ || croak "\"cp version.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/version.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/version.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/version.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp makefile.gsl $_INSTALL_ROOT/bin/"
    cp makefile.gsl $_INSTALL_ROOT/bin/ || croak "\"cp makefile.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/makefile.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/makefile.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/makefile.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp license.gsl $_INSTALL_ROOT/bin/"
    cp license.gsl $_INSTALL_ROOT/bin/ || croak "\"cp license.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/license.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/license.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/license.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp classes.pdl $_INSTALL_ROOT/bin/"
    cp classes.pdl $_INSTALL_ROOT/bin/ || croak "\"cp classes.pdl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/classes.pdl"
    chmod 0644 $_INSTALL_ROOT/bin/classes.pdl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/classes.pdl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp standard.pwl $_INSTALL_ROOT/bin/"
    cp standard.pwl $_INSTALL_ROOT/bin/ || croak "\"cp standard.pwl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/standard.pwl"
    chmod 0644 $_INSTALL_ROOT/bin/standard.pwl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/standard.pwl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp scripted.pwl $_INSTALL_ROOT/bin/"
    cp scripted.pwl $_INSTALL_ROOT/bin/ || croak "\"cp scripted.pwl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/scripted.pwl"
    chmod 0644 $_INSTALL_ROOT/bin/scripted.pwl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/scripted.pwl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp simple.pwl $_INSTALL_ROOT/bin/"
    cp simple.pwl $_INSTALL_ROOT/bin/ || croak "\"cp simple.pwl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/simple.pwl"
    chmod 0644 $_INSTALL_ROOT/bin/simple.pwl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/simple.pwl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp product.pwl $_INSTALL_ROOT/bin/"
    cp product.pwl $_INSTALL_ROOT/bin/ || croak "\"cp product.pwl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/product.pwl"
    chmod 0644 $_INSTALL_ROOT/bin/product.pwl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/product.pwl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp targets.pwl $_INSTALL_ROOT/bin/"
    cp targets.pwl $_INSTALL_ROOT/bin/ || croak "\"cp targets.pwl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/targets.pwl"
    chmod 0644 $_INSTALL_ROOT/bin/targets.pwl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/targets.pwl\" failed"
    mkdir -p $_INSTALL_ROOT/doc/Boom/
    [ "$BOOM_TRACE" ] && echo "cp gdstyle.css $_INSTALL_ROOT/doc/Boom/"
    cp gdstyle.css $_INSTALL_ROOT/doc/Boom/ || croak "\"cp gdstyle.css $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/gdstyle.css"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/gdstyle.css || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/gdstyle.css\" failed"
    [ "$BOOM_TRACE" ] && echo "cp mainlogo.jpg $_INSTALL_ROOT/doc/Boom/"
    cp mainlogo.jpg $_INSTALL_ROOT/doc/Boom/ || croak "\"cp mainlogo.jpg $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/mainlogo.jpg"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/mainlogo.jpg || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/mainlogo.jpg\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom.html $_INSTALL_ROOT/doc/Boom/"
    cp boom.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_1.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_1.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_1.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_1.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_1.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_1.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_2.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_2.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_2.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_2.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_2.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_2.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_3.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_3.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_3.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_3.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_3.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_3.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_bot.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_bot.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_bot.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_bot.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_bot.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_bot.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_toc.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_toc.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_toc.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_toc.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_toc.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_toc.html\" failed"
    [ "$BOOM_TRACE" ] && echo "cp boom_top.html $_INSTALL_ROOT/doc/Boom/"
    cp boom_top.html $_INSTALL_ROOT/doc/Boom/ || croak "\"cp boom_top.html $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_top.html"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_top.html || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/boom_top.html\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp prelude.pdl $_INSTALL_ROOT/bin/"
    cp prelude.pdl $_INSTALL_ROOT/bin/ || croak "\"cp prelude.pdl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/prelude.pdl"
    chmod 0644 $_INSTALL_ROOT/bin/prelude.pdl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/prelude.pdl\" failed"
    mkdir -p $_INSTALL_ROOT/doc/Boom/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/Boom/"
    cp readme.txt $_INSTALL_ROOT/doc/Boom/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/Boom/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/Boom/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/Boom/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/Boom/readme.txt\" failed"
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:xnf -parse:0 buildxnf"
    gsl3 -quiet -xnf:xnf -parse:0 buildxnf || croak "\"gsl3 -quiet -xnf:xnf -parse:0 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:pdl -parse:1 buildxnf"
    gsl3 -quiet -xnf:pdl -parse:1 buildxnf || croak "\"gsl3 -quiet -xnf:pdl -parse:1 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:pwl -parse:1 buildxnf"
    gsl3 -quiet -xnf:pwl -parse:1 buildxnf || croak "\"gsl3 -quiet -xnf:pwl -parse:1 buildxnf\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:xnf -parse:0 buildxnf"
    gsl3 -quiet -xnf:xnf -parse:0 buildxnf || croak "\"gsl3 -quiet -xnf:xnf -parse:0 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:pdl -parse:1 buildxnf"
    gsl3 -quiet -xnf:pdl -parse:1 buildxnf || croak "\"gsl3 -quiet -xnf:pdl -parse:1 buildxnf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl3 -quiet -xnf:pwl -parse:1 buildxnf"
    gsl3 -quiet -xnf:pwl -parse:1 buildxnf || croak "\"gsl3 -quiet -xnf:pwl -parse:1 buildxnf\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f stamp_generate
    rm -f configure
    rm -f Makefile.unix
    rm -f configure.bat
    rm -f Makefile.win32
    rm -f boom_*.zip
    rm -f boom_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "boom-2.5d0"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files."
echo "compile:"
    echo "  Has no effect, provided for consistency with other workflows."
echo "clean:"
    echo "  Removes all generated source files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  When working with the packaged sources, does nothing."
echo "clean:"
    echo "  Has no effect, provided for consistency with other workflows."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  When working with the packaged sources, does nothing."
echo "clean:"
    echo "  Has no effect, provided for consistency with other workflows."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

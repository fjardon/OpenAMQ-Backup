.----------------------------------------------------------------------------!
.-                                                                           !
.-  smtexdr.gsl - Generate SMT messages as EXDR                              !
.-                                                                           !
.-  Copyright (c) 1991-2009 iMatix Corporation                               !
.-                                                                           !
.-  ------------------ GPL Licensed Source Code ------------------           !
.-  iMatix makes this software available under the GNU General               !
.-  Public License (GPL) license for open source projects.  For              !
.-  details of the GPL license please see www.gnu.org or read the            !
.-  file license.gpl provided in this package.                               !
.-                                                                           !
.-  This program is free software; you can redistribute it and/or            !
.-  modify it under the terms of the GNU General Public License as           !
.-  published by the Free Software Foundation; either version 2 of           !
.-  the License, or (at your option) any later version.                      !
.-                                                                           !
.-  This program is distributed in the hope that it will be useful,          !
.-  but WITHOUT ANY WARRANTY; without even the implied warranty of           !
.-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            !
.-  GNU General Public License for more details.                             !
.-                                                                           !
.-  You should have received a copy of the GNU General Public                !
.-  License along with this program in the file 'license.gpl'; if            !
.-  not, write to the Free Software Foundation, Inc., 59 Temple              !
.-  Place - Suite 330, Boston, MA 02111-1307, USA.                           !
.-                                                                           !
.-  You can also license this software under iMatix's General Terms          !
.-  of Business (GTB) for commercial projects.  If you have not              !
.-  explicitly licensed this software under the iMatix GTB you may           !
.-  only use it under the terms of the GNU General Public License.           !
.-                                                                           !
.-  For more information, send an email to info@imatix.com.                  !
.-  --------------------------------------------------------------           !
.----------------------------------------------------------------------------!
.-
.-----------------------------------------------------------------------------
.-  EXDR data types
.-----------------------------------------------------------------------------
.define datatype_char     = "char  "
.define datatype_byte     = "byte  "
.define datatype_word     = "word  "
.define datatype_dbyte    = "dbyte "
.define datatype_qbyte    = "qbyte "
.define datatype_long     = "qbyte "
.define datatype_string   = "char *"
.define datatype_bool     = "Bool  "
.define datatype_size     = "word  "
.define datatype_body     = "void *"
.define datatype_hsize    = "qbyte "
.define datatype_hbody    = "byte *"
.-
.-----------------------------------------------------------------------------
.-  EXDR data formats
.-----------------------------------------------------------------------------
.define dataformat_char   = "c"
.define dataformat_byte   = "b"
.define dataformat_word   = "w"
.define dataformat_dbyte  = "d"
.define dataformat_qbyte  = "q"
.define dataformat_long   = "l"
.define dataformat_string = "s"
.define dataformat_bool   = "B"
.define dataformat_size   = "m"
.define dataformat_body   = "M"
.define dataformat_hsize  = "h"
.define dataformat_hbody  = "H"
.-
.-----------------------------------------------------------------------------
.-  Start header file
.-----------------------------------------------------------------------------
.output "$(module).h"
/*---------------------------------------------------------------------------
 *  $(module).h - prototypes for $(application.title?:).
 *
 *  Generated on $(date), $(time) from $(filename)
 *  by smtgen.sch using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/
#ifndef INCLUDE_$(MODULE)
#define INCLUDE_$(MODULE)

.for . as service
/*---------------------------------------------------------------------------
 *  Definitions and prototypes for $(service.name:) - $(service.title?:).
 *---------------------------------------------------------------------------*/

.- Allow methods with no messages by creating a temporary dummy message
.    for method
.        new message after method
.            move method to message
.        endnew
.    endfor
.-
.    for message
.-----------------------------------------------------------------------------
.-  Define structure to hold message data
.-----------------------------------------------------------------------------
.        if count (field)
.            define format = ""
.            for field
.                define format = "$(format:)$(dataformat_$(type:):)"
.            endfor field
#define $(SERVICE.NAME:c)_$(MESSAGE.NAME:c)_FORMAT "$(format:)"

typedef struct {
.            for field
.                define dt = "$(datatype_$(type:):)"
    $(dt:)$(name:c);                    /*  $(field.title?:)                 */
.            endfor field
} struct_$(service.name:c)_$(message.name:c);
.            if defined (short)

typedef struct_$(service.name:c)_$(message.name:c) $(short:UPPER);
.            endif

int  get_$(service.name:c)_$(message.name:c)\
                                           (byte *_buffer,
                                            struct_$(service.name:c)_$(message.name:c) **params);
int  put_$(service.name:c)_$(message.name:c)\
                                           (byte **_buffer,
.            for field
.                if index (field) < count (message.field)
                                            $(datatype_$(type:):)$(name:c),
.                else
                                            $(datatype_$(type:):)$(name:c));
.                endif
.            endfor field
void free_$(service.name:c)_$(message.name:c)\
                                           (struct_$(service.name:c)_$(message.name:c) **params);

.        endif
.        for method
/*---------------------------------------------------------------------------
 *  Definitions and prototypes for $(method.name:) - $(method.title?:).
 *---------------------------------------------------------------------------*/

extern char *$(SERVICE.NAME:c)_$(METHOD.NAME:c);

#define declare_$(service.name:c)_$(method.name:c)(_event, _priority)          \\
    method_declare (agent, $(SERVICE.NAME:c)_$(METHOD.NAME:c), _event, _priority)

/*  Send event - $(method.name:)                                             */

.            if count (message.field)
int lsend_$(service.name:c)_$(method.name:c) (QID *_to, QID *_from,
        char *_accept,
        char *_reject,
        char *_expire,
        word _timeout,
.                for message.field
.                    define dt = "$(datatype_$(type:):)"
.                    if index (field) < count (message.field)
        $(dt:)$(field.name:c),          /*  $(field.title?:)                 */
.                    else
        $(dt:)$(field.name:c));         /*  $(field.title?:)                 */
.                    endif
.                endfor field

.            else
#define lsend_$(service.name:c)_$(method.name:c)(_to, _from,                   \\
    _accept, _reject, _expire, _timeout)                                     \\
        event_send (_to,                                                     \\
                    _from,                                                   \\
                    $(SERVICE.NAME:c)_$(METHOD.NAME:c),                        \\
                    NULL, 0,                                                 \\
                    _accept, _reject, _expire, _timeout)
.            endif
.-----------------------------------------------------------------------------
.-  Define quick send macro
.-----------------------------------------------------------------------------
.            if count (message.field)
#define send_$(service.name:c)_$(method.name:c)(_to,                           \\
.                for message.field
.                    if index (field) < count (message.field)
            $(field.name:c),                                                 \\
.                    else
            $(field.name:c))                                                 \\
.                    endif
.                endfor field
       lsend_$(service.name:c)_$(method.name:c)(_to,                           \\
            &thread-> queue-> qid,                                           \\
            NULL, NULL, NULL, 0,                                             \\
.                for message.field
.                    if index (field) < count (message.field)
            $(field.name:c),                                                 \\
.                    else
            $(field.name:c))
.                    endif
.                endfor field
.            else
#define send_$(service.name:c)_$(method.name:c)(_to)                           \\
        event_send (_to,                                                     \\
                    &thread-> queue-> qid,                                   \\
                    $(SERVICE.NAME:c)_$(METHOD.NAME:c),                        \\
                    NULL, 0,                                                 \\
                    NULL, NULL, NULL, 0)
.            endif

.        endfor method

.    endfor message
.endfor

#endif                                  /*  Included                         */
.-
.output "$(module).c"
/*---------------------------------------------------------------------------
 *  $(module).c - functions for $(application.title?:).
 *
 *  Generated on $(date), $(time) from $(filename)
 *  by smtgen.sch using GSLgen.
 *  DO NOT MODIFY THIS FILE.
 *
 *  For documentation and updates see http://www.imatix.com.
 *---------------------------------------------------------------------------*/

#include "sfl.h"                        /*  SFL header file                  */
#include "smt3.h"                       /*  SMT header file                  */
#include "$(module).h"                  /*  Definitions & prototypes         */

.for . as service
/*---------------------------------------------------------------------------
 *  Message functions for $(service.name:) - $(service.title?:).
 *---------------------------------------------------------------------------*/

.    for message
.        if count (field)

/*  ---------------------------------------------------------------------[<]-
    Function: put_$(service.name:c)_$(message.name:c)

    Synopsis: Formats a $(message.name:) message, allocates a new buffer,
    and returns the formatted message in the buffer.  You should free the
    buffer using mem_free() when finished.  Returns the size of the buffer
    in bytes.
    ---------------------------------------------------------------------[>]-*/

int
put_$(service.name:c)_$(message.name:c) (
    byte **_buffer,
.            for field
.                define dt = "$(datatype_$(type:):)"
.                if index (field) < count (message.field)
    $(dt:)$(name:c),                    /*  $(field.title?:)                 */
.                else
    $(dt:)$(name:c))                    /*  $(field.title?:)                 */
.                endif
.            endfor field
{
    int _size;

    _size = exdr_write (NULL,
                        $(SERVICE.NAME:c)_$(MESSAGE.NAME:c)_FORMAT,
.            for field
.                if index (field) < count (message.field)
                        $(name:c),
.                else
                        $(name:c));
.                endif
.            endfor field
    *_buffer = mem_alloc (_size);
    if (*_buffer)
        exdr_write (*_buffer,
                    $(SERVICE.NAME:c)_$(MESSAGE.NAME:c)_FORMAT,
.            for field
.                if index (field) < count (message.field)
                    $(name:c),
.                else
                    $(name:c));
.                endif
.            endfor field
    else
        _size = 0;
    return (_size);
}


/*  ---------------------------------------------------------------------[<]-
    Function: get_$(service.name:c)_$(message.name:c)

    Synopsis: Accepts a buffer containing a $(message.name:) message,
    and unpacks it into a new struct_$(service.name:c)_$(message.name:c) structure. Free the
    structure using free_$(service.name:c)_$(message.name:c)() when finished.
    ---------------------------------------------------------------------[>]-*/

int
get_$(service.name:c)_$(message.name:c) (
    byte *_buffer,
    struct_$(service.name:c)_$(message.name:c) **params)
{
    *params = mem_alloc (sizeof (struct_$(service.name:c)_$(message.name:c)));
    if (*params)
      {
.            for field
.                if type = "string" | type = "body" | type = "hbody"
        (*params)-> $(field.name:c) = NULL;
.                endif
.            endfor field
        return (exdr_read (_buffer, $(SERVICE.NAME:C)_$(MESSAGE.NAME:C)_FORMAT,
.            for field
.                if index (field) < count (message.field)
                   &(*params)-> $(field.name:c),
.                else
                   &(*params)-> $(field.name:c)));
.                endif
.            endfor field
      }
    else
        return -1;
}


/*  ---------------------------------------------------------------------[<]-
    Function: free_$(service.name:c)_$(message.name:c)

    Synopsis: frees a structure allocated by get_$(service.name:c)_$(message.name:c)().
    ---------------------------------------------------------------------[>]-*/

void
free_$(service.name:c)_$(message.name:c) (
    struct_$(service.name:c)_$(message.name:c) **params)
{
.            for field
.                if type = "string" | type = "body" | type = "hbody"
    mem_free ((*params)-> $(field.name:c));
.                endif
.            endfor field
    mem_free (*params);
    *params = NULL;
}

.        endif
.        for method
char *$(SERVICE.NAME:c)_$(METHOD.NAME:c) = "$(SERVICE.NAME) $(METHOD.NAME)";

.            if count (message.field)
/*  ---------------------------------------------------------------------[<]-
    Function: lsend_$(service.name:c)_$(name:c)

    Synopsis: Sends a $(method.name:) - $(method.title?:)
              event to the $(service.name:) agent
    ---------------------------------------------------------------------[>]-*/

int
lsend_$(service.name:c)_$(name:c) (QID *_to, QID *_from,
    char *_accept,
    char *_reject,
    char *_expire,
    word _timeout,
.                for message.field
.                    define dt = "$(datatype_$(type:):)"
.                    if index (field) < count (message.field)
    $(dt:)$(field.name:c),              /*  $(field.title?:)                 */
.                    else
    $(dt:)$(field.name:c))              /*  $(field.title?:)                 */
.                    endif
.                endfor field
{
    byte *_body;
    int   _size,
          _rc;
    _size = put_$(service.name:c)_$(message.name:c)
                (&_body,
.                for message.field 
.                    define dt = "$(datatype_$(type:):)"
.                    if index (field) < count (message.field)
                 $(name:c),
.                    else
                 $(name:c));
.                    endif
.                endfor field
    if (_size)
      {
        _rc = event_send (_to, _from, $(SERVICE.NAME:c)_$(METHOD.NAME:c),
                          _body, _size,
                          _accept, _reject, _expire, _timeout);
        mem_free (_body);
        return _rc;
      }
    else
        return -1;
}

.            endif # count (field)
.        endfor method
.    endfor message
.endfor


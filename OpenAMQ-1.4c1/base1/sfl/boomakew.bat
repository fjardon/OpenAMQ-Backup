@echo off
:-
:-  Boom builder for SFL 3.31
:-  Generated by iMatix Boom from standard.pwl
:-  
:-  Copyright (c) 1996-2009 iMatix Corporation
:-  All rights reserved.
:-  
:-  This file is licensed under the BSD license as follows:
:-  
:-  Redistribution and use in source and binary forms, with or without
:-  modification, are permitted provided that the following conditions
:-  are met:
:-  
:-  * Redistributions of source code must retain the above copyright
:-    notice, this list of conditions and the following disclaimer.
:-  * Redistributions in binary form must reproduce the above copyright
:-    notice, this list of conditions and the following disclaimer in
:-    the documentation and/or other materials provided with the
:-    distribution.
:-  * Neither the name of iMatix Corporation nor the names of its
:-    contributors may be used to endorse or promote products derived
:-    from this software without specific prior written permission.
:-  
:-  THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
:-  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
:-  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
:-  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
:-  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
:-  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
:-  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
:-  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
:-  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
:-  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
:-  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
:-
:-  Start CMD.EXE version detection
verify other 2>nul
setlocal enableextensions
if errorlevel 0 goto __cmd_ok
echo %0: This command requires command extensions version 2 in CMD.EXE.  
echo %0: Please use a supported system (Windows 2000 or newer).
exit
:__cmd_ok
setlocal enabledelayedexpansion
:-  End CMD.EXE version detection
goto :init
:-
:-  Subroutine: boom_model_init
:-  Initialises BOOM_MODEL to default if not set
:-  Expands BOOM_MODEL components into individual environment variables
:-
:boom_model_init
if "!BOOM_MODEL!"=="" (
    set BOOM_MODEL=release,st
)
set BOOM_MODEL__PLACEHOLDER=1
for /f "usebackq delims==" %%v in (`set BOOM_MODEL_`) do set %%v=
set BOOM_MODEL__PLACEHOLDER=
for %%m in (!BOOM_MODEL!) do set BOOM_MODEL_%%m=1
:-  If the user set BOOM_MODEL but did not include release/debug or st/mt
:-  set these to defaults.
if not "!BOOM_MODEL_RELEASE!"=="1" (
    if not "!BOOM_MODEL_DEBUG!"=="1" (
        set BOOM_MODEL_RELEASE=1
        set BOOM_MODEL=!BOOM_MODEL!,release
    )
)
if not "!BOOM_MODEL_ST!"=="1" (
    if not "!BOOM_MODEL_MT!"=="1" (
        set BOOM_MODEL_ST=1
        set BOOM_MODEL=!BOOM_MODEL!,st
    )
)
goto :eof
:init
setlocal
:-
:-  Set environment variables to point to install location
:-  Start by using final IBASE, then handle -install path
set self=%0
set MY_VERSION=3.31
set OLDPATH=!PATH!
set OLDPERLLIB=!PERLLIB!
if .!IBASE!==. (
    echo boom E: [sfl]: The IBASE variable is not set.             Please set it to the location where SFL should be installed.
    exit /b 1
)
if .%1==.-v (
    set BOOM_TRACE=1
    shift
)
call :boom_model_init
if .%1==.-install goto tempinst
:-  Normal use, use IBASE
    set PATH=!IBASE!\bin;!PATH!
    set PERLLIB=!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!IBASE!\include
    set _INSTALL_ROOT=!IBASE!
    goto process

:tempinst
:-  Building product, we use -install directory first, then IBASE
    if not exist %2 (
       echo "Invalid command syntax - please contact imatix-tech"
       exit /b 1
    )
    pushd %2
    set _LOCAL_BASE=!cd!
    popd
    set PATH=!_LOCAL_BASE!\bin;!IBASE!\bin;!PATH!
    set PERLLIB=!_LOCAL_BASE!\bin;!IBASE!\bin;!PERLLIB!
    set INCDIR_ALT=!_LOCAL_BASE!\include;!IBASE!\include
    set _INSTALL_ROOT=!_LOCAL_BASE!
    shift
    shift
    goto process

:batch
    shift

:process
    set state=initial
    set event=ok
    set debug=0
    goto s_!state!

:---------------------------   BUILD BINARY FILES   ---------------------------

:a_build_binary_files
    goto :eof

:--------------------------   BUILD SOURCE PACKAGES   -------------------------

:a_build_source_packages
   if exist _package.lst del _package.lst
    if exist sfl\version.h echo sfl\version.h>>_package.lst
    if exist sfl\prelude.h echo sfl\prelude.h>>_package.lst
    if exist sfl\sflhead.h echo sfl\sflhead.h>>_package.lst
    if exist sfl\sflbits.c echo sfl\sflbits.c>>_package.lst
    if exist sfl\sflcomp.c echo sfl\sflcomp.c>>_package.lst
    if exist sfl\sflcons.c echo sfl\sflcons.c>>_package.lst
    if exist sfl\sflconv.c echo sfl\sflconv.c>>_package.lst
    if exist sfl\sflcryp.c echo sfl\sflcryp.c>>_package.lst
    if exist sfl\sfldate.c echo sfl\sfldate.c>>_package.lst
    if exist sfl\sfldescr.c echo sfl\sfldescr.c>>_package.lst
    if exist sfl\sfldir.c echo sfl\sfldir.c>>_package.lst
    if exist sfl\sflenv.c echo sfl\sflenv.c>>_package.lst
    if exist sfl\sflexdr.c echo sfl\sflexdr.c>>_package.lst
    if exist sfl\sflfile.c echo sfl\sflfile.c>>_package.lst
    if exist sfl\sflfind.c echo sfl\sflfind.c>>_package.lst
    if exist sfl\sflfort.c echo sfl\sflfort.c>>_package.lst
    if exist sfl\sflheap.c echo sfl\sflheap.c>>_package.lst
    if exist sfl\sflhttp.c echo sfl\sflhttp.c>>_package.lst
    if exist sfl\sflini.c echo sfl\sflini.c>>_package.lst
    if exist sfl\sfllang.c echo sfl\sfllang.c>>_package.lst
    if exist sfl\sfllbuf.c echo sfl\sfllbuf.c>>_package.lst
    if exist sfl\sfllist.c echo sfl\sfllist.c>>_package.lst
    if exist sfl\sflmail.c echo sfl\sflmail.c>>_package.lst
    if exist sfl\sflmath.c echo sfl\sflmath.c>>_package.lst
    if exist sfl\sflmem.c echo sfl\sflmem.c>>_package.lst
    if exist sfl\sflmesg.c echo sfl\sflmesg.c>>_package.lst
    if exist sfl\sflmime.c echo sfl\sflmime.c>>_package.lst
    if exist sfl\sflnode.c echo sfl\sflnode.c>>_package.lst
    if exist sfl\sflprint.c echo sfl\sflprint.c>>_package.lst
    if exist sfl\sflproc.c echo sfl\sflproc.c>>_package.lst
    if exist sfl\sflsearch.c echo sfl\sflsearch.c>>_package.lst
    if exist sfl\sflsha.c echo sfl\sflsha.c>>_package.lst
    if exist sfl\sflslot.c echo sfl\sflslot.c>>_package.lst
    if exist sfl\sflsort.c echo sfl\sflsort.c>>_package.lst
    if exist sfl\sflstr.c echo sfl\sflstr.c>>_package.lst
    if exist sfl\sflsymb.c echo sfl\sflsymb.c>>_package.lst
    if exist sfl\sflsyst.c echo sfl\sflsyst.c>>_package.lst
    if exist sfl\sfltok.c echo sfl\sfltok.c>>_package.lst
    if exist sfl\sfltree.c echo sfl\sfltree.c>>_package.lst
    if exist sfl\sfltron.c echo sfl\sfltron.c>>_package.lst
    if exist sfl\sfluid.c echo sfl\sfluid.c>>_package.lst
    if exist sfl\sflxml.c echo sfl\sflxml.c>>_package.lst
    if exist sfl\sflxmll.c echo sfl\sflxmll.c>>_package.lst
    if exist sfl\sflxmls.c echo sfl\sflxmls.c>>_package.lst
    if exist sfl\sflsock.c echo sfl\sflsock.c>>_package.lst
    if exist sfl\sflcvbs.c echo sfl\sflcvbs.c>>_package.lst
    if exist sfl\sflcvdp.c echo sfl\sflcvdp.c>>_package.lst
    if exist sfl\sflcvds.c echo sfl\sflcvds.c>>_package.lst
    if exist sfl\sflcvns.c echo sfl\sflcvns.c>>_package.lst
    if exist sfl\sflcvsb.c echo sfl\sflcvsb.c>>_package.lst
    if exist sfl\sflcvsd.c echo sfl\sflcvsd.c>>_package.lst
    if exist sfl\sflcvsn.c echo sfl\sflcvsn.c>>_package.lst
    if exist sfl\sflcvst.c echo sfl\sflcvst.c>>_package.lst
    if exist sfl\sflcvtp.c echo sfl\sflcvtp.c>>_package.lst
    if exist sfl\sflcvts.c echo sfl\sflcvts.c>>_package.lst
    if exist sfl\sflscrit.c echo sfl\sflscrit.c>>_package.lst
    if exist sfl\sflproco.imp echo sfl\sflproco.imp>>_package.lst
    if exist sfl\sflprocu.imp echo sfl\sflprocu.imp>>_package.lst
    if exist sfl\sflprocv.imp echo sfl\sflprocv.imp>>_package.lst
    if exist sfl\sflprocw.imp echo sfl\sflprocw.imp>>_package.lst
    if exist sfl\sflprocx.h echo sfl\sflprocx.h>>_package.lst
    if exist sfl\sflprocx.imp echo sfl\sflprocx.imp>>_package.lst
    if exist sfl\testall.c echo sfl\testall.c>>_package.lst
    if exist sfl\testbits.c echo sfl\testbits.c>>_package.lst
    if exist sfl\testcgi.c echo sfl\testcgi.c>>_package.lst
    if exist sfl\testcomp.c echo sfl\testcomp.c>>_package.lst
    if exist sfl\testconv.c echo sfl\testconv.c>>_package.lst
    if exist sfl\testcryp.c echo sfl\testcryp.c>>_package.lst
    if exist sfl\testdate.c echo sfl\testdate.c>>_package.lst
    if exist sfl\testdir.c echo sfl\testdir.c>>_package.lst
    if exist sfl\testenv.c echo sfl\testenv.c>>_package.lst
    if exist sfl\testexdr.c echo sfl\testexdr.c>>_package.lst
    if exist sfl\testfile.c echo sfl\testfile.c>>_package.lst
    if exist sfl\testfind.c echo sfl\testfind.c>>_package.lst
    if exist sfl\testfort.c echo sfl\testfort.c>>_package.lst
    if exist sfl\testheap.c echo sfl\testheap.c>>_package.lst
    if exist sfl\testhttp.c echo sfl\testhttp.c>>_package.lst
    if exist sfl\testini.c echo sfl\testini.c>>_package.lst
    if exist sfl\testlang.c echo sfl\testlang.c>>_package.lst
    if exist sfl\testmem.c echo sfl\testmem.c>>_package.lst
    if exist sfl\testmime.c echo sfl\testmime.c>>_package.lst
    if exist sfl\testproc.c echo sfl\testproc.c>>_package.lst
    if exist sfl\teststr.c echo sfl\teststr.c>>_package.lst
    if exist sfl\testsym.c echo sfl\testsym.c>>_package.lst
    if exist sfl\testtok.c echo sfl\testtok.c>>_package.lst
    if exist sfl\testtree.c echo sfl\testtree.c>>_package.lst
    if exist sfl\testtron.c echo sfl\testtron.c>>_package.lst
    if exist sfl\testuid.c echo sfl\testuid.c>>_package.lst
    if exist sfl\testxml.c echo sfl\testxml.c>>_package.lst
    if exist sfl\testxmls.c echo sfl\testxmls.c>>_package.lst
    if exist sfl\testsearch.c echo sfl\testsearch.c>>_package.lst
    if exist sfl\testconv.dat echo sfl\testconv.dat>>_package.lst
    if exist sfl\testfort.txt echo sfl\testfort.txt>>_package.lst
    if exist sfl\dos2unix.c echo sfl\dos2unix.c>>_package.lst
    if exist sfl\prelude.pdl echo sfl\prelude.pdl>>_package.lst
    if exist sfl\license.gpl echo sfl\license.gpl>>_package.lst
    if exist sfl\project.pdl echo sfl\project.pdl>>_package.lst
    if exist sfl\readme.txt echo sfl\readme.txt>>_package.lst
    if exist sfl\sflbits.h echo sfl\sflbits.h>>_package.lst
    if exist sfl\sflcomp.h echo sfl\sflcomp.h>>_package.lst
    if exist sfl\sflcons.h echo sfl\sflcons.h>>_package.lst
    if exist sfl\sflconv.h echo sfl\sflconv.h>>_package.lst
    if exist sfl\sflcryp.h echo sfl\sflcryp.h>>_package.lst
    if exist sfl\sfldate.h echo sfl\sfldate.h>>_package.lst
    if exist sfl\sfldescr.h echo sfl\sfldescr.h>>_package.lst
    if exist sfl\sfldir.h echo sfl\sfldir.h>>_package.lst
    if exist sfl\sflenv.h echo sfl\sflenv.h>>_package.lst
    if exist sfl\sflexdr.h echo sfl\sflexdr.h>>_package.lst
    if exist sfl\sflfile.h echo sfl\sflfile.h>>_package.lst
    if exist sfl\sflfind.h echo sfl\sflfind.h>>_package.lst
    if exist sfl\sflfort.h echo sfl\sflfort.h>>_package.lst
    if exist sfl\sflheap.h echo sfl\sflheap.h>>_package.lst
    if exist sfl\sflhttp.h echo sfl\sflhttp.h>>_package.lst
    if exist sfl\sflini.h echo sfl\sflini.h>>_package.lst
    if exist sfl\sfllang.h echo sfl\sfllang.h>>_package.lst
    if exist sfl\sfllbuf.h echo sfl\sfllbuf.h>>_package.lst
    if exist sfl\sfllist.h echo sfl\sfllist.h>>_package.lst
    if exist sfl\sflmail.h echo sfl\sflmail.h>>_package.lst
    if exist sfl\sflmath.h echo sfl\sflmath.h>>_package.lst
    if exist sfl\sflmem.h echo sfl\sflmem.h>>_package.lst
    if exist sfl\sflmesg.h echo sfl\sflmesg.h>>_package.lst
    if exist sfl\sflmime.h echo sfl\sflmime.h>>_package.lst
    if exist sfl\sflnode.h echo sfl\sflnode.h>>_package.lst
    if exist sfl\sflprint.h echo sfl\sflprint.h>>_package.lst
    if exist sfl\sflproc.h echo sfl\sflproc.h>>_package.lst
    if exist sfl\sflsearch.h echo sfl\sflsearch.h>>_package.lst
    if exist sfl\sflsha.h echo sfl\sflsha.h>>_package.lst
    if exist sfl\sflslot.h echo sfl\sflslot.h>>_package.lst
    if exist sfl\sflsort.h echo sfl\sflsort.h>>_package.lst
    if exist sfl\sflstr.h echo sfl\sflstr.h>>_package.lst
    if exist sfl\sflsymb.h echo sfl\sflsymb.h>>_package.lst
    if exist sfl\sflsyst.h echo sfl\sflsyst.h>>_package.lst
    if exist sfl\sfltok.h echo sfl\sfltok.h>>_package.lst
    if exist sfl\sfltree.h echo sfl\sfltree.h>>_package.lst
    if exist sfl\sfltron.h echo sfl\sfltron.h>>_package.lst
    if exist sfl\sfluid.h echo sfl\sfluid.h>>_package.lst
    if exist sfl\sflxml.h echo sfl\sflxml.h>>_package.lst
    if exist sfl\sflxmll.h echo sfl\sflxmll.h>>_package.lst
    if exist sfl\sflxmls.h echo sfl\sflxmls.h>>_package.lst
    if exist sfl\sflsock.h echo sfl\sflsock.h>>_package.lst
    if exist sfl\sflcvst.l echo sfl\sflcvst.l>>_package.lst
    if exist sfl\sflcvst.i echo sfl\sflcvst.i>>_package.lst
    if exist sfl\sflcvst.d echo sfl\sflcvst.d>>_package.lst
    if exist sfl\sflscrit.l echo sfl\sflscrit.l>>_package.lst
    if exist sfl\sflscrit.i echo sfl\sflscrit.i>>_package.lst
    if exist sfl\sflscrit.d echo sfl\sflscrit.d>>_package.lst
    if exist sfl\sfl.h echo sfl\sfl.h>>_package.lst
    if exist sfl\stamp_generate echo sfl\stamp_generate>>_package.lst
    if exist sfl\boomakew.bat echo sfl\boomakew.bat>>_package.lst
    if exist sfl\configure echo sfl\configure>>_package.lst
    if exist sfl\Makefile.unix echo sfl\Makefile.unix>>_package.lst
    if exist sfl\boomake echo sfl\boomake>>_package.lst
    if exist sfl\configure.bat echo sfl\configure.bat>>_package.lst
    if exist sfl\Makefile.win32 echo sfl\Makefile.win32>>_package.lst
    if exist sfl\boomake.bat echo sfl\boomake.bat>>_package.lst
    if exist sfl\libsfl.vcproj echo sfl\libsfl.vcproj>>_package.lst
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    echo boom I: [sfl]: Building sfl-!MY_VERSION!-src.zip...
    zip  -rq _package -@<_package.lst
    unzip -q _package -d sfl-!MY_VERSION!
    if exist  sfl-!MY_VERSION!-src.zip del sfl-!MY_VERSION!-src.zip
    zip -rmq sfl-!MY_VERSION!-src.zip sfl-!MY_VERSION!
    del _package.zip
    del _package.lst
    del stamp_source
    goto :eof

:----------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

:a_check_all_source_files_exist
    if not exist version.h (
        echo boom E: [sfl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [sfl]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhead.h (
        echo boom E: [sfl]: sflhead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.c (
        echo boom E: [sfl]: sflbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.c (
        echo boom E: [sfl]: sflcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.c (
        echo boom E: [sfl]: sflcons.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.c (
        echo boom E: [sfl]: sflconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.c (
        echo boom E: [sfl]: sflcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.c (
        echo boom E: [sfl]: sfldate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.c (
        echo boom E: [sfl]: sfldescr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.c (
        echo boom E: [sfl]: sfldir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.c (
        echo boom E: [sfl]: sflenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.c (
        echo boom E: [sfl]: sflexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.c (
        echo boom E: [sfl]: sflfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.c (
        echo boom E: [sfl]: sflfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.c (
        echo boom E: [sfl]: sflfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.c (
        echo boom E: [sfl]: sflheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.c (
        echo boom E: [sfl]: sflhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.c (
        echo boom E: [sfl]: sflini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.c (
        echo boom E: [sfl]: sfllang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.c (
        echo boom E: [sfl]: sfllbuf.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.c (
        echo boom E: [sfl]: sfllist.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.c (
        echo boom E: [sfl]: sflmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.c (
        echo boom E: [sfl]: sflmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.c (
        echo boom E: [sfl]: sflmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.c (
        echo boom E: [sfl]: sflmesg.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.c (
        echo boom E: [sfl]: sflmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.c (
        echo boom E: [sfl]: sflnode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.c (
        echo boom E: [sfl]: sflprint.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.c (
        echo boom E: [sfl]: sflproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.c (
        echo boom E: [sfl]: sflsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.c (
        echo boom E: [sfl]: sflsha.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.c (
        echo boom E: [sfl]: sflslot.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.c (
        echo boom E: [sfl]: sflsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.c (
        echo boom E: [sfl]: sflstr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.c (
        echo boom E: [sfl]: sflsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.c (
        echo boom E: [sfl]: sflsyst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.c (
        echo boom E: [sfl]: sfltok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.c (
        echo boom E: [sfl]: sfltree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.c (
        echo boom E: [sfl]: sfltron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.c (
        echo boom E: [sfl]: sfluid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.c (
        echo boom E: [sfl]: sflxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.c (
        echo boom E: [sfl]: sflxmll.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.c (
        echo boom E: [sfl]: sflxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.c (
        echo boom E: [sfl]: sflsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvbs.c (
        echo boom E: [sfl]: sflcvbs.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvdp.c (
        echo boom E: [sfl]: sflcvdp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvds.c (
        echo boom E: [sfl]: sflcvds.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvns.c (
        echo boom E: [sfl]: sflcvns.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsb.c (
        echo boom E: [sfl]: sflcvsb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsd.c (
        echo boom E: [sfl]: sflcvsd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsn.c (
        echo boom E: [sfl]: sflcvsn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.c (
        echo boom E: [sfl]: sflcvst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvtp.c (
        echo boom E: [sfl]: sflcvtp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvts.c (
        echo boom E: [sfl]: sflcvts.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.c (
        echo boom E: [sfl]: sflscrit.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproco.imp (
        echo boom E: [sfl]: sflproco.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocu.imp (
        echo boom E: [sfl]: sflprocu.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocv.imp (
        echo boom E: [sfl]: sflprocv.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocw.imp (
        echo boom E: [sfl]: sflprocw.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.h (
        echo boom E: [sfl]: sflprocx.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.imp (
        echo boom E: [sfl]: sflprocx.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.c (
        echo boom E: [sfl]: testall.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testbits.c (
        echo boom E: [sfl]: testbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcgi.c (
        echo boom E: [sfl]: testcgi.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcomp.c (
        echo boom E: [sfl]: testcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.c (
        echo boom E: [sfl]: testconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcryp.c (
        echo boom E: [sfl]: testcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.c (
        echo boom E: [sfl]: testdate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.c (
        echo boom E: [sfl]: testdir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testenv.c (
        echo boom E: [sfl]: testenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testexdr.c (
        echo boom E: [sfl]: testexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.c (
        echo boom E: [sfl]: testfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfind.c (
        echo boom E: [sfl]: testfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.c (
        echo boom E: [sfl]: testfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testheap.c (
        echo boom E: [sfl]: testheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testhttp.c (
        echo boom E: [sfl]: testhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testini.c (
        echo boom E: [sfl]: testini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testlang.c (
        echo boom E: [sfl]: testlang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmem.c (
        echo boom E: [sfl]: testmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmime.c (
        echo boom E: [sfl]: testmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testproc.c (
        echo boom E: [sfl]: testproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.c (
        echo boom E: [sfl]: teststr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsym.c (
        echo boom E: [sfl]: testsym.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtok.c (
        echo boom E: [sfl]: testtok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtree.c (
        echo boom E: [sfl]: testtree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtron.c (
        echo boom E: [sfl]: testtron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testuid.c (
        echo boom E: [sfl]: testuid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxml.c (
        echo boom E: [sfl]: testxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxmls.c (
        echo boom E: [sfl]: testxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsearch.c (
        echo boom E: [sfl]: testsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.dat (
        echo boom E: [sfl]: testconv.dat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.txt (
        echo boom E: [sfl]: testfort.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist dos2unix.c (
        echo boom E: [sfl]: dos2unix.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [sfl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [sfl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.h (
        echo boom E: [sfl]: sflbits.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.h (
        echo boom E: [sfl]: sflcomp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.h (
        echo boom E: [sfl]: sflcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.h (
        echo boom E: [sfl]: sflconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.h (
        echo boom E: [sfl]: sflcryp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.h (
        echo boom E: [sfl]: sfldate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.h (
        echo boom E: [sfl]: sfldescr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.h (
        echo boom E: [sfl]: sfldir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.h (
        echo boom E: [sfl]: sflenv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.h (
        echo boom E: [sfl]: sflexdr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.h (
        echo boom E: [sfl]: sflfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.h (
        echo boom E: [sfl]: sflfind.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.h (
        echo boom E: [sfl]: sflfort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.h (
        echo boom E: [sfl]: sflheap.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.h (
        echo boom E: [sfl]: sflhttp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.h (
        echo boom E: [sfl]: sflini.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.h (
        echo boom E: [sfl]: sfllang.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.h (
        echo boom E: [sfl]: sfllbuf.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.h (
        echo boom E: [sfl]: sfllist.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.h (
        echo boom E: [sfl]: sflmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.h (
        echo boom E: [sfl]: sflmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.h (
        echo boom E: [sfl]: sflmem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.h (
        echo boom E: [sfl]: sflmesg.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.h (
        echo boom E: [sfl]: sflmime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.h (
        echo boom E: [sfl]: sflnode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.h (
        echo boom E: [sfl]: sflprint.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.h (
        echo boom E: [sfl]: sflproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.h (
        echo boom E: [sfl]: sflsearch.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.h (
        echo boom E: [sfl]: sflsha.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.h (
        echo boom E: [sfl]: sflslot.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.h (
        echo boom E: [sfl]: sflsort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.h (
        echo boom E: [sfl]: sflstr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.h (
        echo boom E: [sfl]: sflsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.h (
        echo boom E: [sfl]: sflsyst.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.h (
        echo boom E: [sfl]: sfltok.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.h (
        echo boom E: [sfl]: sfltree.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.h (
        echo boom E: [sfl]: sfltron.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.h (
        echo boom E: [sfl]: sfluid.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.h (
        echo boom E: [sfl]: sflxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.h (
        echo boom E: [sfl]: sflxmll.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.h (
        echo boom E: [sfl]: sflxmls.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.h (
        echo boom E: [sfl]: sflsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.l (
        echo boom E: [sfl]: sflcvst.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.i (
        echo boom E: [sfl]: sflcvst.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.d (
        echo boom E: [sfl]: sflcvst.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.l (
        echo boom E: [sfl]: sflscrit.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.i (
        echo boom E: [sfl]: sflscrit.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.d (
        echo boom E: [sfl]: sflscrit.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfl.h (
        echo boom E: [sfl]: sfl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [sfl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [sfl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [sfl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [sfl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [sfl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [sfl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [sfl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [sfl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libsfl.vcproj (
        echo boom E: [sfl]: libsfl.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK BINARY FILES EXIST   ------------------------

:a_check_binary_files_exist
    if not exist libsfl.lib (
        echo boom E: [sfl]: libsfl.lib is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [sfl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfl.h (
        echo boom E: [sfl]: sfl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:-------------------------   CHECK OPERATING CONTEXT   ------------------------

:a_check_operating_context
    set event=repository
    if exist stamp_source   set event=source
    if exist stamp_stripped set event=stripped
    goto :eof

:------------------------   CHECK PROJECT FILES EXIST   -----------------------

:a_check_project_files_exist
    if not exist version.h (
        echo boom E: [sfl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [sfl]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhead.h (
        echo boom E: [sfl]: sflhead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.c (
        echo boom E: [sfl]: sflbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.c (
        echo boom E: [sfl]: sflcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.c (
        echo boom E: [sfl]: sflcons.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.c (
        echo boom E: [sfl]: sflconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.c (
        echo boom E: [sfl]: sflcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.c (
        echo boom E: [sfl]: sfldate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.c (
        echo boom E: [sfl]: sfldescr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.c (
        echo boom E: [sfl]: sfldir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.c (
        echo boom E: [sfl]: sflenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.c (
        echo boom E: [sfl]: sflexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.c (
        echo boom E: [sfl]: sflfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.c (
        echo boom E: [sfl]: sflfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.c (
        echo boom E: [sfl]: sflfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.c (
        echo boom E: [sfl]: sflheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.c (
        echo boom E: [sfl]: sflhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.c (
        echo boom E: [sfl]: sflini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.c (
        echo boom E: [sfl]: sfllang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.c (
        echo boom E: [sfl]: sfllbuf.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.c (
        echo boom E: [sfl]: sfllist.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.c (
        echo boom E: [sfl]: sflmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.c (
        echo boom E: [sfl]: sflmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.c (
        echo boom E: [sfl]: sflmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.c (
        echo boom E: [sfl]: sflmesg.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.c (
        echo boom E: [sfl]: sflmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.c (
        echo boom E: [sfl]: sflnode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.c (
        echo boom E: [sfl]: sflprint.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.c (
        echo boom E: [sfl]: sflproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.c (
        echo boom E: [sfl]: sflsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.c (
        echo boom E: [sfl]: sflsha.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.c (
        echo boom E: [sfl]: sflslot.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.c (
        echo boom E: [sfl]: sflsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.c (
        echo boom E: [sfl]: sflstr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.c (
        echo boom E: [sfl]: sflsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.c (
        echo boom E: [sfl]: sflsyst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.c (
        echo boom E: [sfl]: sfltok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.c (
        echo boom E: [sfl]: sfltree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.c (
        echo boom E: [sfl]: sfltron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.c (
        echo boom E: [sfl]: sfluid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.c (
        echo boom E: [sfl]: sflxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.c (
        echo boom E: [sfl]: sflxmll.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.c (
        echo boom E: [sfl]: sflxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.c (
        echo boom E: [sfl]: sflsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvbs.c (
        echo boom E: [sfl]: sflcvbs.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvdp.c (
        echo boom E: [sfl]: sflcvdp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvds.c (
        echo boom E: [sfl]: sflcvds.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvns.c (
        echo boom E: [sfl]: sflcvns.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsb.c (
        echo boom E: [sfl]: sflcvsb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsd.c (
        echo boom E: [sfl]: sflcvsd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsn.c (
        echo boom E: [sfl]: sflcvsn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.c (
        echo boom E: [sfl]: sflcvst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvtp.c (
        echo boom E: [sfl]: sflcvtp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvts.c (
        echo boom E: [sfl]: sflcvts.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.c (
        echo boom E: [sfl]: sflscrit.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproco.imp (
        echo boom E: [sfl]: sflproco.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocu.imp (
        echo boom E: [sfl]: sflprocu.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocv.imp (
        echo boom E: [sfl]: sflprocv.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocw.imp (
        echo boom E: [sfl]: sflprocw.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.h (
        echo boom E: [sfl]: sflprocx.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.imp (
        echo boom E: [sfl]: sflprocx.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.c (
        echo boom E: [sfl]: testall.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testbits.c (
        echo boom E: [sfl]: testbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcgi.c (
        echo boom E: [sfl]: testcgi.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcomp.c (
        echo boom E: [sfl]: testcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.c (
        echo boom E: [sfl]: testconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcryp.c (
        echo boom E: [sfl]: testcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.c (
        echo boom E: [sfl]: testdate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.c (
        echo boom E: [sfl]: testdir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testenv.c (
        echo boom E: [sfl]: testenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testexdr.c (
        echo boom E: [sfl]: testexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.c (
        echo boom E: [sfl]: testfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfind.c (
        echo boom E: [sfl]: testfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.c (
        echo boom E: [sfl]: testfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testheap.c (
        echo boom E: [sfl]: testheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testhttp.c (
        echo boom E: [sfl]: testhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testini.c (
        echo boom E: [sfl]: testini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testlang.c (
        echo boom E: [sfl]: testlang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmem.c (
        echo boom E: [sfl]: testmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmime.c (
        echo boom E: [sfl]: testmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testproc.c (
        echo boom E: [sfl]: testproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.c (
        echo boom E: [sfl]: teststr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsym.c (
        echo boom E: [sfl]: testsym.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtok.c (
        echo boom E: [sfl]: testtok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtree.c (
        echo boom E: [sfl]: testtree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtron.c (
        echo boom E: [sfl]: testtron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testuid.c (
        echo boom E: [sfl]: testuid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxml.c (
        echo boom E: [sfl]: testxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxmls.c (
        echo boom E: [sfl]: testxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsearch.c (
        echo boom E: [sfl]: testsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.dat (
        echo boom E: [sfl]: testconv.dat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.txt (
        echo boom E: [sfl]: testfort.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist dos2unix.c (
        echo boom E: [sfl]: dos2unix.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [sfl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [sfl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.h (
        echo boom E: [sfl]: sflbits.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.h (
        echo boom E: [sfl]: sflcomp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.h (
        echo boom E: [sfl]: sflcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.h (
        echo boom E: [sfl]: sflconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.h (
        echo boom E: [sfl]: sflcryp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.h (
        echo boom E: [sfl]: sfldate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.h (
        echo boom E: [sfl]: sfldescr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.h (
        echo boom E: [sfl]: sfldir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.h (
        echo boom E: [sfl]: sflenv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.h (
        echo boom E: [sfl]: sflexdr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.h (
        echo boom E: [sfl]: sflfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.h (
        echo boom E: [sfl]: sflfind.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.h (
        echo boom E: [sfl]: sflfort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.h (
        echo boom E: [sfl]: sflheap.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.h (
        echo boom E: [sfl]: sflhttp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.h (
        echo boom E: [sfl]: sflini.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.h (
        echo boom E: [sfl]: sfllang.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.h (
        echo boom E: [sfl]: sfllbuf.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.h (
        echo boom E: [sfl]: sfllist.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.h (
        echo boom E: [sfl]: sflmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.h (
        echo boom E: [sfl]: sflmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.h (
        echo boom E: [sfl]: sflmem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.h (
        echo boom E: [sfl]: sflmesg.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.h (
        echo boom E: [sfl]: sflmime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.h (
        echo boom E: [sfl]: sflnode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.h (
        echo boom E: [sfl]: sflprint.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.h (
        echo boom E: [sfl]: sflproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.h (
        echo boom E: [sfl]: sflsearch.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.h (
        echo boom E: [sfl]: sflsha.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.h (
        echo boom E: [sfl]: sflslot.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.h (
        echo boom E: [sfl]: sflsort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.h (
        echo boom E: [sfl]: sflstr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.h (
        echo boom E: [sfl]: sflsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.h (
        echo boom E: [sfl]: sflsyst.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.h (
        echo boom E: [sfl]: sfltok.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.h (
        echo boom E: [sfl]: sfltree.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.h (
        echo boom E: [sfl]: sfltron.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.h (
        echo boom E: [sfl]: sfluid.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.h (
        echo boom E: [sfl]: sflxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.h (
        echo boom E: [sfl]: sflxmll.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.h (
        echo boom E: [sfl]: sflxmls.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.h (
        echo boom E: [sfl]: sflsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.l (
        echo boom E: [sfl]: sflcvst.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.l (
        echo boom E: [sfl]: sflscrit.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [sfl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [sfl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [sfl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:------------------------   CHECK SOURCE FILES EXIST   ------------------------

:a_check_source_files_exist
    if not exist version.h (
        echo boom E: [sfl]: version.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist prelude.h (
        echo boom E: [sfl]: prelude.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhead.h (
        echo boom E: [sfl]: sflhead.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.c (
        echo boom E: [sfl]: sflbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.c (
        echo boom E: [sfl]: sflcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.c (
        echo boom E: [sfl]: sflcons.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.c (
        echo boom E: [sfl]: sflconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.c (
        echo boom E: [sfl]: sflcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.c (
        echo boom E: [sfl]: sfldate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.c (
        echo boom E: [sfl]: sfldescr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.c (
        echo boom E: [sfl]: sfldir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.c (
        echo boom E: [sfl]: sflenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.c (
        echo boom E: [sfl]: sflexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.c (
        echo boom E: [sfl]: sflfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.c (
        echo boom E: [sfl]: sflfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.c (
        echo boom E: [sfl]: sflfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.c (
        echo boom E: [sfl]: sflheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.c (
        echo boom E: [sfl]: sflhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.c (
        echo boom E: [sfl]: sflini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.c (
        echo boom E: [sfl]: sfllang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.c (
        echo boom E: [sfl]: sfllbuf.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.c (
        echo boom E: [sfl]: sfllist.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.c (
        echo boom E: [sfl]: sflmail.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.c (
        echo boom E: [sfl]: sflmath.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.c (
        echo boom E: [sfl]: sflmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.c (
        echo boom E: [sfl]: sflmesg.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.c (
        echo boom E: [sfl]: sflmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.c (
        echo boom E: [sfl]: sflnode.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.c (
        echo boom E: [sfl]: sflprint.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.c (
        echo boom E: [sfl]: sflproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.c (
        echo boom E: [sfl]: sflsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.c (
        echo boom E: [sfl]: sflsha.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.c (
        echo boom E: [sfl]: sflslot.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.c (
        echo boom E: [sfl]: sflsort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.c (
        echo boom E: [sfl]: sflstr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.c (
        echo boom E: [sfl]: sflsymb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.c (
        echo boom E: [sfl]: sflsyst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.c (
        echo boom E: [sfl]: sfltok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.c (
        echo boom E: [sfl]: sfltree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.c (
        echo boom E: [sfl]: sfltron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.c (
        echo boom E: [sfl]: sfluid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.c (
        echo boom E: [sfl]: sflxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.c (
        echo boom E: [sfl]: sflxmll.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.c (
        echo boom E: [sfl]: sflxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.c (
        echo boom E: [sfl]: sflsock.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvbs.c (
        echo boom E: [sfl]: sflcvbs.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvdp.c (
        echo boom E: [sfl]: sflcvdp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvds.c (
        echo boom E: [sfl]: sflcvds.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvns.c (
        echo boom E: [sfl]: sflcvns.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsb.c (
        echo boom E: [sfl]: sflcvsb.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsd.c (
        echo boom E: [sfl]: sflcvsd.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvsn.c (
        echo boom E: [sfl]: sflcvsn.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.c (
        echo boom E: [sfl]: sflcvst.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvtp.c (
        echo boom E: [sfl]: sflcvtp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvts.c (
        echo boom E: [sfl]: sflcvts.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.c (
        echo boom E: [sfl]: sflscrit.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproco.imp (
        echo boom E: [sfl]: sflproco.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocu.imp (
        echo boom E: [sfl]: sflprocu.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocv.imp (
        echo boom E: [sfl]: sflprocv.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocw.imp (
        echo boom E: [sfl]: sflprocw.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.h (
        echo boom E: [sfl]: sflprocx.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprocx.imp (
        echo boom E: [sfl]: sflprocx.imp is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testall.c (
        echo boom E: [sfl]: testall.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testbits.c (
        echo boom E: [sfl]: testbits.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcgi.c (
        echo boom E: [sfl]: testcgi.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcomp.c (
        echo boom E: [sfl]: testcomp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.c (
        echo boom E: [sfl]: testconv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testcryp.c (
        echo boom E: [sfl]: testcryp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdate.c (
        echo boom E: [sfl]: testdate.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testdir.c (
        echo boom E: [sfl]: testdir.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testenv.c (
        echo boom E: [sfl]: testenv.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testexdr.c (
        echo boom E: [sfl]: testexdr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfile.c (
        echo boom E: [sfl]: testfile.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfind.c (
        echo boom E: [sfl]: testfind.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.c (
        echo boom E: [sfl]: testfort.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testheap.c (
        echo boom E: [sfl]: testheap.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testhttp.c (
        echo boom E: [sfl]: testhttp.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testini.c (
        echo boom E: [sfl]: testini.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testlang.c (
        echo boom E: [sfl]: testlang.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmem.c (
        echo boom E: [sfl]: testmem.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testmime.c (
        echo boom E: [sfl]: testmime.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testproc.c (
        echo boom E: [sfl]: testproc.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist teststr.c (
        echo boom E: [sfl]: teststr.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsym.c (
        echo boom E: [sfl]: testsym.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtok.c (
        echo boom E: [sfl]: testtok.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtree.c (
        echo boom E: [sfl]: testtree.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testtron.c (
        echo boom E: [sfl]: testtron.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testuid.c (
        echo boom E: [sfl]: testuid.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxml.c (
        echo boom E: [sfl]: testxml.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testxmls.c (
        echo boom E: [sfl]: testxmls.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testsearch.c (
        echo boom E: [sfl]: testsearch.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testconv.dat (
        echo boom E: [sfl]: testconv.dat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist testfort.txt (
        echo boom E: [sfl]: testfort.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist dos2unix.c (
        echo boom E: [sfl]: dos2unix.c is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist project.pdl (
        echo boom E: [sfl]: project.pdl is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist readme.txt (
        echo boom E: [sfl]: readme.txt is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflbits.h (
        echo boom E: [sfl]: sflbits.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcomp.h (
        echo boom E: [sfl]: sflcomp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcons.h (
        echo boom E: [sfl]: sflcons.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflconv.h (
        echo boom E: [sfl]: sflconv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcryp.h (
        echo boom E: [sfl]: sflcryp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldate.h (
        echo boom E: [sfl]: sfldate.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldescr.h (
        echo boom E: [sfl]: sfldescr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfldir.h (
        echo boom E: [sfl]: sfldir.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflenv.h (
        echo boom E: [sfl]: sflenv.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflexdr.h (
        echo boom E: [sfl]: sflexdr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfile.h (
        echo boom E: [sfl]: sflfile.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfind.h (
        echo boom E: [sfl]: sflfind.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflfort.h (
        echo boom E: [sfl]: sflfort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflheap.h (
        echo boom E: [sfl]: sflheap.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflhttp.h (
        echo boom E: [sfl]: sflhttp.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflini.h (
        echo boom E: [sfl]: sflini.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllang.h (
        echo boom E: [sfl]: sfllang.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllbuf.h (
        echo boom E: [sfl]: sfllbuf.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfllist.h (
        echo boom E: [sfl]: sfllist.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmail.h (
        echo boom E: [sfl]: sflmail.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmath.h (
        echo boom E: [sfl]: sflmath.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmem.h (
        echo boom E: [sfl]: sflmem.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmesg.h (
        echo boom E: [sfl]: sflmesg.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflmime.h (
        echo boom E: [sfl]: sflmime.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflnode.h (
        echo boom E: [sfl]: sflnode.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflprint.h (
        echo boom E: [sfl]: sflprint.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflproc.h (
        echo boom E: [sfl]: sflproc.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsearch.h (
        echo boom E: [sfl]: sflsearch.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsha.h (
        echo boom E: [sfl]: sflsha.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflslot.h (
        echo boom E: [sfl]: sflslot.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsort.h (
        echo boom E: [sfl]: sflsort.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflstr.h (
        echo boom E: [sfl]: sflstr.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsymb.h (
        echo boom E: [sfl]: sflsymb.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsyst.h (
        echo boom E: [sfl]: sflsyst.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltok.h (
        echo boom E: [sfl]: sfltok.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltree.h (
        echo boom E: [sfl]: sfltree.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfltron.h (
        echo boom E: [sfl]: sfltron.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfluid.h (
        echo boom E: [sfl]: sfluid.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxml.h (
        echo boom E: [sfl]: sflxml.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmll.h (
        echo boom E: [sfl]: sflxmll.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflxmls.h (
        echo boom E: [sfl]: sflxmls.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflsock.h (
        echo boom E: [sfl]: sflsock.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.l (
        echo boom E: [sfl]: sflcvst.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.i (
        echo boom E: [sfl]: sflcvst.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflcvst.d (
        echo boom E: [sfl]: sflcvst.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.l (
        echo boom E: [sfl]: sflscrit.l is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.i (
        echo boom E: [sfl]: sflscrit.i is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sflscrit.d (
        echo boom E: [sfl]: sflscrit.d is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist sfl.h (
        echo boom E: [sfl]: sfl.h is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist stamp_generate (
        echo boom E: [sfl]: stamp_generate is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomakew.bat (
        echo boom E: [sfl]: boomakew.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure (
        echo boom E: [sfl]: configure is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.unix (
        echo boom E: [sfl]: Makefile.unix is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake (
        echo boom E: [sfl]: boomake is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist configure.bat (
        echo boom E: [sfl]: configure.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist Makefile.win32 (
        echo boom E: [sfl]: Makefile.win32 is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist boomake.bat (
        echo boom E: [sfl]: boomake.bat is missing, cannot continue
        set _exception=1
        goto :eof
    )
    if not exist libsfl.vcproj (
        echo boom E: [sfl]: libsfl.vcproj is missing, cannot continue
        set _exception=1
        goto :eof
    )
    goto :eof

:--------------------------   INSTALL DELIVERABLES   --------------------------

:a_install_deliverables
    echo boom I: [sfl]: installing SFL into !_INSTALL_ROOT!...
    if not exist !_INSTALL_ROOT! mkdir !_INSTALL_ROOT!
    if not exist !_INSTALL_ROOT!\lib\nul mkdir !_INSTALL_ROOT!\lib\
    if "!BOOM_TRACE!"=="1" echo copy/y libsfl.lib !_INSTALL_ROOT!\lib\>nul
    verify>nul
    call copy/y libsfl.lib !_INSTALL_ROOT!\lib\>nul
    if errorlevel 1 (
        echo boom E: [sfl]: 'copy/y libsfl.lib !_INSTALL_ROOT!\lib\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\bin\nul mkdir !_INSTALL_ROOT!\bin\
    if not exist !_INSTALL_ROOT!\doc\SFL\nul mkdir !_INSTALL_ROOT!\doc\SFL\
    if "!BOOM_TRACE!"=="1" echo copy/y readme.txt !_INSTALL_ROOT!\doc\SFL\>nul
    verify>nul
    call copy/y readme.txt !_INSTALL_ROOT!\doc\SFL\>nul
    if errorlevel 1 (
        echo boom E: [sfl]: 'copy/y readme.txt !_INSTALL_ROOT!\doc\SFL\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if not exist !_INSTALL_ROOT!\include\nul mkdir !_INSTALL_ROOT!\include\
    if "!BOOM_TRACE!"=="1" echo copy/y sfl.h !_INSTALL_ROOT!\include\>nul
    verify>nul
    call copy/y sfl.h !_INSTALL_ROOT!\include\>nul
    if errorlevel 1 (
        echo boom E: [sfl]: 'copy/y sfl.h !_INSTALL_ROOT!\include\>nul' failed - stop.
        set _exception=1
        goto :eof
    )
    if exist installer.bat (
    if "!BOOM_TRACE!"=="1" echo installer
    verify>nul
    call installer
    if errorlevel 1 (
        echo boom E: [sfl]: 'installer' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   PRODUCE ALL GENERATED FILES   ----------------------

:a_produce_all_generated_files
    echo boom I: [sfl]: Generating files...
    if exist sfl.h del sfl.h
    if "!BOOM_TRACE!"=="1" echo type sflhead.h>>sfl.h
    verify>nul
    call type sflhead.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflhead.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type prelude.h>>sfl.h
    verify>nul
    call type prelude.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type prelude.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflbits.h>>sfl.h
    verify>nul
    call type sflbits.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflbits.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcomp.h>>sfl.h
    verify>nul
    call type sflcomp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcomp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcons.h>>sfl.h
    verify>nul
    call type sflcons.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcons.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflconv.h>>sfl.h
    verify>nul
    call type sflconv.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflconv.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcryp.h>>sfl.h
    verify>nul
    call type sflcryp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcryp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldate.h>>sfl.h
    verify>nul
    call type sfldate.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldate.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldescr.h>>sfl.h
    verify>nul
    call type sfldescr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldescr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflexdr.h>>sfl.h
    verify>nul
    call type sflexdr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflexdr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfile.h>>sfl.h
    verify>nul
    call type sflfile.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfile.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfind.h>>sfl.h
    verify>nul
    call type sflfind.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfind.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfort.h>>sfl.h
    verify>nul
    call type sflfort.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfort.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflheap.h>>sfl.h
    verify>nul
    call type sflheap.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflheap.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllang.h>>sfl.h
    verify>nul
    call type sfllang.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllang.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllbuf.h>>sfl.h
    verify>nul
    call type sfllbuf.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllbuf.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllist.h>>sfl.h
    verify>nul
    call type sfllist.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllist.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflnode.h>>sfl.h
    verify>nul
    call type sflnode.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflnode.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmath.h>>sfl.h
    verify>nul
    call type sflmath.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmath.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmem.h>>sfl.h
    verify>nul
    call type sflmem.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmem.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmesg.h>>sfl.h
    verify>nul
    call type sflmesg.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmesg.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmime.h>>sfl.h
    verify>nul
    call type sflmime.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmime.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflnode.h>>sfl.h
    verify>nul
    call type sflnode.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflnode.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldir.h>>sfl.h
    verify>nul
    call type sfldir.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldir.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflslot.h>>sfl.h
    verify>nul
    call type sflslot.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflslot.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsock.h>>sfl.h
    verify>nul
    call type sflsock.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsock.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmail.h>>sfl.h
    verify>nul
    call type sflmail.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmail.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsort.h>>sfl.h
    verify>nul
    call type sflsort.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsort.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsha.h>>sfl.h
    verify>nul
    call type sflsha.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsha.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflstr.h>>sfl.h
    verify>nul
    call type sflstr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflstr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsymb.h>>sfl.h
    verify>nul
    call type sflsymb.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsymb.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflproc.h>>sfl.h
    verify>nul
    call type sflproc.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflproc.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflprint.h>>sfl.h
    verify>nul
    call type sflprint.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflprint.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsyst.h>>sfl.h
    verify>nul
    call type sflsyst.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsyst.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsearch.h>>sfl.h
    verify>nul
    call type sflsearch.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsearch.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflhttp.h>>sfl.h
    verify>nul
    call type sflhttp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflhttp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflini.h>>sfl.h
    verify>nul
    call type sflini.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflini.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflenv.h>>sfl.h
    verify>nul
    call type sflenv.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflenv.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltok.h>>sfl.h
    verify>nul
    call type sfltok.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltok.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltree.h>>sfl.h
    verify>nul
    call type sfltree.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltree.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltron.h>>sfl.h
    verify>nul
    call type sfltron.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltron.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfluid.h>>sfl.h
    verify>nul
    call type sfluid.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfluid.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxml.h>>sfl.h
    verify>nul
    call type sflxml.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxml.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxmll.h>>sfl.h
    verify>nul
    call type sflxmll.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxmll.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxmls.h>>sfl.h
    verify>nul
    call type sflxmls.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxmls.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet sflcvst.l
    verify>nul
    call lr -quiet sflcvst.l
    if errorlevel 1 (
        echo boom E: [sfl]: 'lr -quiet sflcvst.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet sflscrit.l
    verify>nul
    call lr -quiet sflscrit.l
    if errorlevel 1 (
        echo boom E: [sfl]: 'lr -quiet sflscrit.l' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:-------------------------   PRODUCE GENERATED FILES   ------------------------

:a_produce_generated_files
    echo boom I: [sfl]: Generating files...
    if exist sfl.h del sfl.h
    if "!BOOM_TRACE!"=="1" echo type sflhead.h>>sfl.h
    verify>nul
    call type sflhead.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflhead.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type prelude.h>>sfl.h
    verify>nul
    call type prelude.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type prelude.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflbits.h>>sfl.h
    verify>nul
    call type sflbits.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflbits.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcomp.h>>sfl.h
    verify>nul
    call type sflcomp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcomp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcons.h>>sfl.h
    verify>nul
    call type sflcons.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcons.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflconv.h>>sfl.h
    verify>nul
    call type sflconv.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflconv.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflcryp.h>>sfl.h
    verify>nul
    call type sflcryp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflcryp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldate.h>>sfl.h
    verify>nul
    call type sfldate.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldate.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldescr.h>>sfl.h
    verify>nul
    call type sfldescr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldescr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflexdr.h>>sfl.h
    verify>nul
    call type sflexdr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflexdr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfile.h>>sfl.h
    verify>nul
    call type sflfile.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfile.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfind.h>>sfl.h
    verify>nul
    call type sflfind.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfind.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflfort.h>>sfl.h
    verify>nul
    call type sflfort.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflfort.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflheap.h>>sfl.h
    verify>nul
    call type sflheap.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflheap.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllang.h>>sfl.h
    verify>nul
    call type sfllang.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllang.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllbuf.h>>sfl.h
    verify>nul
    call type sfllbuf.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllbuf.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfllist.h>>sfl.h
    verify>nul
    call type sfllist.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfllist.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflnode.h>>sfl.h
    verify>nul
    call type sflnode.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflnode.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmath.h>>sfl.h
    verify>nul
    call type sflmath.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmath.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmem.h>>sfl.h
    verify>nul
    call type sflmem.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmem.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmesg.h>>sfl.h
    verify>nul
    call type sflmesg.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmesg.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmime.h>>sfl.h
    verify>nul
    call type sflmime.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmime.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflnode.h>>sfl.h
    verify>nul
    call type sflnode.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflnode.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfldir.h>>sfl.h
    verify>nul
    call type sfldir.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfldir.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflslot.h>>sfl.h
    verify>nul
    call type sflslot.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflslot.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsock.h>>sfl.h
    verify>nul
    call type sflsock.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsock.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflmail.h>>sfl.h
    verify>nul
    call type sflmail.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflmail.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsort.h>>sfl.h
    verify>nul
    call type sflsort.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsort.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsha.h>>sfl.h
    verify>nul
    call type sflsha.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsha.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflstr.h>>sfl.h
    verify>nul
    call type sflstr.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflstr.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsymb.h>>sfl.h
    verify>nul
    call type sflsymb.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsymb.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflproc.h>>sfl.h
    verify>nul
    call type sflproc.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflproc.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflprint.h>>sfl.h
    verify>nul
    call type sflprint.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflprint.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsyst.h>>sfl.h
    verify>nul
    call type sflsyst.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsyst.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflsearch.h>>sfl.h
    verify>nul
    call type sflsearch.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflsearch.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflhttp.h>>sfl.h
    verify>nul
    call type sflhttp.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflhttp.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflini.h>>sfl.h
    verify>nul
    call type sflini.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflini.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflenv.h>>sfl.h
    verify>nul
    call type sflenv.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflenv.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltok.h>>sfl.h
    verify>nul
    call type sfltok.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltok.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltree.h>>sfl.h
    verify>nul
    call type sfltree.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltree.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfltron.h>>sfl.h
    verify>nul
    call type sfltron.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfltron.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sfluid.h>>sfl.h
    verify>nul
    call type sfluid.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sfluid.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxml.h>>sfl.h
    verify>nul
    call type sflxml.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxml.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxmll.h>>sfl.h
    verify>nul
    call type sflxmll.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxmll.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo type sflxmls.h>>sfl.h
    verify>nul
    call type sflxmls.h>>sfl.h
    if errorlevel 1 (
        echo boom E: [sfl]: 'type sflxmls.h>>sfl.h' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet sflcvst.l
    verify>nul
    call lr -quiet sflcvst.l
    if errorlevel 1 (
        echo boom E: [sfl]: 'lr -quiet sflcvst.l' failed - stop.
        set _exception=1
        goto :eof
    )
    if "!BOOM_TRACE!"=="1" echo lr -quiet sflscrit.l
    verify>nul
    call lr -quiet sflscrit.l
    if errorlevel 1 (
        echo boom E: [sfl]: 'lr -quiet sflscrit.l' failed - stop.
        set _exception=1
        goto :eof
    )
    echo Source files successfully generated>stamp_generate
    goto :eof

:------------------------   REMOVE GENERATED BINARIES   -----------------------

:a_remove_generated_binaries
    if exist libsfl.lib del libsfl.lib
    if exist sflbits.obj del sflbits.obj
    if exist sflcomp.obj del sflcomp.obj
    if exist sflcons.obj del sflcons.obj
    if exist sflconv.obj del sflconv.obj
    if exist sflcryp.obj del sflcryp.obj
    if exist sfldate.obj del sfldate.obj
    if exist sfldescr.obj del sfldescr.obj
    if exist sfldir.obj del sfldir.obj
    if exist sflenv.obj del sflenv.obj
    if exist sflexdr.obj del sflexdr.obj
    if exist sflfile.obj del sflfile.obj
    if exist sflfind.obj del sflfind.obj
    if exist sflfort.obj del sflfort.obj
    if exist sflheap.obj del sflheap.obj
    if exist sflhttp.obj del sflhttp.obj
    if exist sflini.obj del sflini.obj
    if exist sfllang.obj del sfllang.obj
    if exist sfllbuf.obj del sfllbuf.obj
    if exist sfllist.obj del sfllist.obj
    if exist sflmail.obj del sflmail.obj
    if exist sflmath.obj del sflmath.obj
    if exist sflmem.obj del sflmem.obj
    if exist sflmesg.obj del sflmesg.obj
    if exist sflmime.obj del sflmime.obj
    if exist sflnode.obj del sflnode.obj
    if exist sflprint.obj del sflprint.obj
    if exist sflproc.obj del sflproc.obj
    if exist sflsearch.obj del sflsearch.obj
    if exist sflsha.obj del sflsha.obj
    if exist sflslot.obj del sflslot.obj
    if exist sflsort.obj del sflsort.obj
    if exist sflstr.obj del sflstr.obj
    if exist sflsymb.obj del sflsymb.obj
    if exist sflsyst.obj del sflsyst.obj
    if exist sfltok.obj del sfltok.obj
    if exist sfltree.obj del sfltree.obj
    if exist sfltron.obj del sfltron.obj
    if exist sfluid.obj del sfluid.obj
    if exist sflxml.obj del sflxml.obj
    if exist sflxmll.obj del sflxmll.obj
    if exist sflxmls.obj del sflxmls.obj
    if exist sflsock.obj del sflsock.obj
    if exist sflcvbs.obj del sflcvbs.obj
    if exist sflcvdp.obj del sflcvdp.obj
    if exist sflcvds.obj del sflcvds.obj
    if exist sflcvns.obj del sflcvns.obj
    if exist sflcvsb.obj del sflcvsb.obj
    if exist sflcvsd.obj del sflcvsd.obj
    if exist sflcvsn.obj del sflcvsn.obj
    if exist sflcvst.obj del sflcvst.obj
    if exist sflcvtp.obj del sflcvtp.obj
    if exist sflcvts.obj del sflcvts.obj
    if exist sflscrit.obj del sflscrit.obj
    if exist testall.obj del testall.obj
    if exist testall.exe del testall.exe
    if exist testbits.obj del testbits.obj
    if exist testbits.exe del testbits.exe
    if exist testcgi.obj del testcgi.obj
    if exist testcgi.exe del testcgi.exe
    if exist testcomp.obj del testcomp.obj
    if exist testcomp.exe del testcomp.exe
    if exist testconv.obj del testconv.obj
    if exist testconv.exe del testconv.exe
    if exist testcryp.obj del testcryp.obj
    if exist testcryp.exe del testcryp.exe
    if exist testdate.obj del testdate.obj
    if exist testdate.exe del testdate.exe
    if exist testdir.obj del testdir.obj
    if exist testdir.exe del testdir.exe
    if exist testenv.obj del testenv.obj
    if exist testenv.exe del testenv.exe
    if exist testexdr.obj del testexdr.obj
    if exist testexdr.exe del testexdr.exe
    if exist testfile.obj del testfile.obj
    if exist testfile.exe del testfile.exe
    if exist testfind.obj del testfind.obj
    if exist testfind.exe del testfind.exe
    if exist testfort.obj del testfort.obj
    if exist testfort.exe del testfort.exe
    if exist testheap.obj del testheap.obj
    if exist testheap.exe del testheap.exe
    if exist testhttp.obj del testhttp.obj
    if exist testhttp.exe del testhttp.exe
    if exist testini.obj del testini.obj
    if exist testini.exe del testini.exe
    if exist testlang.obj del testlang.obj
    if exist testlang.exe del testlang.exe
    if exist testmem.obj del testmem.obj
    if exist testmem.exe del testmem.exe
    if exist testmime.obj del testmime.obj
    if exist testmime.exe del testmime.exe
    if exist testproc.obj del testproc.obj
    if exist testproc.exe del testproc.exe
    if exist teststr.obj del teststr.obj
    if exist teststr.exe del teststr.exe
    if exist testsym.obj del testsym.obj
    if exist testsym.exe del testsym.exe
    if exist testtok.obj del testtok.obj
    if exist testtok.exe del testtok.exe
    if exist testtree.obj del testtree.obj
    if exist testtree.exe del testtree.exe
    if exist testtron.obj del testtron.obj
    if exist testtron.exe del testtron.exe
    if exist testuid.obj del testuid.obj
    if exist testuid.exe del testuid.exe
    if exist testxml.obj del testxml.obj
    if exist testxml.exe del testxml.exe
    if exist testxmls.obj del testxmls.obj
    if exist testxmls.exe del testxmls.exe
    if exist testsearch.obj del testsearch.obj
    if exist testsearch.exe del testsearch.exe
    if exist dos2unix.obj del dos2unix.obj
    if exist dos2unix.exe del dos2unix.exe
    if exist vc60.pdb del vc60.pdb
    goto :eof

:------------------------   REMOVE GENERATED SOURCES   ------------------------

:a_remove_generated_sources
    if exist sflcvst.i del sflcvst.i
    if exist sflcvst.d del sflcvst.d
    if exist sflscrit.i del sflscrit.i
    if exist sflscrit.d del sflscrit.d
    if exist sfl.h del sfl.h
    if exist stamp_generate del stamp_generate
    if exist configure del configure
    if exist Makefile.unix del Makefile.unix
    if exist configure.bat del configure.bat
    if exist Makefile.win32 del Makefile.win32
    if exist libsfl.vcproj del libsfl.vcproj
    if exist sfl_*.zip del sfl_*.zip
    goto :eof

:-------------------------   REPORT HELP INFORMATION   ------------------------

:a_report_help_information
    echo The commands you can currently use on this project are:
    echo.
    goto r_!state!
    goto :eof

:-------------------------   REPORT PROJECT VERSION   -------------------------

:a_report_project_version
    echo sfl-3.31
    goto :eof

:--------------------------   RUN REGRESSION TESTS   --------------------------

:a_run_regression_tests
    :-  Run local selftest script if present
    if exist selftest.bat (
    if "!BOOM_TRACE!"=="1" echo selftest
    verify>nul
    call selftest
    if errorlevel 1 (
        echo boom E: [sfl]: 'selftest' failed - stop.
        set _exception=1
        goto :eof
    )
    )
    goto :eof

:-----------------------   USE SOURCE CONTROL REVISION   ----------------------

:a_use_source_control_revision
    set SVN_REVISION=svn
    if exist .svn
ul (
        for /f "usebackq tokens=1,2 delims=: " %%v in (`svn info`) do if "%%v"=="Revision" set SVN_REVISION=%%w
    )
    set MY_VERSION=!MY_VERSION!-!SVN_REVISION!
    goto :eof

:s_initial
    if "!debug!"=="1" echo State: initial
    if "!event!"=="" goto s_1_empty
    if "!event!"=="ok" goto s_1_1
    goto s_win32
:s_1_1
    if "!debug!"=="1" echo Event: ok
    set event=
    if "!debug!"=="1" echo Action: check operating context
    set _exception=
    call :a_check_operating_context
    if "!_exception!"=="1" exit /b 1
    set state=initial_check
    goto s_!state!
:s_1_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial
:r_initial
    goto r_win32

:s_initial_check
    if "!debug!"=="1" echo State: initial check
    if "!event!"=="" goto s_2_empty
    if "!event!"=="repository" goto s_2_1
    if "!event!"=="source" goto s_2_2
    if "!event!"=="stripped" goto s_2_3
    goto s_win32
:s_2_1
    if "!debug!"=="1" echo Event: repository
    set event=
    set state=repository
    goto s_!state!
:s_2_2
    if "!debug!"=="1" echo Event: source
    set event=
    set state=source
    goto s_!state!
:s_2_3
    if "!debug!"=="1" echo Event: stripped
    set event=
    set state=stripped
    goto s_!state!
:s_2_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_initial_check
:r_initial_check
    goto r_win32

:s_repository
    if "!debug!"=="1" echo State: repository
    if "!event!"=="" goto s_3_empty
    if "!event!"=="build" goto s_3_1
    if "!event!"=="compile" goto s_3_2
    if "!event!"=="clean" goto s_3_3
    if "!event!"=="regen" goto s_3_4
    if "!event!"=="allgen" goto s_3_5
    if "!event!"=="distrib" goto s_3_6
    if "!event!"=="distsrc" goto s_3_7
    if "!event!"=="distrev" goto s_3_8
    goto s_default
:s_3_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_2
    if "!debug!"=="1" echo Event: compile
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_3
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated sources
    set _exception=
    call :a_remove_generated_sources
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_4
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_5
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_6
    if "!debug!"=="1" echo Event: distrib
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_7
    if "!debug!"=="1" echo Event: distsrc
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_8
    if "!debug!"=="1" echo Event: distrev
    set event=
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: check all source files exist
    set _exception=
    call :a_check_all_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: use source control revision
    set _exception=
    call :a_use_source_control_revision
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build source packages
    set _exception=
    call :a_build_source_packages
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_3_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_repository
:r_repository
echo build:
    echo   From the raw project sources, produces all generated files, and
    echo     compiles all source files.
echo compile:
    echo   From the raw project sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the raw project sources, removes all generated
    echo     source and binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
echo distrib:
    echo   Creates a source distribution for the project.  Note that binary
    echo     distributions can only be created at the product level.
echo distsrc:
    echo   Equivalent to distrib, provided for compatibility.
echo distrev:
    echo   Creates a source distribution for the project.  Builds distribution
    echo     packages based on source control version number. Note that binary
    echo     distributions can only be created at the product level.
    goto r_default

:s_source
    if "!debug!"=="1" echo State: source
    if "!event!"=="" goto s_4_empty
    if "!event!"=="build" goto s_4_1
    if "!event!"=="clean" goto s_4_2
    if "!event!"=="regen" goto s_4_3
    if "!event!"=="allgen" goto s_4_4
    goto s_default
:s_4_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: check source files exist
    set _exception=
    call :a_check_source_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_3
    if "!debug!"=="1" echo Event: regen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce generated files
    set _exception=
    call :a_produce_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_4
    if "!debug!"=="1" echo Event: allgen
    set event=
    if "!debug!"=="1" echo Action: check project files exist
    set _exception=
    call :a_check_project_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: produce all generated files
    set _exception=
    call :a_produce_all_generated_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_4_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_source
:r_source
echo build:
    echo   From the packaged sources, compiles all source files without any
    echo     code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
echo regen:
    echo   Produces generated files required for building using the
    echo     current model.
echo allgen:
    echo   Produces all generated files.
    goto r_default

:s_stripped
    if "!debug!"=="1" echo State: stripped
    if "!event!"=="" goto s_5_empty
    if "!event!"=="build" goto s_5_1
    if "!event!"=="clean" goto s_5_2
    goto s_default
:s_5_1
    if "!debug!"=="1" echo Event: build
    set event=
    if "!debug!"=="1" echo Action: build binary files
    set _exception=
    call :a_build_binary_files
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_2
    if "!debug!"=="1" echo Event: clean
    set event=
    if "!debug!"=="1" echo Action: remove generated binaries
    set _exception=
    call :a_remove_generated_binaries
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_5_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_stripped
:r_stripped
echo build:
    echo   From the stripped-down packaged sources, compiles all source files
    echo     without any code generation.
echo clean:
    echo   When working with the packaged sources, removes all generated
    echo     binary files from the project directory.
    goto r_default

:s_default
    if "!debug!"=="1" echo State: default
    if "!event!"=="" goto s_6_empty
    if "!event!"=="install" goto s_6_1
    if "!event!"=="test" goto s_6_2
    if "!event!"=="help" goto s_6_3
    if "!event!"=="version" goto s_6_4
    if "!event!"=="empty" goto s_6_5
    goto s_win32
:s_6_1
    if "!debug!"=="1" echo Event: install
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: install deliverables
    set _exception=
    call :a_install_deliverables
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_2
    if "!debug!"=="1" echo Event: test
    set event=
    if "!debug!"=="1" echo Action: check binary files exist
    set _exception=
    call :a_check_binary_files_exist
    if "!_exception!"=="1" exit /b 1
    if "!debug!"=="1" echo Action: run regression tests
    set _exception=
    call :a_run_regression_tests
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_3
    if "!debug!"=="1" echo Event: help
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_4
    if "!debug!"=="1" echo Event: version
    set event=
    if "!debug!"=="1" echo Action: report project version
    set _exception=
    call :a_report_project_version
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_5
    if "!debug!"=="1" echo Event: empty
    set event=
    if "!debug!"=="1" echo Action: report help information
    set _exception=
    call :a_report_help_information
    if "!_exception!"=="1" exit /b 1
    if not "%1"=="" goto process
    exit /b 0
:s_6_empty
    if "!debug!"=="1" echo Get event from user
    set event=%1
    shift
    if "!event!"=="" set event=empty
    goto s_default
:r_default
echo install:
    echo   Installs deliverables into the final or temporary install tree.
    echo     This action is only valid after a successful build.
echo test:
    echo   Runs regression tests for the project.
echo help:
    echo   Shows a list of the commands allowed on the project.
echo version:
    echo   Show project version.
    goto r_win32


exit /b 0

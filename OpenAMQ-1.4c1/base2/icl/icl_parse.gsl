#   'Parse' engine for icl_stdc
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function parse_icl ([icl])
    my.entity = my.[icl]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_icl ? 0
       echo "<parse_icl location = \"$(my.location)\""
    endif

    if !defined (my.[icl].[abstract])
        my.[icl].[abstract] = "0"
    endif
    if defined (my.[icl].[abstract])
        if    my.[icl].[abstract] ?= "0"
        elsif my.[icl].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[license])
        my.[icl].[license] = "gpl"
    endif
    if defined (my.[icl].[license])
        if    my.[icl].[license] ?= "bsd"
        elsif my.[icl].[license] ?= "gpl"
        else
            parse_error ("Attribute 'license' has illegal value '$(0.[license]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[icl].[version])
        parse_error ("Required attribute 'version' not defined$(my.location)")
    endif
    if !defined (my.[icl].[animate])
        my.[icl].[animate] = "$(switches.animate?0)"
    endif
    if defined (my.[icl].[animate])
        if    my.[icl].[animate] ?= "0"
        elsif my.[icl].[animate] ?= "1"
        else
            parse_error ("Attribute 'animate' has illegal value '$(0.[animate]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[import])
        my.[icl].[import] = "0"
    endif
    if defined (my.[icl].[import])
        if    my.[icl].[import] ?= "0"
        elsif my.[icl].[import] ?= "1"
        else
            parse_error ("Attribute 'import' has illegal value '$(0.[import]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[target])
        my.[icl].[target] = "stdc"
    endif
    if defined (my.[icl].[target])
        if    my.[icl].[target] ?= "doc"
        elsif my.[icl].[target] ?= "stdc"
        else
            parse_error ("Attribute 'target' has illegal value '$(0.[target]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[base])
        my.[icl].[base] = "$(name)"
    endif
    if !defined (my.[icl].[trace])
        my.[icl].[trace] = "0"
    endif
    if !defined (my.[icl].[stats])
        my.[icl].[stats] = "$(switches.stats?0)"
    endif
    if defined (my.[icl].[stats])
        if    my.[icl].[stats] ?= "0"
        elsif my.[icl].[stats] ?= "1"
        else
            parse_error ("Attribute 'stats' has illegal value '$(0.[stats]?)'$(my.location)")
        endif
    endif
    if !defined (my.[icl].[opaque])
        my.[icl].[opaque] = "0"
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[icl]. where defined (name ()) as entity
        if    name () = "inherit"
        elsif name () = "data"
        elsif name () = "invoke"
        elsif name () = "public"
        elsif name () = "private"
        elsif name () = "context"
        elsif name () = "doc"
        elsif name () = "import"
        elsif name () = "assert"
        elsif name () = "option"
        elsif name () = "method"
        elsif name () = "todo"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[icl].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[icl].[data] as [data]
        parse_data ([data])
    endfor

    for my.[icl].[invoke] as [invoke]
        parse_invoke ([invoke])
    endfor

    for my.[icl].[public] as [public]
        parse_public ([public])
    endfor

    for my.[icl].[private] as [private]
        parse_private ([private])
    endfor

    for my.[icl].[context] as [context]
        parse_context ([context])
    endfor

    for my.[icl].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[icl].[import] as [import]
        parse_import ([import])
    endfor

    for my.[icl].[assert] as [assert]
        parse_assert ([assert])
    endfor

    for my.[icl].[option] as [option]
        parse_option ([option])
    endfor

    for my.[icl].[method] as [method]
        parse_method ([method])
    endfor

    for my.[icl].[todo] as [todo]
        parse_todo ([todo])
    endfor

    my.last_key =
    for my.[icl].[data] as [data] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <data name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[icl].[import] as [import] by 0.[class] ? ""
        if (0.[class] ?<> "") & (0.[class] ?= my.last_key)
            parse_error ("Duplicate <import class = \"$(0.[class])\"/>$(my.location)")
        endif
        my.last_key = 0.[class] ? ""
    endfor
    my.last_key =
    for my.[icl].[assert] as [assert] by 0.[role] ? ""
        if (0.[role] ?<> "") & (0.[role] ?= my.last_key)
            parse_error ("Duplicate <assert role = \"$(0.[role])\"/>$(my.location)")
        endif
        my.last_key = 0.[role] ? ""
    endfor
    my.last_key =
    for my.[icl].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[icl].[method] as [method] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <method name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    base = "$(base:c)"
endfunction

function parse_public ([public])
    my.entity = my.[public]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_public ? 0
       echo "<parse_public location = \"$(my.location)\""
    endif

    if !defined (my.[public].[name])
        my.[public].[name] = "types"
    endif
    if defined (my.[public].[name])
        if    my.[public].[name] ?= "header"
        elsif my.[public].[name] ?= "include"
        elsif my.[public].[name] ?= "types"
        elsif my.[public].[name] ?= "structure"
        elsif my.[public].[name] ?= "functions"
        elsif my.[public].[name] ?= "inline"
        elsif my.[public].[name] ?= "footer"
        else
            parse_error ("Attribute 'name' has illegal value '$(0.[name]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[public]. where defined (name ()) as entity
        if    name () = "doc"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[public].[doc] as [doc]
        parse_doc ([doc])
    endfor

endfunction

function parse_private ([private])
    my.entity = my.[private]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_private ? 0
       echo "<parse_private location = \"$(my.location)\""
    endif

    if !defined (my.[private].[name])
        my.[private].[name] = "body"
    endif
    if defined (my.[private].[name])
        if    my.[private].[name] ?= "defines"
        elsif my.[private].[name] ?= "header"
        elsif my.[private].[name] ?= "body"
        elsif my.[private].[name] ?= "footer"
        else
            parse_error ("Attribute 'name' has illegal value '$(0.[name]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[private]. where defined (name ()) as entity
        if    name () = "doc"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[private].[doc] as [doc]
        parse_doc ([doc])
    endfor

endfunction

function parse_context ([context])
    my.entity = my.[context]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<parse_context location = \"$(my.location)\""
    endif

    if !defined (my.[context].[export])
        my.[context].[export] = "default"
    endif
    if defined (my.[context].[export])
        if    my.[context].[export] ?= "none"
        elsif my.[context].[export] ?= "default"
        elsif my.[context].[export] ?= "before"
        elsif my.[context].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[context]. where defined (name ()) as entity
        if    name () = "doc"
        elsif name () = "property"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[context].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[context].[property] as [property]
        parse_property ([property])
    endfor

    my.last_key =
    for my.[context].[property] as [property] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <property name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_property ([property])
    my.entity = my.[property]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_property ? 0
       echo "<parse_property location = \"$(my.location)\""
    endif

    if !defined (my.[property].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[property].[type])
        parse_error ("Required attribute 'type' not defined$(my.location)")
    endif
    if !defined (my.[property].[readonly])
        my.[property].[readonly] = "0"
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[property]. where defined (name ()) as entity
        if    name () = "put"
        elsif name () = "get"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[property].[put] as [property put]
        parse_property_put ([property put])
    endfor

    for my.[property].[get] as [property get]
        parse_property_get ([property get])
    endfor

        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_property_get ([property get])
    my.entity = my.[property get]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_property_get ? 0
       echo "<parse_property_get location = \"$(my.location)\""
    endif

    for my.[property get]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_property_put ([property put])
    my.entity = my.[property put]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_property_put ? 0
       echo "<parse_property_put location = \"$(my.location)\""
    endif

    for my.[property put]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_method ([method])
    my.entity = my.[method]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<parse_method location = \"$(my.location)\""
    endif

    if !defined (method.base)
        method.base = class.base
    endif
    if method.base <> ""
        method.base += "_"
    endif
    if !defined (my.[method].[abstract])
        my.[method].[abstract] = "0"
    endif
    if defined (my.[method].[abstract])
        if    my.[method].[abstract] ?= "0"
        elsif my.[method].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[method].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[method].[inherit])
        my.[method].[inherit] = "overlay"
    endif
    if defined (my.[method].[inherit])
        if    my.[method].[inherit] ?= "none"
        elsif my.[method].[inherit] ?= "overlay"
        else
            parse_error ("Attribute 'inherit' has illegal value '$(0.[inherit]?)'$(my.location)")
        endif
    endif
    if !defined (my.[method].[export])
        my.[method].[export] = "default"
    endif
    if defined (my.[method].[export])
        if    my.[method].[export] ?= "none"
        elsif my.[method].[export] ?= "default"
        elsif my.[method].[export] ?= "before"
        elsif my.[method].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    if !defined (my.[method].[private])
        my.[method].[private] = "0"
    endif
    if defined (my.[method].[private])
        if    my.[method].[private] ?= "0"
        elsif my.[method].[private] ?= "1"
        else
            parse_error ("Attribute 'private' has illegal value '$(0.[private]?)'$(my.location)")
        endif
    endif
    if !defined (my.[method].[cname])
        my.[method].[cname] = "$(expand(method.name):c)"
    endif
    if !defined (my.[method].[inline])
        my.[method].[inline] = "0"
    endif
    if defined (my.[method].[inline])
        if    my.[method].[inline] ?= "0"
        elsif my.[method].[inline] ?= "1"
        else
            parse_error ("Attribute 'inline' has illegal value '$(0.[inline]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[method]. where defined (name ()) as entity
        if    name () = "option"
        elsif name () = "inherit"
        elsif name () = "argument"
        elsif name () = "animate"
        elsif name () = "dismiss"
        elsif name () = "declare"
        elsif name () = "local"
        elsif name () = "header"
        elsif name () = "footer"
        elsif name () = "doc"
        elsif name () = "invoke"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[method].[option] as [option]
        parse_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[method].[argument] as [argument]
        parse_argument ([argument])
    endfor

    for my.[method].[animate] as [animate]
        parse_animate ([animate])
    endfor

    for my.[method].[dismiss] as [dismiss]
        parse_dismiss ([dismiss])
    endfor

    for my.[method].[declare] as [declare]
        parse_declare ([declare])
    endfor

    for my.[method].[local] as [local]
        parse_local ([local])
    endfor

    for my.[method].[header] as [header]
        parse_header ([header])
    endfor

    for my.[method].[footer] as [footer]
        parse_footer ([footer])
    endfor

    for my.[method].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[method].[invoke] as [invoke]
        parse_invoke ([invoke])
    endfor

    my.last_key =
    for my.[method].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[argument] as [argument] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <argument name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[animate] as [animate] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <animate name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[dismiss] as [dismiss] by 0.[argument] ? ""
        if (0.[argument] ?<> "") & (0.[argument] ?= my.last_key)
            parse_error ("Duplicate <dismiss argument = \"$(0.[argument])\"/>$(my.location)")
        endif
        my.last_key = 0.[argument] ? ""
    endfor
    my.last_key =
    for my.[method].[declare] as [declare] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <declare name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_argument ([argument])
    my.entity = my.[argument]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_argument ? 0
       echo "<parse_argument location = \"$(my.location)\""
    endif

    if !defined (my.[argument].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[argument].[type])
        my.[argument].[type] = ""
    endif
    if !defined (my.[argument].[pass])
        my.[argument].[pass] = "inout"
    endif
    if defined (my.[argument].[pass])
        if    my.[argument].[pass] ?= "in"
        elsif my.[argument].[pass] ?= "out"
        elsif my.[argument].[pass] ?= "inout"
        else
            parse_error ("Attribute 'pass' has illegal value '$(0.[pass]?)'$(my.location)")
        endif
    endif
    if !defined (my.[argument].[animate])
        my.[argument].[animate] = "1"
    endif
    if !defined (my.[argument].[ref])
        my.[argument].[ref] = "0"
    endif
    if defined (my.[argument].[ref])
        if    my.[argument].[ref] ?= "0"
        elsif my.[argument].[ref] ?= "1"
        else
            parse_error ("Attribute 'ref' has illegal value '$(0.[ref]?)'$(my.location)")
        endif
    endif
    if !defined (my.[argument].[export])
        my.[argument].[export] = "default"
    endif
    if defined (my.[argument].[export])
        if    my.[argument].[export] ?= "none"
        elsif my.[argument].[export] ?= "default"
        elsif my.[argument].[export] ?= "before"
        elsif my.[argument].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[argument]. where defined (name ()) as entity
        if    name () = "doc"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[argument].[doc] as [doc]
        parse_doc ([doc])
    endfor

    if my.argument.ref
        /*  Make a declare to replace the argument */
        my.declare = xml.new ("declare")
        my.declare.name = name
        my.declare.type = type
        my.declare.default = "*" + name + "_p"
        my.declare.animate = 1
        my.declare. = "Dereferenced $(argument.?name)"

        my.firstdeclare = method->declare ?
        if defined (my.firstdeclare)
            move my.declare before my.firstdeclare
        else
            move my.declare to method
        endif

        my.argument.deref_name = name
        my.argument.deref_type = type
    endif
        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_animate ([animate])
    my.entity = my.[animate]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_animate ? 0
       echo "<parse_animate location = \"$(my.location)\""
    endif

    if !defined (my.[animate].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[animate].[value])
        my.[animate].[value] = "$(name)"
    endif
    if !defined (my.[animate].[format])
        parse_error ("Required attribute 'format' not defined$(my.location)")
    endif
    for my.[animate]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_dismiss ([dismiss])
    my.entity = my.[dismiss]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_dismiss ? 0
       echo "<parse_dismiss location = \"$(my.location)\""
    endif

    if !defined (my.[dismiss].[argument])
        parse_error ("Required attribute 'argument' not defined$(my.location)")
    endif
    if !defined (my.[dismiss].[value])
        parse_error ("Required attribute 'value' not defined$(my.location)")
    endif
    for my.[dismiss]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_declare ([declare])
    my.entity = my.[declare]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_declare ? 0
       echo "<parse_declare location = \"$(my.location)\""
    endif

    if !defined (my.[declare].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[declare].[type])
        parse_error ("Required attribute 'type' not defined$(my.location)")
    endif
    if !defined (my.[declare].[animate])
        my.[declare].[animate] = "0"
    endif
    for my.[declare]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_local ([local])
    my.entity = my.[local]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<parse_local location = \"$(my.location)\""
    endif

    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[local]. where defined (name ()) as entity
        if    name () = "doc"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[local].[doc] as [doc]
        parse_doc ([doc])
    endfor

endfunction

function parse_header ([header])
    my.entity = my.[header]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<parse_header location = \"$(my.location)\""
    endif

    if !defined (my.[header].[export])
        my.[header].[export] = "default"
    endif
    if defined (my.[header].[export])
        if    my.[header].[export] ?= "none"
        elsif my.[header].[export] ?= "default"
        elsif my.[header].[export] ?= "before"
        elsif my.[header].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    for my.[header]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_footer ([footer])
    my.entity = my.[footer]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<parse_footer location = \"$(my.location)\""
    endif

    if !defined (my.[footer].[export])
        my.[footer].[export] = "default"
    endif
    if defined (my.[footer].[export])
        if    my.[footer].[export] ?= "none"
        elsif my.[footer].[export] ?= "default"
        elsif my.[footer].[export] ?= "before"
        elsif my.[footer].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    for my.[footer]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_doc ([doc])
    my.entity = my.[doc]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<parse_doc location = \"$(my.location)\""
    endif

    for my.[doc]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_import ([import])
    my.entity = my.[import]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_import ? 0
       echo "<parse_import location = \"$(my.location)\""
    endif

    if !defined (my.[import].[class])
        parse_error ("Required attribute 'class' not defined$(my.location)")
    endif
    for my.[import]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
        if defined (condition) & ! gsl.exec ("\$(("+condition+")?0)",1)
            my.entity.delete ()
        endif
endfunction

function parse_assert ([assert])
    my.entity = my.[assert]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<parse_assert location = \"$(my.location)\""
    endif

    if !defined (my.[assert].[role])
        parse_error ("Required attribute 'role' not defined$(my.location)")
    endif
    for my.[assert]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_data ([data])
    my.entity = my.[data]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_data ? 0
       echo "<parse_data location = \"$(my.location)\""
    endif

endfunction

function parse_invoke ([invoke])
    my.entity = my.[invoke]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_invoke ? 0
       echo "<parse_invoke location = \"$(my.location)\""
    endif

    if my.invoke.phase ? "preproc" = "parse"
        [gsl].exec (my.invoke.?'', 0)
        if defined (.script)
            [gsl].include (my.invoke.script + ".gsl", 0)
        endif
    endif
    if defined (my.[invoke].[phase])
        if    my.[invoke].[phase] ?= "preproc"
        elsif my.[invoke].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
endfunction

function parse_todo ([todo])
    my.entity = my.[todo]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<parse_todo location = \"$(my.location)\""
    endif

    for my.[todo]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<parse_inherit location = \"$(my.location)\""
    endif

    if defined (my.[inherit].[phase])
        if    my.[inherit].[phase] ?= "preproc"
        elsif my.[inherit].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[inherit]. where defined (name ()) as entity
        if    name () = "option"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[inherit].[option] as [option]
        parse_option ([option])
    endfor

    my.last_key =
    for my.[inherit].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_option ([option])
    my.entity = my.[option]
    my.location = location ("class")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<parse_option location = \"$(my.location)\""
    endif

    for my.[option]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction


function parse_error (message)
    echo (my.message)
    global.errno = 1
endfunction

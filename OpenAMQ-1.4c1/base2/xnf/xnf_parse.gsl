#   'Parse' engine for xnf
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function parse_xnf ([xnf])
    my.entity = my.[xnf]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf ? 0
       echo "<parse_xnf location = \"$(my.location)\""
    endif

    if !defined (my.[xnf].[abstract])
        my.[xnf].[abstract] = "0"
    endif
    if defined (my.[xnf].[abstract])
        if    my.[xnf].[abstract] ?= "0"
        elsif my.[xnf].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[xnf].[license])
        my.[xnf].[license] = "gpl"
    endif
    if defined (my.[xnf].[license])
        if    my.[xnf].[license] ?= "bsd"
        elsif my.[xnf].[license] ?= "gpl"
        else
            parse_error ("Attribute 'license' has illegal value '$(0.[license]?)'$(my.location)")
        endif
    endif
    if !defined (my.[xnf].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[xnf].[script])
        my.[xnf].[script] = "xnf_gen.gsl"
    endif
    if !defined (my.[xnf].[version])
        parse_error ("Required attribute 'version' not defined$(my.location)")
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[xnf]. where defined (name ()) as entity
        if    name () = "option"
        elsif name () = "inherit"
        elsif name () = "include"
        elsif name () = "produce"
        elsif name () = "entity"
        elsif name () = "errorhandler"
        elsif name () = "rule"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[xnf].[option] as [option]
        parse_option ([option])
    endfor

    for my.[xnf].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[xnf].[include] as [include]
        parse_include ([include])
    endfor

    for my.[xnf].[produce] as [produce]
        parse_produce ([produce])
    endfor

    for my.[xnf].[entity] as [entity]
        parse_entity ([entity])
    endfor

    for my.[xnf].[errorhandler] as [errorhandler]
        parse_errorhandler ([errorhandler])
    endfor

    for my.[xnf].[rule] as [xnf rule]
        parse_xnf_rule ([xnf rule])
    endfor

    my.last_key =
    for my.[xnf].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[xnf].[include] as [include] by 0.[filename] ? ""
        if (0.[filename] ?<> "") & (0.[filename] ?= my.last_key)
            parse_error ("Duplicate <include filename = \"$(0.[filename])\"/>$(my.location)")
        endif
        my.last_key = 0.[filename] ? ""
    endfor
    my.last_key =
    for my.[xnf].[produce] as [produce] by 0.[type] ? ""
        if (0.[type] ?<> "") & (0.[type] ?= my.last_key)
            parse_error ("Duplicate <produce type = \"$(0.[type])\"/>$(my.location)")
        endif
        my.last_key = 0.[type] ? ""
    endfor
    my.last_key =
    for my.[xnf].[entity] as [entity] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <entity name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_include ([include])
    my.entity = my.[include]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<parse_include location = \"$(my.location)\""
    endif

    for my.[include]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_produce ([produce])
    my.entity = my.[produce]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_produce ? 0
       echo "<parse_produce location = \"$(my.location)\""
    endif

    if !defined (my.[produce].[filename])
        parse_error ("Required attribute 'filename' not defined$(my.location)")
    endif
    if !defined (my.[produce].[type])
        parse_error ("Required attribute 'type' not defined$(my.location)")
    endif
    if defined (my.[produce].[type])
        if    my.[produce].[type] ?= "wrap"
        elsif my.[produce].[type] ?= "preproc"
        elsif my.[produce].[type] ?= "inherit"
        elsif my.[produce].[type] ?= "parse"
        elsif my.[produce].[type] ?= "codegen"
        elsif my.[produce].[type] ?= "gurudoc"
        else
            parse_error ("Attribute 'type' has illegal value '$(0.[type]?)'$(my.location)")
        endif
    endif
    for my.[produce]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_entity ([entity])
    my.entity = my.[entity]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity ? 0
       echo "<parse_entity location = \"$(my.location)\""
    endif

    #   Set default value for tag
    if my.entity.abstract ? 0 = 0
        my.entity.tag ?= my.entity.name ?
    endif
    
    #   Set default value for key
    if !defined (my.entity.key)
        if defined (my.entity->attr (name = "name"))
            my.entity.key = "name"
        endif
    elsif key <> "" & !defined (my.entity->attr (name = my.entity.key))
        parse_error ("Unknown key field: '$(key:)'$(my.location)")
    endif
    if !defined (my.[entity].[abstract])
        my.[entity].[abstract] = "0"
    endif
    if defined (my.[entity].[abstract])
        if    my.[entity].[abstract] ?= "0"
        elsif my.[entity].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[entity].[cdata])
        my.[entity].[cdata] = "0"
    endif
    if defined (my.[entity].[cdata])
        if    my.[entity].[cdata] ?= "0"
        elsif my.[entity].[cdata] ?= "1"
        else
            parse_error ("Attribute 'cdata' has illegal value '$(0.[cdata]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[unique])
        my.[entity].[unique] = "1"
    endif
    if defined (my.[entity].[unique])
        if    my.[entity].[unique] ?= "0"
        elsif my.[entity].[unique] ?= "1"
        else
            parse_error ("Attribute 'unique' has illegal value '$(0.[unique]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[inherit])
        my.[entity].[inherit] = "overlay"
    endif
    if defined (my.[entity].[inherit])
        if    my.[entity].[inherit] ?= "none"
        elsif my.[entity].[inherit] ?= "insert"
        elsif my.[entity].[inherit] ?= "overlay"
        else
            parse_error ("Attribute 'inherit' has illegal value '$(0.[inherit]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[sequence])
        my.[entity].[sequence] = "before"
    endif
    if defined (my.[entity].[sequence])
        if    my.[entity].[sequence] ?= "before"
        elsif my.[entity].[sequence] ?= "after"
        else
            parse_error ("Attribute 'sequence' has illegal value '$(0.[sequence]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[disconnect])
        my.[entity].[disconnect] = "0"
    endif
    if defined (my.[entity].[disconnect])
        if    my.[entity].[disconnect] ?= "0"
        elsif my.[entity].[disconnect] ?= "1"
        else
            parse_error ("Attribute 'disconnect' has illegal value '$(0.[disconnect]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity].[export])
        my.[entity].[export] = "default"
    endif
    if defined (my.[entity].[export])
        if    my.[entity].[export] ?= "none"
        elsif my.[entity].[export] ?= "default"
        elsif my.[entity].[export] ?= "before"
        elsif my.[entity].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[entity]. where defined (name ()) as entity
        if    name () = "option"
        elsif name () = "inherit"
        elsif name () = "allow"
        elsif name () = "rule"
        elsif name () = "attr"
        elsif name () = "link"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[entity].[option] as [option]
        parse_option ([option])
    endfor

    for my.[entity].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[entity].[allow] as [allow]
        parse_allow ([allow])
    endfor

    for my.[entity].[rule] as [entity rule]
        parse_entity_rule ([entity rule])
    endfor

    for my.[entity].[attr] as [attr]
        parse_attr ([attr])
    endfor

    for my.[entity].[link] as [link]
        parse_link ([link])
    endfor

    my.last_key =
    for my.[entity].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[entity].[allow] as [allow] by 0.[entity] ? ""
        if (0.[entity] ?<> "") & (0.[entity] ?= my.last_key)
            parse_error ("Duplicate <allow entity = \"$(0.[entity])\"/>$(my.location)")
        endif
        my.last_key = 0.[entity] ? ""
    endfor
    my.last_key =
    for my.[entity].[attr] as [attr] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <attr name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[entity].[link] as [link] by 0.[entity] ? ""
        if (0.[entity] ?<> "") & (0.[entity] ?= my.last_key)
            parse_error ("Duplicate <link entity = \"$(0.[entity])\"/>$(my.location)")
        endif
        my.last_key = 0.[entity] ? ""
    endfor
endfunction

function parse_allow ([allow])
    my.entity = my.[allow]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_allow ? 0
       echo "<parse_allow location = \"$(my.location)\""
    endif

    if !defined (my.[allow].[entity])
        parse_error ("Required attribute 'entity' not defined$(my.location)")
    endif
    if !defined (my.[allow].[occurs])
        my.[allow].[occurs] = "0+"
    endif
    if defined (my.[allow].[occurs])
        if    my.[allow].[occurs] ?= "1"
        elsif my.[allow].[occurs] ?= "1+"
        elsif my.[allow].[occurs] ?= "0+"
        elsif my.[allow].[occurs] ?= "0/1"
        else
            parse_error ("Attribute 'occurs' has illegal value '$(0.[occurs]?)'$(my.location)")
        endif
    endif
    if defined (my.[allow].[inherit])
        if    my.[allow].[inherit] ?= "none"
        elsif my.[allow].[inherit] ?= "insert"
        elsif my.[allow].[inherit] ?= "overlay"
        else
            parse_error ("Attribute 'inherit' has illegal value '$(0.[inherit]?)'$(my.location)")
        endif
    endif
    if defined (my.[allow].[sequence])
        if    my.[allow].[sequence] ?= "before"
        elsif my.[allow].[sequence] ?= "after"
        else
            parse_error ("Attribute 'sequence' has illegal value '$(0.[sequence]?)'$(my.location)")
        endif
    endif
    if !defined (my.[allow].[export])
        my.[allow].[export] = "default"
    endif
    if defined (my.[allow].[export])
        if    my.[allow].[export] ?= "none"
        elsif my.[allow].[export] ?= "default"
        elsif my.[allow].[export] ?= "before"
        elsif my.[allow].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    for my.[allow]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
    if defined (0.[entity])
        my.source = link_target ("entity", "entity", "name", 0.[entity]) ?
        if defined (my.source)
            my.target = my.[allow]
            perform_inherit_entity_item (my.target, my.source)
        else
            parse_error ("Entity '$(0.[entity])' missing$(my.location)")
        endif
    endif
endfunction

function parse_entity_rule ([entity rule])
    my.entity = my.[entity rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity_rule ? 0
       echo "<parse_entity_rule location = \"$(my.location)\""
    endif

    if !defined (my.[entity rule].[phase])
        my.[entity rule].[phase] = "parse"
    endif
    if defined (my.[entity rule].[phase])
        if    my.[entity rule].[phase] ?= "wrap"
        elsif my.[entity rule].[phase] ?= "preproc"
        elsif my.[entity rule].[phase] ?= "inherit"
        elsif my.[entity rule].[phase] ?= "parse"
        elsif my.[entity rule].[phase] ?= "codegen"
        elsif my.[entity rule].[phase] ?= "gurudoc"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    if !defined (my.[entity rule].[when])
        my.[entity rule].[when] = "before"
    endif
    if defined (my.[entity rule].[when])
        if    my.[entity rule].[when] ?= "before"
        elsif my.[entity rule].[when] ?= "after"
        elsif my.[entity rule].[when] ?= "links"
        elsif my.[entity rule].[when] ?= "attrs"
        else
            parse_error ("Attribute 'when' has illegal value '$(0.[when]?)'$(my.location)")
        endif
    endif
    for my.[entity rule]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_link ([link])
    my.entity = my.[link]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link ? 0
       echo "<parse_link location = \"$(my.location)\""
    endif

    if !defined (my.[link].[from])
        parse_error ("Required attribute 'from' not defined$(my.location)")
    endif
    if !defined (my.[link].[field])
        my.[link].[field] = "name"
    endif
    if !defined (my.[link].[required])
        my.[link].[required] = "1"
    endif
    if defined (my.[link].[required])
        if    my.[link].[required] ?= "0"
        elsif my.[link].[required] ?= "1"
        else
            parse_error ("Attribute 'required' has illegal value '$(0.[required]?)'$(my.location)")
        endif
    endif
    if !defined (my.[link].[disconnect])
        my.[link].[disconnect] = "0"
    endif
    if defined (my.[link].[disconnect])
        if    my.[link].[disconnect] ?= "0"
        elsif my.[link].[disconnect] ?= "1"
        else
            parse_error ("Attribute 'disconnect' has illegal value '$(0.[disconnect]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[link]. where defined (name ()) as entity
        if    name () = "rule"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[link].[rule] as [link rule]
        parse_link_rule ([link rule])
    endfor

    if defined (0.[from])
        my.source = link_target ("attr", "attr", "name", 0.[from]) ?
        if defined (my.source)
        else
            parse_error ("Attr '$(0.[from])' missing$(my.location)")
        endif
    endif
    if defined (0.[entity])
        my.source = link_target ("entity", "entity", "name", 0.[entity]) ?
        if defined (my.source)
        else
            parse_error ("Entity '$(0.[entity])' missing$(my.location)")
        endif
    endif
endfunction

function parse_link_rule ([link rule])
    my.entity = my.[link rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link_rule ? 0
       echo "<parse_link_rule location = \"$(my.location)\""
    endif

    if !defined (my.[link rule].[phase])
        my.[link rule].[phase] = "parse"
    endif
    if defined (my.[link rule].[phase])
        if    my.[link rule].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    if !defined (my.[link rule].[when])
        my.[link rule].[when] = "before"
    endif
    if defined (my.[link rule].[when])
        if    my.[link rule].[when] ?= "before"
        elsif my.[link rule].[when] ?= "inherit"
        elsif my.[link rule].[when] ?= "after"
        else
            parse_error ("Attribute 'when' has illegal value '$(0.[when]?)'$(my.location)")
        endif
    endif
    for my.[link rule]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_attr ([attr])
    my.entity = my.[attr]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_attr ? 0
       echo "<parse_attr location = \"$(my.location)\""
    endif

    if !defined (my.[attr].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[attr].[required])
        my.[attr].[required] = "0"
    endif
    if defined (my.[attr].[required])
        if    my.[attr].[required] ?= "0"
        elsif my.[attr].[required] ?= "1"
        else
            parse_error ("Attribute 'required' has illegal value '$(0.[required]?)'$(my.location)")
        endif
    endif
    if !defined (my.[attr].[inherit])
        my.[attr].[inherit] = "1"
    endif
    if defined (my.[attr].[inherit])
        if    my.[attr].[inherit] ?= "0"
        elsif my.[attr].[inherit] ?= "1"
        else
            parse_error ("Attribute 'inherit' has illegal value '$(0.[inherit]?)'$(my.location)")
        endif
    endif
    if !defined (my.[attr].[phase])
        my.[attr].[phase] = "parse"
    endif
    if defined (my.[attr].[phase])
        if    my.[attr].[phase] ?= "preproc"
        elsif my.[attr].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[attr]. where defined (name ()) as entity
        if    name () = "restrict"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[attr].[restrict] as [restrict]
        parse_restrict ([restrict])
    endfor

    my.last_key =
    for my.[attr].[restrict] as [restrict] by 0.[value] ? ""
        if (0.[value] ?<> "") & (0.[value] ?= my.last_key)
            parse_error ("Duplicate <restrict value = \"$(0.[value])\"/>$(my.location)")
        endif
        my.last_key = 0.[value] ? ""
    endfor
endfunction

function parse_restrict ([restrict])
    my.entity = my.[restrict]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_restrict ? 0
       echo "<parse_restrict location = \"$(my.location)\""
    endif

    if !defined (my.[restrict].[value])
        parse_error ("Required attribute 'value' not defined$(my.location)")
    endif
    for my.[restrict]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_xnf_rule ([xnf rule])
    my.entity = my.[xnf rule]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf_rule ? 0
       echo "<parse_xnf_rule location = \"$(my.location)\""
    endif

    if !defined (my.[xnf rule].[phase])
        my.[xnf rule].[phase] = "parse"
    endif
    if defined (my.[xnf rule].[phase])
        if    my.[xnf rule].[phase] ?= "wrap"
        elsif my.[xnf rule].[phase] ?= "preproc"
        elsif my.[xnf rule].[phase] ?= "inherit"
        elsif my.[xnf rule].[phase] ?= "parse"
        elsif my.[xnf rule].[phase] ?= "codegen"
        elsif my.[xnf rule].[phase] ?= "gurudoc"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    if !defined (my.[xnf rule].[when])
        my.[xnf rule].[when] = "before"
    endif
    if defined (my.[xnf rule].[when])
        if    my.[xnf rule].[when] ?= "before"
        elsif my.[xnf rule].[when] ?= "after"
        else
            parse_error ("Attribute 'when' has illegal value '$(0.[when]?)'$(my.location)")
        endif
    endif
    for my.[xnf rule]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_errorhandler ([errorhandler])
    my.entity = my.[errorhandler]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_errorhandler ? 0
       echo "<parse_errorhandler location = \"$(my.location)\""
    endif

    for my.[errorhandler]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<parse_inherit location = \"$(my.location)\""
    endif

    if defined (my.[inherit].[phase])
        if    my.[inherit].[phase] ?= "preproc"
        elsif my.[inherit].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[inherit]. where defined (name ()) as entity
        if    name () = "option"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[inherit].[option] as [option]
        parse_option ([option])
    endfor

    my.last_key =
    for my.[inherit].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_option ([option])
    my.entity = my.[option]
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<parse_option location = \"$(my.location)\""
    endif

    for my.[option]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction


function parse_error (message)
    echo (my.message)
    global.errno = 1
endfunction

#   'Preproc' engine for xnf
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function preproc_xnf ([xnf])
    my.entity = my.[xnf]
    my.[xnf]._entity = "xnf"
    my.[xnf]._key = my.[xnf].[name] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf ? 0
       echo "<preproc_xnf location = \"$(my.location)\""
    endif

    if defined (my.entity.role)
        global.have_role_$(my.entity.role) = 1
    endif
    for my.[xnf].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[xnf].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[xnf].[include] as [include]
        preproc_include ([include])
    endfor

    for my.[xnf].[produce] as [produce]
        preproc_produce ([produce])
    endfor

    for my.[xnf].[entity] as [entity]
        preproc_entity ([entity])
    endfor

    for my.[xnf].[errorhandler] as [errorhandler]
        preproc_errorhandler ([errorhandler])
    endfor

    for my.[xnf].[rule] as [xnf rule]
        preproc_xnf_rule ([xnf rule])
    endfor

    if !my.[xnf].deleted ()
        my.[xnf]._key = my.[xnf].[name] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_include ([include])
    my.entity = my.[include]
    my.[include]._entity = "include"
    my.[include]._key = my.[include].[filename] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<preproc_include location = \"$(my.location)\""
    endif

    if !defined (my.[include].[filename])
        preproc_error ("Required attribute 'filename' not defined$(my.location)")
    endif
        my.include_file = xnf.load_file (filename)
    if defined (my.include_file)
        move my.include_file after my.include
    else
        preproc_error ("Error loading include file: $(filename): $(xml.error?)")
    endif
    if !my.[include].deleted ()
        my.[include]._key = my.[include].[filename] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_produce ([produce])
    my.entity = my.[produce]
    my.[produce]._entity = "produce"
    my.[produce]._key = my.[produce].[type] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_produce ? 0
       echo "<preproc_produce location = \"$(my.location)\""
    endif

    if !my.[produce].deleted ()
        my.[produce]._key = my.[produce].[type] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_entity ([entity])
    my.entity = my.[entity]
    my.[entity]._entity = "entity"
    my.[entity]._key = my.[entity].[name] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity ? 0
       echo "<preproc_entity location = \"$(my.location)\""
    endif

            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[entity].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[entity].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[entity].[allow] as [allow]
        preproc_allow ([allow])
    endfor

    for my.[entity].[rule] as [entity rule]
        preproc_entity_rule ([entity rule])
    endfor

    for my.[entity].[attr] as [attr]
        preproc_attr ([attr])
    endfor

    for my.[entity].[link] as [link]
        preproc_link ([link])
    endfor

    if !my.[entity].deleted ()
        my.[entity]._key = my.[entity].[name] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_allow ([allow])
    my.entity = my.[allow]
    my.[allow]._entity = "allow"
    my.[allow]._key = my.[allow].[entity] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_allow ? 0
       echo "<preproc_allow location = \"$(my.location)\""
    endif

    if !my.[allow].deleted ()
        my.[allow]._key = my.[allow].[entity] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_entity_rule ([entity rule])
    my.entity = my.[entity rule]
    my.[entity rule]._entity = "entity rule"
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_entity_rule ? 0
       echo "<preproc_entity_rule location = \"$(my.location)\""
    endif

    if !my.[entity rule].deleted ()
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_link ([link])
    my.entity = my.[link]
    my.[link]._entity = "link"
    my.[link]._key = my.[link].[entity] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link ? 0
       echo "<preproc_link location = \"$(my.location)\""
    endif

    for my.[link].[rule] as [link rule]
        preproc_link_rule ([link rule])
    endfor

    if !my.[link].deleted ()
        my.[link]._key = my.[link].[entity] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_link_rule ([link rule])
    my.entity = my.[link rule]
    my.[link rule]._entity = "link rule"
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_link_rule ? 0
       echo "<preproc_link_rule location = \"$(my.location)\""
    endif

    if !my.[link rule].deleted ()
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_attr ([attr])
    my.entity = my.[attr]
    my.[attr]._entity = "attr"
    my.[attr]._key = my.[attr].[name] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_attr ? 0
       echo "<preproc_attr location = \"$(my.location)\""
    endif

    for my.[attr].[restrict] as [restrict]
        preproc_restrict ([restrict])
    endfor

    if !my.[attr].deleted ()
        my.[attr]._key = my.[attr].[name] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_restrict ([restrict])
    my.entity = my.[restrict]
    my.[restrict]._entity = "restrict"
    my.[restrict]._key = my.[restrict].[value] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_restrict ? 0
       echo "<preproc_restrict location = \"$(my.location)\""
    endif

    if !my.[restrict].deleted ()
        my.[restrict]._key = my.[restrict].[value] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_xnf_rule ([xnf rule])
    my.entity = my.[xnf rule]
    my.[xnf rule]._entity = "xnf rule"
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_xnf_rule ? 0
       echo "<preproc_xnf_rule location = \"$(my.location)\""
    endif

    if !my.[xnf rule].deleted ()
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_errorhandler ([errorhandler])
    my.entity = my.[errorhandler]
    my.[errorhandler]._entity = "errorhandler"
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_errorhandler ? 0
       echo "<preproc_errorhandler location = \"$(my.location)\""
    endif

    if !my.[errorhandler].deleted ()
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_inherit ([inherit])
    my.entity = my.[inherit]
    my.[inherit]._entity = "inherit"
    my.[inherit]._key = my.[inherit].[name] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<preproc_inherit location = \"$(my.location)\""
    endif

        #   Fudge for backwards compatibility  
        inherit.name ?= inherit.$(name($(-1))) ?
        if defined (inherit.name)
            inherit.name = gsl.exec (inherit.name, 1)
        endif
        inherit._key ?= inherit.name ?
    if !defined (my.[inherit].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[inherit].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[inherit].deleted ()
        my.[inherit]._key = my.[inherit].[name] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction

function preproc_option ([option])
    my.entity = my.[option]
    my.[option]._entity = "option"
    my.[option]._key = my.[option].[name] ?
    my.entity._xnf ?= [xnf]._key ?
    my.location = location ("xnf")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<preproc_option location = \"$(my.location)\""
    endif

    if !defined (my.[option].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[option].[value])
        preproc_error ("Required attribute 'value' not defined$(my.location)")
    endif
    #   Export option to parent and all children
    my.parent = my.option.parent ()
    if defined (my.parent.$(my.option.name)) & my.parent.$(my.option.name) <> my.option.value
        preproc_error ("Option '$(my.option.name)' is already defined in $(name(my.parent)): $(my.parent._key?)")
    else
        define_throughout (my.parent, my.option)
    endif
    if !my.[option].deleted ()
        my.[option]._key = my.[option].[name] ?
        my.entity._xnf ?= [xnf]._key ?
    endif
endfunction


function preproc_error (message)
    echo (my.message)
    global.errno = 1
endfunction

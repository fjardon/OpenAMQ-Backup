#   'Inherit' engine for smt
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function inherit_smt ([smt])
    my.entity = my.[smt]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_smt ? 0
       echo "<inherit_smt location = \"$(my.location)\""
    endif

    for my.[smt].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[smt].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[smt].[include] as [include]
        inherit_include ([include])
    endfor

    for my.[smt].[import] as [import]
        inherit_import ([import])
    endfor

    for my.[smt].[private] as [private]
        inherit_private ([private])
    endfor

    for my.[smt].[public] as [public]
        inherit_public ([public])
    endfor

    for my.[smt].[context] as [agent context]
        inherit_agent_context ([agent context])
    endfor

    for my.[smt].[handler] as [agent handler]
        inherit_agent_handler ([agent handler])
    endfor

    for my.[smt].[state] as [agent state]
        inherit_agent_state ([agent state])
    endfor

    for my.[smt].[thread] as [thread]
        inherit_thread ([thread])
    endfor

    for my.[smt].[event] as [agent event]
        inherit_agent_event ([agent event])
    endfor

    for my.[smt].[action] as [agent action]
        inherit_agent_action ([agent action])
    endfor

    for my.[smt].[catch] as [catch]
        inherit_catch ([catch])
    endfor

    for my.[smt].[method] as [method]
        inherit_method ([method])
    endfor

    for my.[smt].[message] as [message]
        inherit_message ([message])
    endfor

    for my.[smt].[actionlist] as [actionlist]
        inherit_actionlist ([actionlist])
    endfor

endfunction

function inherit_include ([include])
    my.entity = my.[include]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<inherit_include location = \"$(my.location)\""
    endif

endfunction

function inherit_catch ([catch])
    my.entity = my.[catch]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_catch ? 0
       echo "<inherit_catch location = \"$(my.location)\""
    endif

endfunction

function inherit_private ([private])
    my.entity = my.[private]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_private ? 0
       echo "<inherit_private location = \"$(my.location)\""
    endif

endfunction

function inherit_public ([public])
    my.entity = my.[public]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_public ? 0
       echo "<inherit_public location = \"$(my.location)\""
    endif

endfunction

function inherit_import ([import])
    my.entity = my.[import]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_import ? 0
       echo "<inherit_import location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_context ([agent context])
    my.entity = my.[agent context]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_context ? 0
       echo "<inherit_agent_context location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_handler ([agent handler])
    my.entity = my.[agent handler]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_handler ? 0
       echo "<inherit_agent_handler location = \"$(my.location)\""
    endif

    for my.[agent handler].[argument] as [argument]
        inherit_argument ([argument])
    endfor

endfunction

function inherit_argument ([argument])
    my.entity = my.[argument]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_argument ? 0
       echo "<inherit_argument location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_state ([agent state])
    my.entity = my.[agent state]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state ? 0
       echo "<inherit_agent_state location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[agent state].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("state", "agent state", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Agent State '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_agent_state_item (my.[agent state], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[agent state].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[agent state].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[agent state].[handler] as [state handler]
        inherit_state_handler ([state handler])
    endfor

    for my.[agent state].[event] as [agent state event]
        inherit_agent_state_event ([agent state event])
    endfor

    for my.[agent state].[default] as [other]
        inherit_other ([other])
    endfor

endfunction

function inherit_state_handler ([state handler])
    my.entity = my.[state handler]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_state_handler ? 0
       echo "<inherit_state_handler location = \"$(my.location)\""
    endif

endfunction

function inherit_state_action ([state action])
    my.entity = my.[state action]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_state_action ? 0
       echo "<inherit_state_action location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_state_event ([agent state event])
    my.entity = my.[agent state event]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state_event ? 0
       echo "<inherit_agent_state_event location = \"$(my.location)\""
    endif

    for my.[agent state event].[action] as [agent state action]
        inherit_agent_state_action ([agent state action])
    endfor

endfunction

function inherit_agent_action ([agent action])
    my.entity = my.[agent action]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_action ? 0
       echo "<inherit_agent_action location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_state_action ([agent state action])
    my.entity = my.[agent state action]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state_action ? 0
       echo "<inherit_agent_state_action location = \"$(my.location)\""
    endif

endfunction

function inherit_call ([call])
    my.entity = my.[call]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_call ? 0
       echo "<inherit_call location = \"$(my.location)\""
    endif

endfunction

function inherit_return ([return])
    my.entity = my.[return]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_return ? 0
       echo "<inherit_return location = \"$(my.location)\""
    endif

endfunction

function inherit_other ([other])
    my.entity = my.[other]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_other ? 0
       echo "<inherit_other location = \"$(my.location)\""
    endif

    for my.[other].[action] as [thread state action]
        inherit_thread_state_action ([thread state action])
    endfor

endfunction

function inherit_thread ([thread])
    my.entity = my.[thread]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread ? 0
       echo "<inherit_thread location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[thread].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("thread", "thread", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Thread '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_thread_item (my.[thread], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

endfunction

function inherit_thread_context ([thread context])
    my.entity = my.[thread context]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_context ? 0
       echo "<inherit_thread_context location = \"$(my.location)\""
    endif

endfunction

function inherit_thread_handler ([thread handler])
    my.entity = my.[thread handler]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_handler ? 0
       echo "<inherit_thread_handler location = \"$(my.location)\""
    endif

    for my.[thread handler].[argument] as [argument]
        inherit_argument ([argument])
    endfor

endfunction

function inherit_thread_state ([thread state])
    my.entity = my.[thread state]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state ? 0
       echo "<inherit_thread_state location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[thread state].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("state", "thread state", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Thread State '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_thread_state_item (my.[thread state], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[thread state].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[thread state].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[thread state].[handler] as [state handler]
        inherit_state_handler ([state handler])
    endfor

    for my.[thread state].[event] as [thread state event]
        inherit_thread_state_event ([thread state event])
    endfor

    for my.[thread state].[default] as [other]
        inherit_other ([other])
    endfor

endfunction

function inherit_thread_state_event ([thread state event])
    my.entity = my.[thread state event]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state_event ? 0
       echo "<inherit_thread_state_event location = \"$(my.location)\""
    endif

    for my.[thread state event].[action] as [thread state action]
        inherit_thread_state_action ([thread state action])
    endfor

endfunction

function inherit_thread_state_action ([thread state action])
    my.entity = my.[thread state action]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state_action ? 0
       echo "<inherit_thread_state_action location = \"$(my.location)\""
    endif

endfunction

function inherit_thread_action ([thread action])
    my.entity = my.[thread action]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_action ? 0
       echo "<inherit_thread_action location = \"$(my.location)\""
    endif

endfunction

function inherit_agent_event ([agent event])
    my.entity = my.[agent event]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_event ? 0
       echo "<inherit_agent_event location = \"$(my.location)\""
    endif

endfunction

function inherit_method ([method])
    my.entity = my.[method]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<inherit_method location = \"$(my.location)\""
    endif

    for my.[method].[argument] as [argument]
        inherit_argument ([argument])
    endfor

    for my.[method].[possess] as [possess]
        inherit_possess ([possess])
    endfor

    for my.[method].[release] as [release]
        inherit_release ([release])
    endfor

endfunction

function inherit_possess ([possess])
    my.entity = my.[possess]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_possess ? 0
       echo "<inherit_possess location = \"$(my.location)\""
    endif

endfunction

function inherit_release ([release])
    my.entity = my.[release]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_release ? 0
       echo "<inherit_release location = \"$(my.location)\""
    endif

endfunction

function inherit_message ([message])
    my.entity = my.[message]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_message ? 0
       echo "<inherit_message location = \"$(my.location)\""
    endif

    for my.[message].[argument] as [argument]
        inherit_argument ([argument])
    endfor

    for my.[message].[method] as [message method]
        inherit_message_method ([message method])
    endfor

    for my.[message].[possess] as [possess]
        inherit_possess ([possess])
    endfor

    for my.[message].[release] as [release]
        inherit_release ([release])
    endfor

endfunction

function inherit_message_method ([message method])
    my.entity = my.[message method]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_message_method ? 0
       echo "<inherit_message_method location = \"$(my.location)\""
    endif

    for my.[message method].[argument] as [argument]
        inherit_argument ([argument])
    endfor

    for my.[message method].[possess] as [possess]
        inherit_possess ([possess])
    endfor

    for my.[message method].[release] as [release]
        inherit_release ([release])
    endfor

endfunction

function inherit_actionlist ([actionlist])
    my.entity = my.[actionlist]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_actionlist ? 0
       echo "<inherit_actionlist location = \"$(my.location)\""
    endif

endfunction

function inherit_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    for my.[inherit].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_option ([option])
    my.entity = my.[option]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<inherit_option location = \"$(my.location)\""
    endif

endfunction


function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

function inherit_top ([smt])
    my.entity = my.[smt]
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_smt ? 0
       echo "<inherit_top location = \"$(my.location)\""
    endif

    for my.[smt].inherit
        if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
            if switches.trace ? 0 | switches.trace_smt ? 0
                echo "Loading $(name)"
            endif
            my.inherit_file = xml.load_file (name + ".smt") ? abort_xml_error ()
            my.inherit_file._filename ?= name
            if my.inherit_file.multiple ? 0 > 0 | !defined (global.top.have_inherit_$(inherit.name))
                for inherit.option
                    copy option to my.inherit_file
                endfor
                scope my.inherit_file as smt
                    preproc_smt (my.inherit_file)
                    inherit_top (my.inherit_file)
                endscope
                global.top.have_inherit_$(inherit.name) = 1
            
                move my.inherit_file to global.inherit
            endif
        endif
    endfor
endfunction

function sort_top_inherits ()
    my.location = location ("agent")

    my.sorted = xml.new ("sorted")
    for global.inherit.agent
        my.[before] =
        my.[after]  =
        if switches.trace ? 0 | switches.trace_smt ? 0
            echo "Inserting $(agent._key)"
        endif
        for my.sorted.agent as sorted

            if ((sorted.role    = class.[before]) ? 0)   | ((sorted.[after] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_smt ? 0
                    echo "    before: $(sorted.name)"
                endif
                my.[before] ?= sorted
            endif
            if ((sorted.role    = class.[after]) ? 0)   | ((sorted.[before] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_smt ? 0
                    echo "    after: $(sorted.name)"
                endif
                if defined (my.[before])
                    preproc_error ("Incoherent inherit order$(my.location)")
                    last
                endif
                my.[after] = sorted
            endif
        endfor
            
        if defined (my.[before])
            move agent before my.[before]
        elsif defined (my.[after])
            move agent after my.[after]
        else
            my.any = my.sorted->?
            if defined (my.any)
                move agent before my.any
            else
                move agent to my.sorted
            endif
        endif
    endfor
    
    for my.sorted.agent
        if switches.trace ? 0 | switches.trace_smt ? 0
            echo "Inheriting $(agent.name)"
        endif
        perform_inherit_smt_item (global.top, agent)
    endfor

endfunction

function perform_inherit_smt (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_smt ? 0
       my.location = location ("agent")
       echo "<inherit_smt location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[agent] ?
    for my.source.[agent] as [smt]
        my.existing = my.target->[agent] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_smt_item (my.existing, [smt])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [smt] before my.insert
                else
                    copy [smt] to my.target
                endif
            else
                copy [smt] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_smt

function perform_inherit_include (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("agent")
       echo "<inherit_include location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[include] ?
    for my.source.[include] as [include]
        if my.inherit = "overlay"
            my.existing = my.target->[include] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_include_item (my.existing, [include])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [include] before my.insert
                else
                    copy [include] to my.target
                endif
            else
                copy [include] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_include

function perform_inherit_catch (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_catch ? 0
       my.location = location ("agent")
       echo "<inherit_catch location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[catch] ?
    for my.source.[catch] as [catch]
        my.existing = my.target->[catch] (0.[error] ?= -1.[error]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_catch_item (my.existing, [catch])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [catch] before my.insert
                else
                    copy [catch] to my.target
                endif
            else
                copy [catch] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_catch

function perform_inherit_private (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_private ? 0
       my.location = location ("agent")
       echo "<inherit_private location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[private] ?
    for my.source.[private] as [private]
        my.existing = my.target->[private] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_private_item (my.existing, [private])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [private] before my.insert
                else
                    copy [private] to my.target
                endif
            else
                copy [private] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_private

function perform_inherit_public (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_public ? 0
       my.location = location ("agent")
       echo "<inherit_public location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[public] ?
    for my.source.[public] as [public]
        my.existing = my.target->[public] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_public_item (my.existing, [public])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [public] before my.insert
                else
                    copy [public] to my.target
                endif
            else
                copy [public] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_public

function perform_inherit_import (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_import ? 0
       my.location = location ("agent")
       echo "<inherit_import location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[import] ?
    for my.source.[import] as [import]
        my.existing = my.target->[import] (0.[class] ?= -1.[class]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_import_item (my.existing, [import])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [import] before my.insert
                else
                    copy [import] to my.target
                endif
            else
                copy [import] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_import

function perform_inherit_agent_context (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_context ? 0
       my.location = location ("agent")
       echo "<inherit_agent_context location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[context] ?
    for my.source.[context] as [agent context]
        my.existing = my.target->[context] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_context_item (my.existing, [agent context])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent context] before my.insert
                else
                    copy [agent context] to my.target
                endif
            else
                copy [agent context] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_context

function perform_inherit_agent_handler (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_handler ? 0
       my.location = location ("agent")
       echo "<inherit_agent_handler location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[handler] ?
    for my.source.[handler] as [agent handler]
        my.existing = my.target->[handler] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_handler_item (my.existing, [agent handler])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent handler] before my.insert
                else
                    copy [agent handler] to my.target
                endif
            else
                copy [agent handler] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_handler

function perform_inherit_argument (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_argument ? 0
       my.location = location ("agent")
       echo "<inherit_argument location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[argument] ?
    for my.source.[argument] as [argument]
        my.existing = my.target->[argument] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_argument_item (my.existing, [argument])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [argument] before my.insert
                else
                    copy [argument] to my.target
                endif
            else
                copy [argument] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_argument

function perform_inherit_agent_state (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_state ? 0
       my.location = location ("agent")
       echo "<inherit_agent_state location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[state] ?
    for my.source.[state] as [agent state]
        my.existing = my.target->[state] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_state_item (my.existing, [agent state])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent state] before my.insert
                else
                    copy [agent state] to my.target
                endif
            else
                copy [agent state] to my.target
            endif
        endif
                [agent state].inherited = 1
    endfor
endfunction perform_inherit_agent_state

function perform_inherit_state_handler (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_state_handler ? 0
       my.location = location ("agent")
       echo "<inherit_state_handler location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[handler] ?
    for my.source.[handler] as [state handler]
        my.existing = my.target->[handler] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_state_handler_item (my.existing, [state handler])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [state handler] before my.insert
                else
                    copy [state handler] to my.target
                endif
            else
                copy [state handler] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_state_handler

function perform_inherit_state_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_state_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [state action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_state_action_item (my.existing, [state action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [state action] before my.insert
                else
                    copy [state action] to my.target
                endif
            else
                copy [state action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_state_action

function perform_inherit_agent_state_event (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_state_event ? 0
       my.location = location ("agent")
       echo "<inherit_agent_state_event location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[event] ?
    for my.source.[event] as [agent state event]
        my.existing = my.target->[event] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_state_event_item (my.existing, [agent state event])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent state event] before my.insert
                else
                    copy [agent state event] to my.target
                endif
            else
                copy [agent state event] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_state_event

function perform_inherit_agent_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_action ? 0
       my.location = location ("agent")
       echo "<inherit_agent_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [agent action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_action_item (my.existing, [agent action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent action] before my.insert
                else
                    copy [agent action] to my.target
                endif
            else
                copy [agent action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_action

function perform_inherit_agent_state_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_agent_state_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [agent state action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_state_action_item (my.existing, [agent state action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent state action] before my.insert
                else
                    copy [agent state action] to my.target
                endif
            else
                copy [agent state action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_state_action

function perform_inherit_call (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_call ? 0
       my.location = location ("agent")
       echo "<inherit_call location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[call] ?
    for my.source.[call] as [call]
        if my.inherit = "overlay"
            my.existing = my.target->[call] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_call_item (my.existing, [call])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [call] before my.insert
                else
                    copy [call] to my.target
                endif
            else
                copy [call] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_call

function perform_inherit_return (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_return ? 0
       my.location = location ("agent")
       echo "<inherit_return location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[return] ?
    for my.source.[return] as [return]
        if my.inherit = "overlay"
            my.existing = my.target->[return] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_return_item (my.existing, [return])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [return] before my.insert
                else
                    copy [return] to my.target
                endif
            else
                copy [return] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_return

function perform_inherit_other (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_other ? 0
       my.location = location ("agent")
       echo "<inherit_other location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[default] ?
    for my.source.[default] as [other]
        if my.inherit = "overlay"
            my.existing = my.target->[default] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_other_item (my.existing, [other])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [other] before my.insert
                else
                    copy [other] to my.target
                endif
            else
                copy [other] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_other

function perform_inherit_thread (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread ? 0
       my.location = location ("agent")
       echo "<inherit_thread location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[thread] ?
    for my.source.[thread] as [thread]
        my.existing = my.target->[thread] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_item (my.existing, [thread])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread] before my.insert
                else
                    copy [thread] to my.target
                endif
            else
                copy [thread] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread

function perform_inherit_thread_context (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_context ? 0
       my.location = location ("agent")
       echo "<inherit_thread_context location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[context] ?
    for my.source.[context] as [thread context]
        my.existing = my.target->[context] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_context_item (my.existing, [thread context])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread context] before my.insert
                else
                    copy [thread context] to my.target
                endif
            else
                copy [thread context] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread_context

function perform_inherit_thread_handler (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_handler ? 0
       my.location = location ("agent")
       echo "<inherit_thread_handler location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[handler] ?
    for my.source.[handler] as [thread handler]
        my.existing = my.target->[handler] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_handler_item (my.existing, [thread handler])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread handler] before my.insert
                else
                    copy [thread handler] to my.target
                endif
            else
                copy [thread handler] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread_handler

function perform_inherit_thread_state (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_state ? 0
       my.location = location ("agent")
       echo "<inherit_thread_state location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[state] ?
    for my.source.[state] as [thread state]
        my.existing = my.target->[state] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_state_item (my.existing, [thread state])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread state] before my.insert
                else
                    copy [thread state] to my.target
                endif
            else
                copy [thread state] to my.target
            endif
        endif
                my.source.inherited = 1
    endfor
endfunction perform_inherit_thread_state

function perform_inherit_thread_state_event (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_state_event ? 0
       my.location = location ("agent")
       echo "<inherit_thread_state_event location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[event] ?
    for my.source.[event] as [thread state event]
        my.existing = my.target->[event] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_state_event_item (my.existing, [thread state event])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [thread state event] before my.insert
                else
                    copy [thread state event] to my.target
                endif
            else
                copy [thread state event] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread_state_event

function perform_inherit_thread_state_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_thread_state_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [thread state action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_state_action_item (my.existing, [thread state action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread state action] before my.insert
                else
                    copy [thread state action] to my.target
                endif
            else
                copy [thread state action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread_state_action

function perform_inherit_thread_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_thread_action ? 0
       my.location = location ("agent")
       echo "<inherit_thread_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [thread action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_thread_action_item (my.existing, [thread action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [thread action] before my.insert
                else
                    copy [thread action] to my.target
                endif
            else
                copy [thread action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_thread_action

function perform_inherit_agent_event (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_agent_event ? 0
       my.location = location ("agent")
       echo "<inherit_agent_event location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[event] ?
    for my.source.[event] as [agent event]
        my.existing = my.target->[event] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_agent_event_item (my.existing, [agent event])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [agent event] before my.insert
                else
                    copy [agent event] to my.target
                endif
            else
                copy [agent event] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_agent_event

function perform_inherit_method (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("agent")
       echo "<inherit_method location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[method] ?
    for my.source.[method] as [method]
        my.existing = my.target->[method] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_method_item (my.existing, [method])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [method] before my.insert
                else
                    copy [method] to my.target
                endif
            else
                copy [method] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_method

function perform_inherit_possess (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_possess ? 0
       my.location = location ("agent")
       echo "<inherit_possess location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[possess] ?
    for my.source.[possess] as [possess]
        if my.inherit = "overlay"
            my.existing = my.target->[possess] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_possess_item (my.existing, [possess])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [possess] before my.insert
                else
                    copy [possess] to my.target
                endif
            else
                copy [possess] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_possess

function perform_inherit_release (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_release ? 0
       my.location = location ("agent")
       echo "<inherit_release location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[release] ?
    for my.source.[release] as [release]
        if my.inherit = "overlay"
            my.existing = my.target->[release] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_release_item (my.existing, [release])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [release] before my.insert
                else
                    copy [release] to my.target
                endif
            else
                copy [release] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_release

function perform_inherit_message (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_message ? 0
       my.location = location ("agent")
       echo "<inherit_message location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[message] ?
    for my.source.[message] as [message]
        my.existing = my.target->[message] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_message_item (my.existing, [message])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [message] before my.insert
                else
                    copy [message] to my.target
                endif
            else
                copy [message] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_message

function perform_inherit_message_method (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_message_method ? 0
       my.location = location ("agent")
       echo "<inherit_message_method location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[method] ?
    for my.source.[method] as [message method]
        my.existing = my.target->[method] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_message_method_item (my.existing, [message method])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [message method] before my.insert
                else
                    copy [message method] to my.target
                endif
            else
                copy [message method] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_message_method

function perform_inherit_actionlist (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_actionlist ? 0
       my.location = location ("agent")
       echo "<inherit_actionlist location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[actionlist] ?
    for my.source.[actionlist] as [actionlist]
        if my.inherit = "overlay"
            my.existing = my.target->[actionlist] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_actionlist_item (my.existing, [actionlist])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [actionlist] before my.insert
                else
                    copy [actionlist] to my.target
                endif
            else
                copy [actionlist] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_actionlist

function perform_inherit_inherit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("agent")
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inherit] ?
    for my.source.[inherit] as [inherit]
        my.existing = my.target->[inherit] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inherit_item (my.existing, [inherit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inherit] before my.insert
                else
                    copy [inherit] to my.target
                endif
            else
                copy [inherit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inherit

function perform_inherit_option (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("agent")
       echo "<inherit_option location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[option] ?
    for my.source.[option] as [option]
        my.existing = my.target->[option] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_option_item (my.existing, [option])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [option] before my.insert
                else
                    copy [option] to my.target
                endif
            else
                copy [option] to my.target
            endif
        endif
            #   Export option to parent and all children
    if !defined (my.target.$(name))
        define_throughout (my.target, option)
    endif
    endfor
endfunction perform_inherit_option

function perform_inherit_smt_item (target, source)
    if switches.trace ? 0 | switches.trace_smt ? 0
       my.location = location ("agent")
       echo "<inherit_smt_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        my.target.[before] ?= my.source.[before] ?
        my.target.[after] ?= my.source.[after] ?
        my.target.[copyright] ?= my.source.[copyright] ?
        my.target.[license] ?= my.source.[license] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[script] ?= my.source.[script] ?
        my.target.[target] ?= my.source.[target] ?
        my.target.[version] ?= my.source.[version] ?
        my.target.[animate] ?= my.source.[animate] ?
        my.target.[trace_size] ?= my.source.[trace_size] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_include (my.target, my.source, , )
        perform_inherit_import (my.target, my.source, , "after")
        perform_inherit_private (my.target, my.source, , )
        perform_inherit_public (my.target, my.source, , )
        perform_inherit_agent_context (my.target, my.source, , )
        perform_inherit_agent_handler (my.target, my.source, , )
        perform_inherit_agent_state (my.target, my.source, , )
        perform_inherit_thread (my.target, my.source, , )
        perform_inherit_agent_event (my.target, my.source, , )
        perform_inherit_agent_action (my.target, my.source, , )
        perform_inherit_catch (my.target, my.source, , )
        perform_inherit_method (my.target, my.source, , )
        perform_inherit_message (my.target, my.source, , )
        perform_inherit_actionlist (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_include_item (target, source)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("agent")
       echo "<inherit_include_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[filename] ?= my.source.[filename] ?
        my.target.[required] ?= my.source.[required] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_catch_item (target, source)
    if switches.trace ? 0 | switches.trace_catch ? 0
       my.location = location ("agent")
       echo "<inherit_catch_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[error] ?= my.source.[error] ?
        my.target.[event] ?= my.source.[event] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_private_item (target, source)
    if switches.trace ? 0 | switches.trace_private ? 0
       my.location = location ("agent")
       echo "<inherit_private_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_public_item (target, source)
    if switches.trace ? 0 | switches.trace_public ? 0
       my.location = location ("agent")
       echo "<inherit_public_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_import_item (target, source)
    if switches.trace ? 0 | switches.trace_import ? 0
       my.location = location ("agent")
       echo "<inherit_import_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[class] ?= my.source.[class] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_context_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_context ? 0
       my.location = location ("agent")
       echo "<inherit_agent_context_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_handler_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_handler ? 0
       my.location = location ("agent")
       echo "<inherit_agent_handler_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_argument (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_argument_item (target, source)
    if switches.trace ? 0 | switches.trace_argument ? 0
       my.location = location ("agent")
       echo "<inherit_argument_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[type] ?= my.source.[type] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_state_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_state ? 0
       my.location = location ("agent")
       echo "<inherit_agent_state_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_state_handler (my.target, my.source, , )
        perform_inherit_agent_state_event (my.target, my.source, "insert", )
        perform_inherit_other (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_state_handler_item (target, source)
    if switches.trace ? 0 | switches.trace_state_handler ? 0
       my.location = location ("agent")
       echo "<inherit_state_handler_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_state_action_item (target, source)
    if switches.trace ? 0 | switches.trace_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_state_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_action_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_action ? 0
       my.location = location ("agent")
       echo "<inherit_agent_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_call (my.target, my.source, , )
        perform_inherit_return (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_state_action_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_agent_state_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_call_item (target, source)
    if switches.trace ? 0 | switches.trace_call ? 0
       my.location = location ("agent")
       echo "<inherit_call_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[state] ?= my.source.[state] ?
        my.target.[event] ?= my.source.[event] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_return_item (target, source)
    if switches.trace ? 0 | switches.trace_return ? 0
       my.location = location ("agent")
       echo "<inherit_return_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_other_item (target, source)
    if switches.trace ? 0 | switches.trace_other ? 0
       my.location = location ("agent")
       echo "<inherit_other_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[nextstate] ?= my.source.[nextstate] ?
        perform_inherit_thread_state_action (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_item (target, source)
    if switches.trace ? 0 | switches.trace_thread ? 0
       my.location = location ("agent")
       echo "<inherit_thread_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[context] ?= my.source.[context] ?
        my.target.[schedule] ?= my.source.[schedule] ?
        my.target.[share] ?= my.source.[share] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_thread_context (my.target, my.source, , )
        perform_inherit_thread_handler (my.target, my.source, , )
        perform_inherit_thread_state (my.target, my.source, , )
        perform_inherit_thread_action (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_context_item (target, source)
    if switches.trace ? 0 | switches.trace_thread_context ? 0
       my.location = location ("agent")
       echo "<inherit_thread_context_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_handler_item (target, source)
    if switches.trace ? 0 | switches.trace_thread_handler ? 0
       my.location = location ("agent")
       echo "<inherit_thread_handler_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_argument (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_state_item (target, source)
    if switches.trace ? 0 | switches.trace_thread_state ? 0
       my.location = location ("agent")
       echo "<inherit_thread_state_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_state_handler (my.target, my.source, "overlay", "before")
        perform_inherit_thread_state_event (my.target, my.source, "insert", "after")
        perform_inherit_other (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_state_action_item (target, source)
    if switches.trace ? 0 | switches.trace_thread_state_action ? 0
       my.location = location ("agent")
       echo "<inherit_thread_state_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_thread_action_item (target, source)
    if switches.trace ? 0 | switches.trace_thread_action ? 0
       my.location = location ("agent")
       echo "<inherit_thread_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        perform_inherit_call (my.target, my.source, "overlay", "before")
        perform_inherit_return (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_agent_event_item (target, source)
    if switches.trace ? 0 | switches.trace_agent_event ? 0
       my.location = location ("agent")
       echo "<inherit_agent_event_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_method_item (target, source)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("agent")
       echo "<inherit_method_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[event] ?= my.source.[event] ?
        my.target.[priority] ?= my.source.[priority] ?
        my.target.[message] ?= my.source.[message] ?
        perform_inherit_argument (my.target, my.source, "overlay", "before")
        perform_inherit_possess (my.target, my.source, , )
        perform_inherit_release (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_possess_item (target, source)
    if switches.trace ? 0 | switches.trace_possess ? 0
       my.location = location ("agent")
       echo "<inherit_possess_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_release_item (target, source)
    if switches.trace ? 0 | switches.trace_release ? 0
       my.location = location ("agent")
       echo "<inherit_release_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_message_item (target, source)
    if switches.trace ? 0 | switches.trace_message ? 0
       my.location = location ("agent")
       echo "<inherit_message_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[priority] ?= my.source.[priority] ?
        perform_inherit_argument (my.target, my.source, "overlay", "before")
        perform_inherit_message_method (my.target, my.source, , )
        perform_inherit_possess (my.target, my.source, "overlay", "before")
        perform_inherit_release (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_message_method_item (target, source)
    if switches.trace ? 0 | switches.trace_message_method ? 0
       my.location = location ("agent")
       echo "<inherit_message_method_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[event] ?= my.source.[event] ?
        my.target.[priority] ?= my.source.[priority] ?
        my.target.[message] ?= my.source.[message] ?
        perform_inherit_argument (my.target, my.source, "overlay", "before")
        perform_inherit_possess (my.target, my.source, "overlay", "before")
        perform_inherit_release (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_actionlist_item (target, source)
    if switches.trace ? 0 | switches.trace_actionlist ? 0
       my.location = location ("agent")
       echo "<inherit_actionlist_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inherit_item (target, source)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("agent")
       echo "<inherit_inherit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_option_item (target, source)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("agent")
       echo "<inherit_option_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction



function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

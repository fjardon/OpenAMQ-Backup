#   'Preproc' engine for smt
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function preproc_smt ([smt])
    my.entity = my.[smt]
    my.[smt]._entity = "smt"
    my.[smt]._key = my.[smt].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_smt ? 0
       echo "<preproc_smt location = \"$(my.location)\""
    endif

    #   Initialise house-keeping attributes
    agent.lastthread     = 0
    agent.laststate      = 0
    agent.lastevent      = 0
    agent.lastaction     = 0
    agent.lastactionlist = 0
    agent.lastplace      = 0
    agent.animate        = switches.animate ? agent.animate ? 0
    
    #   Create defaults state if it doesn't exist
    my.defaults = agent-> state (name = "defaults") ?
    if ! defined (my.defaults)
        my.defaults = agent.new ("state")
        my.defaults.name = "defaults"
    endif
    preproc_agent_state (my.defaults)
    
    #   Create shutdown state
    my.shutdown = agent.new ("state")
    my.shutdown.name = ""
    
    #   Create shutdown event in defaults state if it doesn't exist
    my.shutdown = my.defaults-> event (name = "shutdown") ?
    if ! defined (my.shutdown)
        my.shutdown           = my.defaults.new ("event")
        my.shutdown.name      = "shutdown"
        my.shutdown.nextstate = ""
    endif
    if defined (my.entity.role)
        global.have_role_$(my.entity.role) = 1
    endif
    for my.[smt].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[smt].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[smt].[include] as [include]
        preproc_include ([include])
    endfor

    for my.[smt].[import] as [import]
        preproc_import ([import])
    endfor

    for my.[smt].[private] as [private]
        preproc_private ([private])
    endfor

    for my.[smt].[public] as [public]
        preproc_public ([public])
    endfor

    for my.[smt].[context] as [agent context]
        preproc_agent_context ([agent context])
    endfor

    for my.[smt].[handler] as [agent handler]
        preproc_agent_handler ([agent handler])
    endfor

    for my.[smt].[state] as [agent state]
        preproc_agent_state ([agent state])
    endfor

    for my.[smt].[thread] as [thread]
        preproc_thread ([thread])
    endfor

    for my.[smt].[event] as [agent event]
        preproc_agent_event ([agent event])
    endfor

    for my.[smt].[action] as [agent action]
        preproc_agent_action ([agent action])
    endfor

    for my.[smt].[catch] as [catch]
        preproc_catch ([catch])
    endfor

    for my.[smt].[method] as [method]
        preproc_method ([method])
    endfor

    for my.[smt].[message] as [message]
        preproc_message ([message])
    endfor

    for my.[smt].[actionlist] as [actionlist]
        preproc_actionlist ([actionlist])
    endfor

    if !my.[smt].deleted ()
        my.[smt]._key = my.[smt].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_include ([include])
    my.entity = my.[include]
    my.[include]._entity = "include"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<preproc_include location = \"$(my.location)\""
    endif

    agent.load_file (filename)
    if !my.[include].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_catch ([catch])
    my.entity = my.[catch]
    my.[catch]._entity = "catch"
    my.[catch]._key = my.[catch].[error] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_catch ? 0
       echo "<preproc_catch location = \"$(my.location)\""
    endif

    if !my.[catch].deleted ()
        my.[catch]._key = my.[catch].[error] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_private ([private])
    my.entity = my.[private]
    my.[private]._entity = "private"
    my.[private]._key = my.[private].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_private ? 0
       echo "<preproc_private location = \"$(my.location)\""
    endif

    if !my.[private].deleted ()
        my.[private]._key = my.[private].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_public ([public])
    my.entity = my.[public]
    my.[public]._entity = "public"
    my.[public]._key = my.[public].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_public ? 0
       echo "<preproc_public location = \"$(my.location)\""
    endif

    if !my.[public].deleted ()
        my.[public]._key = my.[public].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_import ([import])
    my.entity = my.[import]
    my.[import]._entity = "import"
    my.[import]._key = my.[import].[class] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_import ? 0
       echo "<preproc_import location = \"$(my.location)\""
    endif

    if !my.[import].deleted ()
        my.[import]._key = my.[import].[class] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_context ([agent context])
    my.entity = my.[agent context]
    my.[agent context]._entity = "agent context"
    my.[agent context]._key = my.[agent context].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_context ? 0
       echo "<preproc_agent_context location = \"$(my.location)\""
    endif

    if !my.[agent context].deleted ()
        my.[agent context]._key = my.[agent context].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_handler ([agent handler])
    my.entity = my.[agent handler]
    my.[agent handler]._entity = "agent handler"
    my.[agent handler]._key = my.[agent handler].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_handler ? 0
       echo "<preproc_agent_handler location = \"$(my.location)\""
    endif

    for my.[agent handler].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    if !my.[agent handler].deleted ()
        my.[agent handler]._key = my.[agent handler].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_argument ([argument])
    my.entity = my.[argument]
    my.[argument]._entity = "argument"
    my.[argument]._key = my.[argument].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_argument ? 0
       echo "<preproc_argument location = \"$(my.location)\""
    endif

    if !my.[argument].deleted ()
        my.[argument]._key = my.[argument].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_state ([agent state])
    my.entity = my.[agent state]
    my.[agent state]._entity = "agent state"
    my.[agent state]._key = my.[agent state].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state ? 0
       echo "<preproc_agent_state location = \"$(my.location)\""
    endif

        for my.[agent state].method
            new my.[agent state].event
                event.name = method.name + "_m"
                event.nextstate = method.nextstate ?
                for method. as child
                    move child to event
                endfor
            endnew
            method.delete ()
        endfor
            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[agent state].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[agent state].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[agent state].[handler] as [state handler]
        preproc_state_handler ([state handler])
    endfor

    for my.[agent state].[event] as [agent state event]
        preproc_agent_state_event ([agent state event])
    endfor

    for my.[agent state].[default] as [other]
        preproc_other ([other])
    endfor

    if !my.[agent state].deleted ()
        my.[agent state]._key = my.[agent state].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_state_handler ([state handler])
    my.entity = my.[state handler]
    my.[state handler]._entity = "state handler"
    my.[state handler]._key = my.[state handler].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_state_handler ? 0
       echo "<preproc_state_handler location = \"$(my.location)\""
    endif

    if !my.[state handler].deleted ()
        my.[state handler]._key = my.[state handler].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_state_action ([state action])
    my.entity = my.[state action]
    my.[state action]._entity = "state action"
    my.[state action]._key = my.[state action].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_state_action ? 0
       echo "<preproc_state_action location = \"$(my.location)\""
    endif

    if !my.[state action].deleted ()
        my.[state action]._key = my.[state action].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_state_event ([agent state event])
    my.entity = my.[agent state event]
    my.[agent state event]._entity = "agent state event"
    my.[agent state event]._key = my.[agent state event].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state_event ? 0
       echo "<preproc_agent_state_event location = \"$(my.location)\""
    endif

    for my.[agent state event].[action] as [agent state action]
        preproc_agent_state_action ([agent state action])
    endfor

        for my.[agent state event]. as child
            if ! (name () ?= "action")
                build_action (child)
            endif
        endfor
    if !my.[agent state event].deleted ()
        my.[agent state event]._key = my.[agent state event].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_action ([agent action])
    my.entity = my.[agent action]
    my.[agent action]._entity = "agent action"
    my.[agent action]._key = my.[agent action].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_action ? 0
       echo "<preproc_agent_action location = \"$(my.location)\""
    endif

        /*  Build implicit actions                                           */
        if count (my.[agent action].) > 1
            for my.[agent action]. as child
                if ! (name () ?= "action")
                    build_action (child)
                endif
            endfor
        endif
    if !my.[agent action].deleted ()
        my.[agent action]._key = my.[agent action].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_state_action ([agent state action])
    my.entity = my.[agent state action]
    my.[agent state action]._entity = "agent state action"
    my.[agent state action]._key = my.[agent state action].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_state_action ? 0
       echo "<preproc_agent_state_action location = \"$(my.location)\""
    endif

    if !my.[agent state action].deleted ()
        my.[agent state action]._key = my.[agent state action].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_call ([call])
    my.entity = my.[call]
    my.[call]._entity = "call"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_call ? 0
       echo "<preproc_call location = \"$(my.location)\""
    endif

    if !my.[call].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_return ([return])
    my.entity = my.[return]
    my.[return]._entity = "return"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_return ? 0
       echo "<preproc_return location = \"$(my.location)\""
    endif

    if !my.[return].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_other ([other])
    my.entity = my.[other]
    my.[other]._entity = "other"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_other ? 0
       echo "<preproc_other location = \"$(my.location)\""
    endif

    for my.[other].[action] as [thread state action]
        preproc_thread_state_action ([thread state action])
    endfor

        for my.[other]. as child
            if ! (name () ?= "action")
                build_action (child)
            endif
        endfor
    if !my.[other].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread ([thread])
    my.entity = my.[thread]
    my.[thread]._entity = "thread"
    my.[thread]._key = my.[thread].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread ? 0
       echo "<preproc_thread location = \"$(my.location)\""
    endif

        #   If this is a share thread then generate "smt_thread_t *share"
        #   argument to thread new handler.
        if thread.share ? 0
            my.handler = thread->handler (name = "thread new") ?
            if ! defined (my.handler)
                my.handler = thread.new ("handler")
                my.handler.name = "thread new"
            endif
            my.argument = xml.new ("argument")
            my.argument.name = "share"
            my.argument.type = "smt_thread_t *"
            my.firstargument = my.handler->argument ?
            if defined (my.firstargument)
                move my.argument before my.firstargument
            else
                move my.argument to my.handler
            endif
        endif
        
        #   Create defaults state if it doesn't exist
        my.defaults = thread-> state (name = "defaults") ?
        if ! defined (my.defaults)
            my.defaults = thread.new ("state")
            my.defaults._entity = "thread state"
            my.defaults.name    = "defaults"
            my.defaults._key    = "defaults"
        endif
        preproc_thread_state (my.defaults)
            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
        /*  Because thread is disconnected, manually process children        */
        for thread.inherit
            preproc_inherit (inherit)
        endfor
        for thread.context as [thread context]
            preproc_thread_context ([thread context])
        endfor
        for thread.handler as [thread handler]
            preproc_thread_handler ([thread handler])
        endfor
        for thread.state as [thread state]
            preproc_thread_state ([thread state])
        endfor
        for thread.action as [thread action]
            preproc_thread_action ([thread action])
        endfor
    if !my.[thread].deleted ()
        my.[thread]._key = my.[thread].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_context ([thread context])
    my.entity = my.[thread context]
    my.[thread context]._entity = "thread context"
    my.[thread context]._key = my.[thread context].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_context ? 0
       echo "<preproc_thread_context location = \"$(my.location)\""
    endif

    if !my.[thread context].deleted ()
        my.[thread context]._key = my.[thread context].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_handler ([thread handler])
    my.entity = my.[thread handler]
    my.[thread handler]._entity = "thread handler"
    my.[thread handler]._key = my.[thread handler].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_handler ? 0
       echo "<preproc_thread_handler location = \"$(my.location)\""
    endif

    for my.[thread handler].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    if !my.[thread handler].deleted ()
        my.[thread handler]._key = my.[thread handler].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_state ([thread state])
    my.entity = my.[thread state]
    my.[thread state]._entity = "thread state"
    my.[thread state]._key = my.[thread state].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state ? 0
       echo "<preproc_thread_state location = \"$(my.location)\""
    endif

        for my.[thread state].method
            new my.[thread state].event
                event.name = method.name + "_m"
                event.nextstate = method.nextstate ?
                for method. as child
                    move child to event
                endfor
            endnew
            method.delete ()
        endfor
            #   Fudge for backwards compatibility  
        if defined (my.entity.template)
            my.firstinherit = my.entity->inherit ?
            if defined (my.firstinherit)
                new my.entity.inherit before my.firstinherit
                    inherit.name = my.entity.template
                endnew
            else
                new my.entity.inherit
                    inherit.name = my.entity.template
                endnew
            endif
            my.entity.template =
        endif
    for my.[thread state].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[thread state].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[thread state].[handler] as [state handler]
        preproc_state_handler ([state handler])
    endfor

    for my.[thread state].[event] as [thread state event]
        preproc_thread_state_event ([thread state event])
    endfor

    for my.[thread state].[default] as [other]
        preproc_other ([other])
    endfor

    if !my.[thread state].deleted ()
        my.[thread state]._key = my.[thread state].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_state_event ([thread state event])
    my.entity = my.[thread state event]
    my.[thread state event]._entity = "thread state event"
    my.[thread state event]._key = my.[thread state event].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state_event ? 0
       echo "<preproc_thread_state_event location = \"$(my.location)\""
    endif

    for my.[thread state event].[action] as [thread state action]
        preproc_thread_state_action ([thread state action])
    endfor

        for my.[thread state event]. as child
            if ! (name () ?= "action")
                build_action (child)
            endif
        endfor
    if !my.[thread state event].deleted ()
        my.[thread state event]._key = my.[thread state event].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_state_action ([thread state action])
    my.entity = my.[thread state action]
    my.[thread state action]._entity = "thread state action"
    my.[thread state action]._key = my.[thread state action].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_state_action ? 0
       echo "<preproc_thread_state_action location = \"$(my.location)\""
    endif

    if !my.[thread state action].deleted ()
        my.[thread state action]._key = my.[thread state action].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_thread_action ([thread action])
    my.entity = my.[thread action]
    my.[thread action]._entity = "thread action"
    my.[thread action]._key = my.[thread action].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_thread_action ? 0
       echo "<preproc_thread_action location = \"$(my.location)\""
    endif

        move my.[thread action] to agent
    if !my.[thread action].deleted ()
        my.[thread action]._key = my.[thread action].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_agent_event ([agent event])
    my.entity = my.[agent event]
    my.[agent event]._entity = "agent event"
    my.[agent event]._key = my.[agent event].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_agent_event ? 0
       echo "<preproc_agent_event location = \"$(my.location)\""
    endif

    if !my.[agent event].deleted ()
        my.[agent event]._key = my.[agent event].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_method ([method])
    my.entity = my.[method]
    my.[method]._entity = "method"
    my.[method]._key = my.[method].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<preproc_method location = \"$(my.location)\""
    endif

        if defined (my.method-> argument) & ! defined  (my.method.message)
            my.message = agent.new ("message")
            my.message.name = my.method.name
            my.message.priority = my.method.priority ? "normal"
            for my.method.argument
                move argument to my.message
            endfor
            for my.method.possess
                move possess to my.message
            endfor
            for my.method.release
                move release to my.message
            endfor
            move my.method to my.message
        endif
    for my.[method].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    for my.[method].[possess] as [possess]
        preproc_possess ([possess])
    endfor

    for my.[method].[release] as [release]
        preproc_release ([release])
    endfor

    if !my.[method].deleted ()
        my.[method]._key = my.[method].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_possess ([possess])
    my.entity = my.[possess]
    my.[possess]._entity = "possess"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_possess ? 0
       echo "<preproc_possess location = \"$(my.location)\""
    endif

    if !my.[possess].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_release ([release])
    my.entity = my.[release]
    my.[release]._entity = "release"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_release ? 0
       echo "<preproc_release location = \"$(my.location)\""
    endif

    if !my.[release].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_message ([message])
    my.entity = my.[message]
    my.[message]._entity = "message"
    my.[message]._key = my.[message].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_message ? 0
       echo "<preproc_message location = \"$(my.location)\""
    endif

    for my.[message].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    for my.[message].[method] as [message method]
        preproc_message_method ([message method])
    endfor

    for my.[message].[possess] as [possess]
        preproc_possess ([possess])
    endfor

    for my.[message].[release] as [release]
        preproc_release ([release])
    endfor

    if !my.[message].deleted ()
        my.[message]._key = my.[message].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_message_method ([message method])
    my.entity = my.[message method]
    my.[message method]._entity = "message method"
    my.[message method]._key = my.[message method].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_message_method ? 0
       echo "<preproc_message_method location = \"$(my.location)\""
    endif

        my.[message method].message ?= message.name
        for message.argument
            copy argument to my.[message method]
        endfor
        for message.possess
            copy possess to my.[message method]
        endfor
        for message.release
            copy release to my.[message method]
        endfor
        copy my.[message method] to agent
    for my.[message method].[argument] as [argument]
        preproc_argument ([argument])
    endfor

    for my.[message method].[possess] as [possess]
        preproc_possess ([possess])
    endfor

    for my.[message method].[release] as [release]
        preproc_release ([release])
    endfor

    if !my.[message method].deleted ()
        my.[message method]._key = my.[message method].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_actionlist ([actionlist])
    my.entity = my.[actionlist]
    my.[actionlist]._entity = "actionlist"
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_actionlist ? 0
       echo "<preproc_actionlist location = \"$(my.location)\""
    endif

    if !my.[actionlist].deleted ()
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_inherit ([inherit])
    my.entity = my.[inherit]
    my.[inherit]._entity = "inherit"
    my.[inherit]._key = my.[inherit].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<preproc_inherit location = \"$(my.location)\""
    endif

        #   Fudge for backwards compatibility  
        inherit.name ?= inherit.$(name($(-1))) ?
        if defined (inherit.name)
            inherit.name = gsl.exec (inherit.name, 1)
        endif
        inherit._key ?= inherit.name ?
    if !defined (my.[inherit].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[inherit].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[inherit].deleted ()
        my.[inherit]._key = my.[inherit].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function preproc_option ([option])
    my.entity = my.[option]
    my.[option]._entity = "option"
    my.[option]._key = my.[option].[name] ?
    my.entity._smt ?= [smt]._key ?
    my.location = location ("agent")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<preproc_option location = \"$(my.location)\""
    endif

    if !defined (my.[option].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[option].[value])
        preproc_error ("Required attribute 'value' not defined$(my.location)")
    endif
    #   Export option to parent and all children
    my.parent = my.option.parent ()
    if defined (my.parent.$(my.option.name)) & my.parent.$(my.option.name) <> my.option.value
        preproc_error ("Option '$(my.option.name)' is already defined in $(name(my.parent)): $(my.parent._key?)")
    else
        define_throughout (my.parent, my.option)
    endif
    if !my.[option].deleted ()
        my.[option]._key = my.[option].[name] ?
        my.entity._smt ?= [smt]._key ?
    endif
endfunction

function build_action (child)
    my.newaction = xml.new ("action")
    move my.newaction before my.child
    move my.child to my.newaction
        
    #   Fudge a name for the action here...
    if name (my.child) ?= "call"
        my.newaction.name ?= "dialog call $(my.child.state) $(my.child.event?)"
    elsif name (my.child) ?= "return"
        my.newaction.name ?= "dialog return"
    endif
endfunction

function preproc_error (message)
    echo (my.message)
    global.errno = 1
endfunction

.template 0
#   Command-line code generator for smt_object.
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function link_target (tag, entity, field, value)
    my.scopenum = 1
    while $(my.scopenum) <> global.top
        my.scopenum -= 1
        my.target = $(my.scopenum)->$(my.tag) ((0._entity ?= my.entity | (!defined (my.entity))) & 0.$(my.field) ?= my.value) ?
        if defined (my.target)
            return my.target
        endif
    endwhile
endfunction

function location (top)
    my.scopenum = 0
    my.location = ""
    while name ($(my.scopenum)) <> my.top
        my.location += " in $(name($(my.scopenum))) '$($(my.scopenum)._key?item($(my.scopenum))?)'"
        my.scopenum -= 1
    endwhile
    my.location += " in $(name($(my.scopenum))) '$($(my.scopenum)._key?item($(my.scopenum))?)'"
    return my.location
endfunction

function expand (gsl_script)
    if defined (my.gsl_script)
        my.result = gsl.exec (my.gsl_script, 1) ?
        if ! defined (my.result)
            abort "Error in GSL script:
$(my.gsl_script)"
        endif
    endif
    return my.result
endfunction

function abort_xml_error ()
   abort xml.error
endfunction

function delete_abstract (entity)
    if my.entity.abstract ?= 1
        my.entity.delete ()
    else
        for my.entity. as child where defined (name (child))
            delete_abstract (child)
        endfor
    endif
endfunction

function define_throughout (parent, option)
    my.parent.$(my.option.name) ?= gsl.exec (my.option.value, 1)
    for my.parent. as child where defined (name (child))
        define_throughout (child, my.option)
    endfor
endfunction

include "license.gsl"
include "smt_object_preproc.gsl"
include "smt_object_inherit.gsl"
include "smt_object_parse.gsl"

ignorecase = 0
global.errno    = 0
global.top      =  class
global.top_tag  = "class"
global.top_name = "icl"
global.inherit  = xml.new ("inherit")

scope global.top as [icl]


    if global.errno = 0
        preproc_icl ([icl])
    endif
    if global.errno = 0
        inherit_top ([icl])
        sort_top_inherits ()
        inherit_icl ([icl])
    endif
    if global.errno = 0
        parse_icl ([icl])
    endif
    #   We can force the icl to non-abstract via the cmdline
    if switches.abstract ?= 0
        icl.abstract = 0
    endif

    #   Walk the entity tree and delete all abstract entities
    delete_abstract ([icl])
    if ![icl].deleted ()
        if switches.debug ?= 1
            save class
        endif

        if global.errno = 0
    [gsl].include ("icl_$(global.top.target).gsl")
    generate_class (global.top)
endif
    else
        echo "WARNING: Abstract class - No code generated."
    endif
endscope
.endtemplate

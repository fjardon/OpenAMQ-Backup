#   'Preproc' engine for demo_pal
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function preproc_pal ([pal])
    my.entity = my.[pal]
    my.[pal]._entity = "pal"
    my.[pal]._key = my.[pal].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_pal ? 0
       echo "<preproc_pal location = \"$(my.location)\""
    endif

    if defined (my.entity.role)
        global.have_role_$(my.entity.role) = 1
    endif
    for my.[pal].[option] as [option]
        preproc_option ([option])
    endfor

    for my.[pal].[inherit] as [inherit]
        preproc_inherit ([inherit])
    endfor

    for my.[pal].[doc] as [doc]
        preproc_doc ([doc])
    endfor

    for my.[pal].[macro] as [macro]
        preproc_macro ([macro])
    endfor

    for my.[pal].[include] as [include]
        preproc_include ([include])
    endfor

    for my.[pal].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[pal].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[pal].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[pal].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[pal].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[pal].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[pal].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[pal].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[pal].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[pal].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[pal].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[pal].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[pal].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[pal].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[pal].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[pal].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[pal].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[pal].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[pal].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[pal].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[pal].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[pal].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[pal].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[pal].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[pal].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[pal].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[pal].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[pal].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[pal].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[pal].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[pal].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[pal].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[pal].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[pal].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[pal].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[pal].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[pal].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[pal].deleted ()
        my.[pal]._key = my.[pal].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_doc ([doc])
    my.entity = my.[doc]
    my.[doc]._entity = "doc"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<preproc_doc location = \"$(my.location)\""
    endif

    if !my.[doc].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_include ([include])
    my.entity = my.[include]
    my.[include]._entity = "include"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<preproc_include location = \"$(my.location)\""
    endif

    if !defined (my.[include].[filename])
        preproc_error ("Required attribute 'filename' not defined$(my.location)")
    endif
        xml after include from filename
    if !my.[include].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_macro ([macro])
    my.entity = my.[macro]
    my.[macro]._entity = "macro"
    my.[macro]._key = my.[macro].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_macro ? 0
       echo "<preproc_macro location = \"$(my.location)\""
    endif

    if !my.[macro].deleted ()
        my.[macro]._key = my.[macro].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_scripting ([scripting])
    my.entity = my.[scripting]
    my.[scripting]._entity = "scripting"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_scripting ? 0
       echo "<preproc_scripting location = \"$(my.location)\""
    endif

    for my.[scripting].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[scripting].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[scripting].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[scripting].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[scripting].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[scripting].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[scripting].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[scripting].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[scripting].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[scripting].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[scripting].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[scripting].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[scripting].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[scripting].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[scripting].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[scripting].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[scripting].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[scripting].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[scripting].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[scripting].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[scripting].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[scripting].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[scripting].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[scripting].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[scripting].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[scripting].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[scripting].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[scripting].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[scripting].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[scripting].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[scripting].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[scripting].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[scripting].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[scripting].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[scripting].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[scripting].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[scripting].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[scripting].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_session ([session])
    my.entity = my.[session]
    my.[session]._entity = "session"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_session ? 0
       echo "<preproc_session location = \"$(my.location)\""
    endif

    for my.[session].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[session].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[session].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[session].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[session].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[session].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[session].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[session].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[session].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[session].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[session].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[session].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[session].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[session].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[session].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[session].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[session].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[session].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[session].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[session].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[session].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[session].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[session].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[session].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[session].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[session].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[session].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[session].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[session].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[session].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[session].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[session].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[session].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[session].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[session].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[session].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[session].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[session].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_invoke ([invoke])
    my.entity = my.[invoke]
    my.[invoke]._entity = "invoke"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_invoke ? 0
       echo "<preproc_invoke location = \"$(my.location)\""
    endif

    for my.[invoke].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[invoke].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[invoke].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[invoke].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[invoke].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[invoke].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[invoke].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[invoke].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[invoke].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[invoke].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[invoke].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[invoke].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[invoke].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[invoke].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[invoke].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[invoke].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[invoke].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[invoke].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[invoke].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[invoke].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[invoke].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[invoke].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[invoke].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[invoke].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[invoke].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[invoke].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[invoke].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[invoke].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[invoke].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[invoke].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[invoke].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[invoke].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[invoke].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[invoke].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[invoke].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[invoke].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[invoke].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[invoke].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_server ([server])
    my.entity = my.[server]
    my.[server]._entity = "server"
    my.[server]._key = my.[server].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_server ? 0
       echo "<preproc_server location = \"$(my.location)\""
    endif

    for my.[server].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[server].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[server].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[server].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[server].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[server].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[server].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[server].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[server].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[server].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[server].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[server].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[server].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[server].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[server].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[server].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[server].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[server].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[server].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[server].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[server].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[server].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[server].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[server].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[server].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[server].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[server].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[server].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[server].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[server].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[server].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[server].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[server].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[server].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[server].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[server].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[server].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[server].deleted ()
        my.[server]._key = my.[server].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_timer ([timer])
    my.entity = my.[timer]
    my.[timer]._entity = "timer"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_timer ? 0
       echo "<preproc_timer location = \"$(my.location)\""
    endif

    if !my.[timer].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_set ([set])
    my.entity = my.[set]
    my.[set]._entity = "set"
    my.[set]._key = my.[set].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_set ? 0
       echo "<preproc_set location = \"$(my.location)\""
    endif

    if !my.[set].deleted ()
        my.[set]._key = my.[set].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_inc ([inc])
    my.entity = my.[inc]
    my.[inc]._entity = "inc"
    my.[inc]._key = my.[inc].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_inc ? 0
       echo "<preproc_inc location = \"$(my.location)\""
    endif

    if !my.[inc].deleted ()
        my.[inc]._key = my.[inc].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_dec ([dec])
    my.entity = my.[dec]
    my.[dec]._entity = "dec"
    my.[dec]._key = my.[dec].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_dec ? 0
       echo "<preproc_dec location = \"$(my.location)\""
    endif

    if !my.[dec].deleted ()
        my.[dec]._key = my.[dec].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_read ([read])
    my.entity = my.[read]
    my.[read]._entity = "read"
    my.[read]._key = my.[read].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_read ? 0
       echo "<preproc_read location = \"$(my.location)\""
    endif

    if !my.[read].deleted ()
        my.[read]._key = my.[read].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_random ([random])
    my.entity = my.[random]
    my.[random]._entity = "random"
    my.[random]._key = my.[random].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_random ? 0
       echo "<preproc_random location = \"$(my.location)\""
    endif

    if !my.[random].deleted ()
        my.[random]._key = my.[random].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_echo ([echo])
    my.entity = my.[echo]
    my.[echo]._entity = "echo"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_echo ? 0
       echo "<preproc_echo location = \"$(my.location)\""
    endif

    if !my.[echo].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_assert ([assert])
    my.entity = my.[assert]
    my.[assert]._entity = "assert"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<preproc_assert location = \"$(my.location)\""
    endif

    if !my.[assert].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_repeat ([repeat])
    my.entity = my.[repeat]
    my.[repeat]._entity = "repeat"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_repeat ? 0
       echo "<preproc_repeat location = \"$(my.location)\""
    endif

    for my.[repeat].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[repeat].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[repeat].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[repeat].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[repeat].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[repeat].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[repeat].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[repeat].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[repeat].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[repeat].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[repeat].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[repeat].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[repeat].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[repeat].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[repeat].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[repeat].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[repeat].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[repeat].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[repeat].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[repeat].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[repeat].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[repeat].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[repeat].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[repeat].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[repeat].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[repeat].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[repeat].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[repeat].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[repeat].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[repeat].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[repeat].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[repeat].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[repeat].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[repeat].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[repeat].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[repeat].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[repeat].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[repeat].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_while ([while])
    my.entity = my.[while]
    my.[while]._entity = "while"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_while ? 0
       echo "<preproc_while location = \"$(my.location)\""
    endif

    for my.[while].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[while].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[while].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[while].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[while].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[while].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[while].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[while].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[while].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[while].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[while].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[while].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[while].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[while].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[while].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[while].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[while].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[while].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[while].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[while].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[while].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[while].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[while].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[while].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[while].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[while].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[while].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[while].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[while].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[while].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[while].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[while].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[while].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[while].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[while].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[while].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[while].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[while].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_if ([if])
    my.entity = my.[if]
    my.[if]._entity = "if"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_if ? 0
       echo "<preproc_if location = \"$(my.location)\""
    endif

    for my.[if].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[if].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[if].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[if].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[if].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[if].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[if].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[if].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[if].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[if].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[if].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[if].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[if].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[if].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[if].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[if].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[if].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[if].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[if].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[if].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[if].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[if].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[if].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[if].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[if].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[if].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[if].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[if].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[if].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[if].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[if].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[if].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[if].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[if].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[if].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[if].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[if].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[if].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_else ([else])
    my.entity = my.[else]
    my.[else]._entity = "else"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_else ? 0
       echo "<preproc_else location = \"$(my.location)\""
    endif

    for my.[else].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[else].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[else].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[else].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[else].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[else].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[else].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[else].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[else].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[else].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[else].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[else].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[else].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[else].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[else].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[else].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[else].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[else].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[else].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[else].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[else].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[else].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[else].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[else].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[else].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[else].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[else].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[else].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[else].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[else].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[else].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[else].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[else].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[else].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[else].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[else].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[else].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[else].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_elsif ([elsif])
    my.entity = my.[elsif]
    my.[elsif]._entity = "elsif"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_elsif ? 0
       echo "<preproc_elsif location = \"$(my.location)\""
    endif

    for my.[elsif].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[elsif].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[elsif].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[elsif].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[elsif].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[elsif].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[elsif].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[elsif].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[elsif].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[elsif].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[elsif].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[elsif].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[elsif].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[elsif].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[elsif].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[elsif].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[elsif].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[elsif].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[elsif].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[elsif].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[elsif].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[elsif].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[elsif].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[elsif].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[elsif].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[elsif].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[elsif].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[elsif].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[elsif].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[elsif].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[elsif].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[elsif].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[elsif].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[elsif].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[elsif].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[elsif].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[elsif].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[elsif].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_wait ([wait])
    my.entity = my.[wait]
    my.[wait]._entity = "wait"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_wait ? 0
       echo "<preproc_wait location = \"$(my.location)\""
    endif

    if !my.[wait].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_sleep ([sleep])
    my.entity = my.[sleep]
    my.[sleep]._entity = "sleep"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_sleep ? 0
       echo "<preproc_sleep location = \"$(my.location)\""
    endif

    if !my.[sleep].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_break ([break])
    my.entity = my.[break]
    my.[break]._entity = "break"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_break ? 0
       echo "<preproc_break location = \"$(my.location)\""
    endif

    if !my.[break].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_abort ([abort])
    my.entity = my.[abort]
    my.[abort]._entity = "abort"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_abort ? 0
       echo "<preproc_abort location = \"$(my.location)\""
    endif

    if !my.[abort].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_exit ([exit])
    my.entity = my.[exit]
    my.[exit]._entity = "exit"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exit ? 0
       echo "<preproc_exit location = \"$(my.location)\""
    endif

    if !my.[exit].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_channel_flow ([channel_flow])
    my.entity = my.[channel_flow]
    my.[channel_flow]._entity = "channel_flow"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_channel_flow ? 0
       echo "<preproc_channel_flow location = \"$(my.location)\""
    endif

    if !my.[channel_flow].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_channel_flow_ok ([channel_flow_ok])
    my.entity = my.[channel_flow_ok]
    my.[channel_flow_ok]._entity = "channel_flow_ok"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_channel_flow_ok ? 0
       echo "<preproc_channel_flow_ok location = \"$(my.location)\""
    endif

    if !my.[channel_flow_ok].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_exchange_declare ([exchange_declare])
    my.entity = my.[exchange_declare]
    my.[exchange_declare]._entity = "exchange_declare"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exchange_declare ? 0
       echo "<preproc_exchange_declare location = \"$(my.location)\""
    endif

    if !my.[exchange_declare].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_exchange_delete ([exchange_delete])
    my.entity = my.[exchange_delete]
    my.[exchange_delete]._entity = "exchange_delete"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_exchange_delete ? 0
       echo "<preproc_exchange_delete location = \"$(my.location)\""
    endif

    if !my.[exchange_delete].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_queue_declare ([queue_declare])
    my.entity = my.[queue_declare]
    my.[queue_declare]._entity = "queue_declare"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_declare ? 0
       echo "<preproc_queue_declare location = \"$(my.location)\""
    endif

    if !my.[queue_declare].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_queue_bind ([queue_bind])
    my.entity = my.[queue_bind]
    my.[queue_bind]._entity = "queue_bind"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_bind ? 0
       echo "<preproc_queue_bind location = \"$(my.location)\""
    endif

    for my.[queue_bind].[arguments] as [queue_bind_arguments]
        preproc_queue_bind_arguments ([queue_bind_arguments])
    endfor

    if !my.[queue_bind].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_queue_bind_arguments ([queue_bind_arguments])
    my.entity = my.[queue_bind_arguments]
    my.[queue_bind_arguments]._entity = "queue_bind_arguments"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_bind_arguments ? 0
       echo "<preproc_queue_bind_arguments location = \"$(my.location)\""
    endif

    for my.[queue_bind_arguments].[field] as [table field]
        preproc_table_field ([table field])
    endfor

    if !my.[queue_bind_arguments].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_table_field ([table field])
    my.entity = my.[table field]
    my.[table field]._entity = "table field"
    my.[table field]._key = my.[table field].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_table_field ? 0
       echo "<preproc_table_field location = \"$(my.location)\""
    endif

    if !my.[table field].deleted ()
        my.[table field]._key = my.[table field].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_queue_purge ([queue_purge])
    my.entity = my.[queue_purge]
    my.[queue_purge]._entity = "queue_purge"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_purge ? 0
       echo "<preproc_queue_purge location = \"$(my.location)\""
    endif

    if !my.[queue_purge].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_queue_delete ([queue_delete])
    my.entity = my.[queue_delete]
    my.[queue_delete]._entity = "queue_delete"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_queue_delete ? 0
       echo "<preproc_queue_delete location = \"$(my.location)\""
    endif

    if !my.[queue_delete].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_consume ([basic_consume])
    my.entity = my.[basic_consume]
    my.[basic_consume]._entity = "basic_consume"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_consume ? 0
       echo "<preproc_basic_consume location = \"$(my.location)\""
    endif

    if !my.[basic_consume].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_cancel ([basic_cancel])
    my.entity = my.[basic_cancel]
    my.[basic_cancel]._entity = "basic_cancel"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_cancel ? 0
       echo "<preproc_basic_cancel location = \"$(my.location)\""
    endif

    if !my.[basic_cancel].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_publish ([basic_publish])
    my.entity = my.[basic_publish]
    my.[basic_publish]._entity = "basic_publish"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_publish ? 0
       echo "<preproc_basic_publish location = \"$(my.location)\""
    endif

    if !my.[basic_publish].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_get ([basic_get])
    my.entity = my.[basic_get]
    my.[basic_get]._entity = "basic_get"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_get ? 0
       echo "<preproc_basic_get location = \"$(my.location)\""
    endif

    if !my.[basic_get].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_content ([basic_content])
    my.entity = my.[basic_content]
    my.[basic_content]._entity = "basic_content"
    my.[basic_content]._key = my.[basic_content].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_content ? 0
       echo "<preproc_basic_content location = \"$(my.location)\""
    endif

    for my.[basic_content].[headers] as [basic_content_headers]
        preproc_basic_content_headers ([basic_content_headers])
    endfor

    if !my.[basic_content].deleted ()
        my.[basic_content]._key = my.[basic_content].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_content_headers ([basic_content_headers])
    my.entity = my.[basic_content_headers]
    my.[basic_content_headers]._entity = "basic_content_headers"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_content_headers ? 0
       echo "<preproc_basic_content_headers location = \"$(my.location)\""
    endif

    for my.[basic_content_headers].[field] as [table field]
        preproc_table_field ([table field])
    endfor

    if !my.[basic_content_headers].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_arrived ([basic_arrived])
    my.entity = my.[basic_arrived]
    my.[basic_arrived]._entity = "basic_arrived"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_arrived ? 0
       echo "<preproc_basic_arrived location = \"$(my.location)\""
    endif

    for my.[basic_arrived].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[basic_arrived].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[basic_arrived].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[basic_arrived].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[basic_arrived].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[basic_arrived].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[basic_arrived].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[basic_arrived].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[basic_arrived].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[basic_arrived].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[basic_arrived].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[basic_arrived].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[basic_arrived].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[basic_arrived].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[basic_arrived].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[basic_arrived].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[basic_arrived].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[basic_arrived].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[basic_arrived].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[basic_arrived].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[basic_arrived].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[basic_arrived].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[basic_arrived].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[basic_arrived].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[basic_arrived].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[basic_arrived].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[basic_arrived].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[basic_arrived].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[basic_arrived].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[basic_arrived].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[basic_arrived].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[basic_arrived].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[basic_arrived].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[basic_arrived].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[basic_arrived].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[basic_arrived].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[basic_arrived].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[basic_arrived].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_basic_returned ([basic_returned])
    my.entity = my.[basic_returned]
    my.[basic_returned]._entity = "basic_returned"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_basic_returned ? 0
       echo "<preproc_basic_returned location = \"$(my.location)\""
    endif

    for my.[basic_returned].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[basic_returned].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[basic_returned].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[basic_returned].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[basic_returned].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[basic_returned].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[basic_returned].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[basic_returned].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[basic_returned].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[basic_returned].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[basic_returned].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[basic_returned].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[basic_returned].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[basic_returned].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[basic_returned].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[basic_returned].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[basic_returned].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[basic_returned].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[basic_returned].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[basic_returned].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[basic_returned].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[basic_returned].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[basic_returned].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[basic_returned].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[basic_returned].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[basic_returned].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[basic_returned].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[basic_returned].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[basic_returned].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[basic_returned].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[basic_returned].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[basic_returned].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[basic_returned].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[basic_returned].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[basic_returned].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[basic_returned].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[basic_returned].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[basic_returned].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_empty ([empty])
    my.entity = my.[empty]
    my.[empty]._entity = "empty"
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_empty ? 0
       echo "<preproc_empty location = \"$(my.location)\""
    endif

    for my.[empty].[session] as [session]
        preproc_session ([session])
    endfor

    for my.[empty].[invoke] as [invoke]
        preproc_invoke ([invoke])
    endfor

    for my.[empty].[server] as [server]
        preproc_server ([server])
    endfor

    for my.[empty].[timer] as [timer]
        preproc_timer ([timer])
    endfor

    for my.[empty].[set] as [set]
        preproc_set ([set])
    endfor

    for my.[empty].[inc] as [inc]
        preproc_inc ([inc])
    endfor

    for my.[empty].[dec] as [dec]
        preproc_dec ([dec])
    endfor

    for my.[empty].[read] as [read]
        preproc_read ([read])
    endfor

    for my.[empty].[random] as [random]
        preproc_random ([random])
    endfor

    for my.[empty].[echo] as [echo]
        preproc_echo ([echo])
    endfor

    for my.[empty].[assert] as [assert]
        preproc_assert ([assert])
    endfor

    for my.[empty].[repeat] as [repeat]
        preproc_repeat ([repeat])
    endfor

    for my.[empty].[while] as [while]
        preproc_while ([while])
    endfor

    for my.[empty].[break] as [break]
        preproc_break ([break])
    endfor

    for my.[empty].[if] as [if]
        preproc_if ([if])
    endfor

    for my.[empty].[else] as [else]
        preproc_else ([else])
    endfor

    for my.[empty].[elsif] as [elsif]
        preproc_elsif ([elsif])
    endfor

    for my.[empty].[wait] as [wait]
        preproc_wait ([wait])
    endfor

    for my.[empty].[sleep] as [sleep]
        preproc_sleep ([sleep])
    endfor

    for my.[empty].[abort] as [abort]
        preproc_abort ([abort])
    endfor

    for my.[empty].[exit] as [exit]
        preproc_exit ([exit])
    endfor

    for my.[empty].[channel_flow] as [channel_flow]
        preproc_channel_flow ([channel_flow])
    endfor

    for my.[empty].[channel_flow_ok] as [channel_flow_ok]
        preproc_channel_flow_ok ([channel_flow_ok])
    endfor

    for my.[empty].[exchange_declare] as [exchange_declare]
        preproc_exchange_declare ([exchange_declare])
    endfor

    for my.[empty].[exchange_delete] as [exchange_delete]
        preproc_exchange_delete ([exchange_delete])
    endfor

    for my.[empty].[queue_declare] as [queue_declare]
        preproc_queue_declare ([queue_declare])
    endfor

    for my.[empty].[queue_bind] as [queue_bind]
        preproc_queue_bind ([queue_bind])
    endfor

    for my.[empty].[queue_purge] as [queue_purge]
        preproc_queue_purge ([queue_purge])
    endfor

    for my.[empty].[queue_delete] as [queue_delete]
        preproc_queue_delete ([queue_delete])
    endfor

    for my.[empty].[basic_consume] as [basic_consume]
        preproc_basic_consume ([basic_consume])
    endfor

    for my.[empty].[basic_cancel] as [basic_cancel]
        preproc_basic_cancel ([basic_cancel])
    endfor

    for my.[empty].[basic_publish] as [basic_publish]
        preproc_basic_publish ([basic_publish])
    endfor

    for my.[empty].[basic_get] as [basic_get]
        preproc_basic_get ([basic_get])
    endfor

    for my.[empty].[basic_content] as [basic_content]
        preproc_basic_content ([basic_content])
    endfor

    for my.[empty].[basic_arrived] as [basic_arrived]
        preproc_basic_arrived ([basic_arrived])
    endfor

    for my.[empty].[basic_returned] as [basic_returned]
        preproc_basic_returned ([basic_returned])
    endfor

    for my.[empty].[empty] as [empty]
        preproc_empty ([empty])
    endfor

    if !my.[empty].deleted ()
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_inherit ([inherit])
    my.entity = my.[inherit]
    my.[inherit]._entity = "inherit"
    my.[inherit]._key = my.[inherit].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<preproc_inherit location = \"$(my.location)\""
    endif

        #   Fudge for backwards compatibility  
        inherit.name ?= inherit.$(name($(-1))) ?
        if defined (inherit.name)
            inherit.name = gsl.exec (inherit.name, 1)
        endif
        inherit._key ?= inherit.name ?
    if !defined (my.[inherit].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[inherit].[option] as [option]
        preproc_option ([option])
    endfor

    if !my.[inherit].deleted ()
        my.[inherit]._key = my.[inherit].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction

function preproc_option ([option])
    my.entity = my.[option]
    my.[option]._entity = "option"
    my.[option]._key = my.[option].[name] ?
    my.entity._pal ?= [pal]._key ?
    my.location = location ("pal")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<preproc_option location = \"$(my.location)\""
    endif

    if !defined (my.[option].[name])
        preproc_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[option].[value])
        preproc_error ("Required attribute 'value' not defined$(my.location)")
    endif
    #   Export option to parent and all children
    my.parent = my.option.parent ()
    if defined (my.parent.$(my.option.name)) & my.parent.$(my.option.name) <> my.option.value
        preproc_error ("Option '$(my.option.name)' is already defined in $(name(my.parent)): $(my.parent._key?)")
    else
        define_throughout (my.parent, my.option)
    endif
    if !my.[option].deleted ()
        my.[option]._key = my.[option].[name] ?
        my.entity._pal ?= [pal]._key ?
    endif
endfunction


function preproc_error (message)
    echo (my.message)
    global.errno = 1
endfunction

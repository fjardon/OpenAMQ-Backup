#   'Parse' engine for asl
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function parse_asl ([asl])
    my.entity = my.[asl]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_asl ? 0
       echo "<parse_asl location = \"$(my.location)\""
    endif

    protocol.basename ?= "$(protocol.name)_$(protocol.chassis?'')"
    if !defined (my.[asl].[abstract])
        my.[asl].[abstract] = "0"
    endif
    if defined (my.[asl].[abstract])
        if    my.[asl].[abstract] ?= "0"
        elsif my.[asl].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[asl].[license])
        my.[asl].[license] = "gpl"
    endif
    if defined (my.[asl].[license])
        if    my.[asl].[license] ?= "bsd"
        elsif my.[asl].[license] ?= "gpl"
        else
            parse_error ("Attribute 'license' has illegal value '$(0.[license]?)'$(my.location)")
        endif
    endif
    if !defined (my.[asl].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[asl].[target])
        my.[asl].[target] = "doc"
    endif
    if !defined (my.[asl].[version])
        parse_error ("Required attribute 'version' not defined$(my.location)")
    endif
    if defined (my.[asl].[chassis])
        if    my.[asl].[chassis] ?= "client"
        elsif my.[asl].[chassis] ?= "server"
        else
            parse_error ("Attribute 'chassis' has illegal value '$(0.[chassis]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[asl]. where defined (name ()) as entity
        if    name () = "inherit"
        elsif name () = "include"
        elsif name () = "constant"
        elsif name () = "class"
        elsif name () = "domain"
        elsif name () = "option"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[asl].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[asl].[include] as [include]
        parse_include ([include])
    endfor

    for my.[asl].[constant] as [constant]
        parse_constant ([constant])
    endfor

    for my.[asl].[class] as [class]
        parse_class ([class])
    endfor

    for my.[asl].[domain] as [domain]
        parse_domain ([domain])
    endfor

    for my.[asl].[option] as [option]
        parse_option ([option])
    endfor

    my.last_key =
    for my.[asl].[constant] as [constant] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <constant name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[asl].[class] as [class] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <class name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[asl].[domain] as [domain] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <domain name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[asl].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    for class where !abstract
        for method where !abstract
            if !defined (method.index)
                echo "E: method $(class.name).$(method.name) does not have an index"
            endif
        endfor
    endfor
endfunction

function parse_include ([include])
    my.entity = my.[include]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<parse_include location = \"$(my.location)\""
    endif

    for my.[include]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_constant ([constant])
    my.entity = my.[constant]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constant ? 0
       echo "<parse_constant location = \"$(my.location)\""
    endif

    if !defined (my.[constant].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[constant].[value])
        parse_error ("Required attribute 'value' not defined$(my.location)")
    endif
    if !defined (my.[constant].[class])
        my.[constant].[class] = ""
    endif
    for my.[constant]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_class ([class])
    my.entity = my.[class]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_class ? 0
       echo "<parse_class location = \"$(my.location)\""
    endif

    if !defined (my.[class].[abstract])
        my.[class].[abstract] = "0"
    endif
    if defined (my.[class].[abstract])
        if    my.[class].[abstract] ?= "0"
        elsif my.[class].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[class].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[class]. where defined (name ()) as entity
        if    name () = "option"
        elsif name () = "inherit"
        elsif name () = "doc"
        elsif name () = "see"
        elsif name () = "chassis"
        elsif name () = "field"
        elsif name () = "method"
        elsif name () = "context"
        elsif name () = "action"
        elsif name () = "constructor"
        elsif name () = "destructor"
        elsif name () = "todo"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[class].[option] as [option]
        parse_option ([option])
    endfor

    for my.[class].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[class].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[class].[see] as [see]
        parse_see ([see])
    endfor

    for my.[class].[chassis] as [chassis]
        parse_chassis ([chassis])
    endfor

    for my.[class].[field] as [field]
        parse_field ([field])
    endfor

    for my.[class].[method] as [method]
        parse_method ([method])
    endfor

    for my.[class].[context] as [context]
        parse_context ([context])
    endfor

    for my.[class].[action] as [action]
        parse_action ([action])
    endfor

    for my.[class].[constructor] as [constructor]
        parse_constructor ([constructor])
    endfor

    for my.[class].[destructor] as [destructor]
        parse_destructor ([destructor])
    endfor

    for my.[class].[todo] as [todo]
        parse_todo ([todo])
    endfor

    my.last_key =
    for my.[class].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[class].[see] as [see] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <see name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[class].[chassis] as [chassis] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <chassis name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[class].[field] as [field] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <field name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[class].[method] as [method] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <method name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[class].[action] as [action] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <action name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_doc ([doc])
    my.entity = my.[doc]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<parse_doc location = \"$(my.location)\""
    endif

    if !defined (my.[doc].[name])
        my.[doc].[name] = ""
    endif
    for my.[doc]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_see ([see])
    my.entity = my.[see]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_see ? 0
       echo "<parse_see location = \"$(my.location)\""
    endif

    for my.[see]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_chassis ([chassis])
    my.entity = my.[chassis]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_chassis ? 0
       echo "<parse_chassis location = \"$(my.location)\""
    endif

    if !defined (my.[chassis].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if defined (my.[chassis].[name])
        if    my.[chassis].[name] ?= "client"
        elsif my.[chassis].[name] ?= "server"
        else
            parse_error ("Attribute 'name' has illegal value '$(0.[name]?)'$(my.location)")
        endif
    endif
    if defined (my.[chassis].[implement])
        if    my.[chassis].[implement] ?= "MUST"
        elsif my.[chassis].[implement] ?= "SHOULD"
        elsif my.[chassis].[implement] ?= "MAY"
        else
            parse_error ("Attribute 'implement' has illegal value '$(0.[implement]?)'$(my.location)")
        endif
    endif
    for my.[chassis]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_method ([method])
    my.entity = my.[method]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<parse_method location = \"$(my.location)\""
    endif

    method.fullname = "$(class.name:neat).$(method.name:neat)"
    if abstract = 0 & count (chassis) = 0
        parse_error ("Method '$(fullname)' needs a chassis")
    endif
    if class.name = "connection" \
    | (class.name = "channel" & method.name = "open") \
    | (class.name = "channel" & method.name = "open-ok") \
    | (class.name = "channel" & method.name = "close") \
    | (class.name = "channel" & method.name = "close-ok")
        method.internal = 1
    else
        method.internal = 0
    endif
    if !defined (my.[method].[abstract])
        my.[method].[abstract] = "0"
    endif
    if defined (my.[method].[abstract])
        if    my.[method].[abstract] ?= "0"
        elsif my.[method].[abstract] ?= "1"
        else
            parse_error ("Attribute 'abstract' has illegal value '$(0.[abstract]?)'$(my.location)")
        endif
    endif
    if !defined (my.[method].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[method].[synchronous])
        my.[method].[synchronous] = "0"
    endif
    if !defined (my.[method].[content])
        my.[method].[content] = "0"
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[method]. where defined (name ()) as entity
        if    name () = "option"
        elsif name () = "inherit"
        elsif name () = "doc"
        elsif name () = "see"
        elsif name () = "chassis"
        elsif name () = "field"
        elsif name () = "response"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[method].[option] as [option]
        parse_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        parse_inherit ([inherit])
    endfor

    for my.[method].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[method].[see] as [see]
        parse_see ([see])
    endfor

    for my.[method].[chassis] as [chassis]
        parse_chassis ([chassis])
    endfor

    for my.[method].[field] as [field]
        parse_field ([field])
    endfor

    for my.[method].[response] as [response]
        parse_response ([response])
    endfor

    my.last_key =
    for my.[method].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[see] as [see] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <see name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[chassis] as [chassis] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <chassis name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[field] as [field] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <field name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    my.last_key =
    for my.[method].[response] as [response] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <response name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_response ([response])
    my.entity = my.[response]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_response ? 0
       echo "<parse_response location = \"$(my.location)\""
    endif

    if !defined (my.[response].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[response]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
    if defined (0.[name])
        my.source = link_target ("method", "method", "name", 0.[name]) ?
        if defined (my.source)
        else
            parse_error ("Method '$(0.[name])' missing$(my.location)")
        endif
    endif
endfunction

function parse_field ([field])
    my.entity = my.[field]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_field ? 0
       echo "<parse_field location = \"$(my.location)\""
    endif

    if !defined (my.[field].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if defined (my.[field].[type])
        if    my.[field].[type] ?= "bit"
        elsif my.[field].[type] ?= "octet"
        elsif my.[field].[type] ?= "short"
        elsif my.[field].[type] ?= "long"
        elsif my.[field].[type] ?= "longlong"
        elsif my.[field].[type] ?= "timestamp"
        elsif my.[field].[type] ?= "shortstr"
        elsif my.[field].[type] ?= "longstr"
        elsif my.[field].[type] ?= "table"
        else
            parse_error ("Attribute 'type' has illegal value '$(0.[type]?)'$(my.location)")
        endif
    endif
    if !defined (my.[field].[global])
        my.[field].[global] = "0"
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[field]. where defined (name ()) as entity
        if    name () = "assert"
        elsif name () = "doc"
        elsif name () = "see"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[field].[assert] as [assert]
        parse_assert ([assert])
    endfor

    for my.[field].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[field].[see] as [see]
        parse_see ([see])
    endfor

    my.last_key =
    for my.[field].[see] as [see] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <see name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    if defined (0.[domain])
        my.source = link_target ("domain", "domain", "name", 0.[domain]) ?
        if defined (my.source)
            my.target = my.[field]
            perform_inherit_domain_item (my.target, my.source)
        else
            parse_error ("Domain '$(0.[domain])' missing$(my.location)")
        endif
    endif
endfunction

function parse_domain ([domain])
    my.entity = my.[domain]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_domain ? 0
       echo "<parse_domain location = \"$(my.location)\""
    endif

    if !defined (my.[domain].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    if !defined (my.[domain].[type])
        parse_error ("Required attribute 'type' not defined$(my.location)")
    endif
    if defined (my.[domain].[type])
        if    my.[domain].[type] ?= "bit"
        elsif my.[domain].[type] ?= "octet"
        elsif my.[domain].[type] ?= "short"
        elsif my.[domain].[type] ?= "long"
        elsif my.[domain].[type] ?= "longlong"
        elsif my.[domain].[type] ?= "shortstr"
        elsif my.[domain].[type] ?= "longstr"
        elsif my.[domain].[type] ?= "timestamp"
        elsif my.[domain].[type] ?= "table"
        else
            parse_error ("Attribute 'type' has illegal value '$(0.[type]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[domain]. where defined (name ()) as entity
        if    name () = "assert"
        elsif name () = "doc"
        elsif name () = "see"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[domain].[assert] as [assert]
        parse_assert ([assert])
    endfor

    for my.[domain].[doc] as [doc]
        parse_doc ([doc])
    endfor

    for my.[domain].[see] as [see]
        parse_see ([see])
    endfor

    my.last_key =
    for my.[domain].[see] as [see] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <see name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_assert ([assert])
    my.entity = my.[assert]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<parse_assert location = \"$(my.location)\""
    endif

    root.last_enum = 0
    if !defined (my.[assert].[check])
        parse_error ("Required attribute 'check' not defined$(my.location)")
    endif
    if defined (my.[assert].[check])
        if    my.[assert].[check] ?= "eq"
        elsif my.[assert].[check] ?= "ne"
        elsif my.[assert].[check] ?= "gt"
        elsif my.[assert].[check] ?= "ge"
        elsif my.[assert].[check] ?= "lt"
        elsif my.[assert].[check] ?= "le"
        elsif my.[assert].[check] ?= "regexp"
        elsif my.[assert].[check] ?= "length"
        elsif my.[assert].[check] ?= "notnull"
        elsif my.[assert].[check] ?= "null"
        elsif my.[assert].[check] ?= "enum"
        elsif my.[assert].[check] ?= "syntax"
        else
            parse_error ("Attribute 'check' has illegal value '$(0.[check]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[assert]. where defined (name ()) as entity
        if    name () = "value"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[assert].[value] as [value]
        parse_value ([value])
    endfor

    my.last_key =
    for my.[assert].[value] as [value] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <value name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
    if defined (assert.field)
        assert.value = "the value of '$(assert.field)' in the last received $(class.name:neat).$(assert.method:neat) method"
    endif
    if check = "eq"
        assert.text = "MUST be equal to " + value
    elsif check = "ne"
        assert.text = "MUST NOT be equal to " + value
    elsif check = "gt"
        assert.text = "MUST be greater than " + value
    elsif check = "ge"
        assert.text = "MUST be greater than or equal to " + value
    elsif check = "lt"
        assert.text = "MUST be less than " + value
    elsif check = "le"
        assert.text = "MUST be less than or equal to " + value
    elsif check = "regexp"
        assert.text = "MUST match the regular expression /" + value + "/"
    elsif check = "length"
        assert.text = "MUST not be longer than " + value + " octets"
    elsif check = "notnull"
        assert.text = "MUST not be empty"
    elsif check = "null"
        assert.text = "MUST be empty"
    elsif check = "enum"
        assert.text = "MUST be one of:"
        for value
            if index () > 1
                assert.text += ","
            endif
            assert.text += " $(.value)=$(.name) (value.)"
        endfor
    endif
endfunction

function parse_value ([value])
    my.entity = my.[value]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_value ? 0
       echo "<parse_value location = \"$(my.location)\""
    endif

    if defined (.value)
        root.last_enum = .value
    else
        .value = (root.last_enum?0) + 1
        root.last_enum = .value
    endif
    if !defined (my.[value].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    for my.[value]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_context ([context])
    my.entity = my.[context]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<parse_context location = \"$(my.location)\""
    endif

    for my.[context]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_action ([action])
    my.entity = my.[action]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_action ? 0
       echo "<parse_action location = \"$(my.location)\""
    endif

    if count (class.method, name = action.name) = 0
        parse_error ("Action '$(name)' in '$(class.name)' does not match a method")
    endif
    if !defined (my.[action].[name])
        parse_error ("Required attribute 'name' not defined$(my.location)")
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[action]. where defined (name ()) as entity
        if    name () = "local"
        elsif name () = "header"
        elsif name () = "footer"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[action].[local] as [local]
        parse_local ([local])
    endfor

    for my.[action].[header] as [header]
        parse_header ([header])
    endfor

    for my.[action].[footer] as [footer]
        parse_footer ([footer])
    endfor

endfunction

function parse_local ([local])
    my.entity = my.[local]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<parse_local location = \"$(my.location)\""
    endif

    for my.[local]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_header ([header])
    my.entity = my.[header]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<parse_header location = \"$(my.location)\""
    endif

    if !defined (my.[header].[export])
        my.[header].[export] = "default"
    endif
    if defined (my.[header].[export])
        if    my.[header].[export] ?= "none"
        elsif my.[header].[export] ?= "default"
        elsif my.[header].[export] ?= "before"
        elsif my.[header].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    for my.[header]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_footer ([footer])
    my.entity = my.[footer]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<parse_footer location = \"$(my.location)\""
    endif

    if !defined (my.[footer].[export])
        my.[footer].[export] = "default"
    endif
    if defined (my.[footer].[export])
        if    my.[footer].[export] ?= "none"
        elsif my.[footer].[export] ?= "default"
        elsif my.[footer].[export] ?= "before"
        elsif my.[footer].[export] ?= "after"
        else
            parse_error ("Attribute 'export' has illegal value '$(0.[export]?)'$(my.location)")
        endif
    endif
    for my.[footer]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_constructor ([constructor])
    my.entity = my.[constructor]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constructor ? 0
       echo "<parse_constructor location = \"$(my.location)\""
    endif

    for my.[constructor]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_destructor ([destructor])
    my.entity = my.[destructor]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_destructor ? 0
       echo "<parse_destructor location = \"$(my.location)\""
    endif

    for my.[destructor]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_todo ([todo])
    my.entity = my.[todo]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<parse_todo location = \"$(my.location)\""
    endif

    for my.[todo]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction

function parse_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<parse_inherit location = \"$(my.location)\""
    endif

    if defined (my.[inherit].[phase])
        if    my.[inherit].[phase] ?= "preproc"
        elsif my.[inherit].[phase] ?= "parse"
        else
            parse_error ("Attribute 'phase' has illegal value '$(0.[phase]?)'$(my.location)")
        endif
    endif
    #    Recurse into child entities
    #    Check that all entities are valid here
    for my.[inherit]. where defined (name ()) as entity
        if    name () = "option"
        else
            parse_error ("<$(name ())> not allowed$(my.location)")
        endif
    endfor

    for my.[inherit].[option] as [option]
        parse_option ([option])
    endfor

    my.last_key =
    for my.[inherit].[option] as [option] by 0.[name] ? ""
        if (0.[name] ?<> "") & (0.[name] ?= my.last_key)
            parse_error ("Duplicate <option name = \"$(0.[name])\"/>$(my.location)")
        endif
        my.last_key = 0.[name] ? ""
    endfor
endfunction

function parse_option ([option])
    my.entity = my.[option]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<parse_option location = \"$(my.location)\""
    endif

    for my.[option]. where defined (name ())
        parse_error ("<$(name ())> not allowed$(my.location)")
    endfor
endfunction


function parse_error (message)
    echo (my.message)
    global.errno = 1
endfunction

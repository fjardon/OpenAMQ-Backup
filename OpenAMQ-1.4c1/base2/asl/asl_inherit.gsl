#   'Inherit' engine for asl
#
#   Generated by iMatix GSL/4
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   
#   This file is licensed under the GPL as follows:
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or (at
#   your option) any later version.
#   
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#   
#   For information on alternative licensing for OEMs, please contact
#   iMatix Corporation.
#

function inherit_asl ([asl])
    my.entity = my.[asl]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_asl ? 0
       echo "<inherit_asl location = \"$(my.location)\""
    endif

    for my.[asl].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[asl].[include] as [include]
        inherit_include ([include])
    endfor

    for my.[asl].[constant] as [constant]
        inherit_constant ([constant])
    endfor

    for my.[asl].[class] as [class]
        inherit_class ([class])
    endfor

    for my.[asl].[domain] as [domain]
        inherit_domain ([domain])
    endfor

    for my.[asl].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_include ([include])
    my.entity = my.[include]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_include ? 0
       echo "<inherit_include location = \"$(my.location)\""
    endif

endfunction

function inherit_constant ([constant])
    my.entity = my.[constant]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constant ? 0
       echo "<inherit_constant location = \"$(my.location)\""
    endif

endfunction

function inherit_class ([class])
    my.entity = my.[class]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_class ? 0
       echo "<inherit_class location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[class].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("class", "class", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Class '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_class_item (my.[class], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[class].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[class].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[class].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[class].[see] as [see]
        inherit_see ([see])
    endfor

    for my.[class].[chassis] as [chassis]
        inherit_chassis ([chassis])
    endfor

    for my.[class].[field] as [field]
        inherit_field ([field])
    endfor

    for my.[class].[method] as [method]
        inherit_method ([method])
    endfor

    for my.[class].[context] as [context]
        inherit_context ([context])
    endfor

    for my.[class].[action] as [action]
        inherit_action ([action])
    endfor

    for my.[class].[constructor] as [constructor]
        inherit_constructor ([constructor])
    endfor

    for my.[class].[destructor] as [destructor]
        inherit_destructor ([destructor])
    endfor

    for my.[class].[todo] as [todo]
        inherit_todo ([todo])
    endfor

endfunction

function inherit_doc ([doc])
    my.entity = my.[doc]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_doc ? 0
       echo "<inherit_doc location = \"$(my.location)\""
    endif

endfunction

function inherit_see ([see])
    my.entity = my.[see]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_see ? 0
       echo "<inherit_see location = \"$(my.location)\""
    endif

endfunction

function inherit_chassis ([chassis])
    my.entity = my.[chassis]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_chassis ? 0
       echo "<inherit_chassis location = \"$(my.location)\""
    endif

endfunction

function inherit_method ([method])
    my.entity = my.[method]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_method ? 0
       echo "<inherit_method location = \"$(my.location)\""
    endif

    #   Keep on looking for more 'inherit' children as one can bring more with it
    my.more = 1
    while my.more
        for my.[method].inherit where 0._done ? 0 = 0
            if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
                #my.source = link_target ("xnf", "xnf", "_key", name) ?
                my.source = link_target ("method", "method", "_key", inherit.name) ?
                if !defined (my.source)
                    preproc_error ("Method '$(inherit.name)' missing$(my.location)")
                else
                    perform_inherit_method_item (my.[method], my.source)
                endif
                inherit._done = 1
            endif
        else
            my.more = 0
        endfor
    endwhile

    for my.[method].[option] as [option]
        inherit_option ([option])
    endfor

    for my.[method].[inherit] as [inherit]
        inherit_inherit ([inherit])
    endfor

    for my.[method].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[method].[see] as [see]
        inherit_see ([see])
    endfor

    for my.[method].[chassis] as [chassis]
        inherit_chassis ([chassis])
    endfor

    for my.[method].[field] as [field]
        inherit_field ([field])
    endfor

    for my.[method].[response] as [response]
        inherit_response ([response])
    endfor

endfunction

function inherit_response ([response])
    my.entity = my.[response]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_response ? 0
       echo "<inherit_response location = \"$(my.location)\""
    endif

endfunction

function inherit_field ([field])
    my.entity = my.[field]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_field ? 0
       echo "<inherit_field location = \"$(my.location)\""
    endif

    for my.[field].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[field].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[field].[see] as [see]
        inherit_see ([see])
    endfor

endfunction

function inherit_domain ([domain])
    my.entity = my.[domain]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_domain ? 0
       echo "<inherit_domain location = \"$(my.location)\""
    endif

    for my.[domain].[assert] as [assert]
        inherit_assert ([assert])
    endfor

    for my.[domain].[doc] as [doc]
        inherit_doc ([doc])
    endfor

    for my.[domain].[see] as [see]
        inherit_see ([see])
    endfor

endfunction

function inherit_assert ([assert])
    my.entity = my.[assert]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_assert ? 0
       echo "<inherit_assert location = \"$(my.location)\""
    endif

    for my.[assert].[value] as [value]
        inherit_value ([value])
    endfor

endfunction

function inherit_value ([value])
    my.entity = my.[value]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_value ? 0
       echo "<inherit_value location = \"$(my.location)\""
    endif

endfunction

function inherit_context ([context])
    my.entity = my.[context]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_context ? 0
       echo "<inherit_context location = \"$(my.location)\""
    endif

endfunction

function inherit_action ([action])
    my.entity = my.[action]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_action ? 0
       echo "<inherit_action location = \"$(my.location)\""
    endif

    for my.[action].[local] as [local]
        inherit_local ([local])
    endfor

    for my.[action].[header] as [header]
        inherit_header ([header])
    endfor

    for my.[action].[footer] as [footer]
        inherit_footer ([footer])
    endfor

endfunction

function inherit_local ([local])
    my.entity = my.[local]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_local ? 0
       echo "<inherit_local location = \"$(my.location)\""
    endif

endfunction

function inherit_header ([header])
    my.entity = my.[header]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_header ? 0
       echo "<inherit_header location = \"$(my.location)\""
    endif

endfunction

function inherit_footer ([footer])
    my.entity = my.[footer]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_footer ? 0
       echo "<inherit_footer location = \"$(my.location)\""
    endif

endfunction

function inherit_constructor ([constructor])
    my.entity = my.[constructor]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_constructor ? 0
       echo "<inherit_constructor location = \"$(my.location)\""
    endif

endfunction

function inherit_destructor ([destructor])
    my.entity = my.[destructor]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_destructor ? 0
       echo "<inherit_destructor location = \"$(my.location)\""
    endif

endfunction

function inherit_todo ([todo])
    my.entity = my.[todo]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_todo ? 0
       echo "<inherit_todo location = \"$(my.location)\""
    endif

endfunction

function inherit_inherit ([inherit])
    my.entity = my.[inherit]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_inherit ? 0
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    for my.[inherit].[option] as [option]
        inherit_option ([option])
    endfor

endfunction

function inherit_option ([option])
    my.entity = my.[option]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_option ? 0
       echo "<inherit_option location = \"$(my.location)\""
    endif

endfunction


function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

function inherit_top ([asl])
    my.entity = my.[asl]
    my.location = location ("protocol")

    if switches.trace ? 0 | switches.trace_asl ? 0
       echo "<inherit_top location = \"$(my.location)\""
    endif

    for my.[asl].inherit
        if !defined (inherit.condition) | gsl.exec ("\$(("+inherit.condition+")?0)",1)
            if switches.trace ? 0 | switches.trace_asl ? 0
                echo "Loading $(name)"
            endif
            my.inherit_file = xml.load_file (name + ".asl") ? abort_xml_error ()
            my.inherit_file._filename ?= name
            if my.inherit_file.multiple ? 0 > 0 | !defined (global.top.have_inherit_$(inherit.name))
                for inherit.option
                    copy option to my.inherit_file
                endfor
                scope my.inherit_file as asl
                    preproc_asl (my.inherit_file)
                    inherit_top (my.inherit_file)
                endscope
                global.top.have_inherit_$(inherit.name) = 1
            
                move my.inherit_file to global.inherit
            endif
        endif
    endfor
endfunction

function sort_top_inherits ()
    my.location = location ("protocol")

    my.sorted = xml.new ("sorted")
    for global.inherit.protocol
        my.[before] =
        my.[after]  =
        if switches.trace ? 0 | switches.trace_asl ? 0
            echo "Inserting $(protocol._key)"
        endif
        for my.sorted.protocol as sorted

            if ((sorted.role    = class.[before]) ? 0)   | ((sorted.[after] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_asl ? 0
                    echo "    before: $(sorted.name)"
                endif
                my.[before] ?= sorted
            endif
            if ((sorted.role    = class.[after]) ? 0)   | ((sorted.[before] = class.role)  ? 0)
                if switches.trace ? 0 | switches.trace_asl ? 0
                    echo "    after: $(sorted.name)"
                endif
                if defined (my.[before])
                    preproc_error ("Incoherent inherit order$(my.location)")
                    last
                endif
                my.[after] = sorted
            endif
        endfor
            
        if defined (my.[before])
            move protocol before my.[before]
        elsif defined (my.[after])
            move protocol after my.[after]
        else
            my.any = my.sorted->?
            if defined (my.any)
                move protocol before my.any
            else
                move protocol to my.sorted
            endif
        endif
    endfor
    
    for my.sorted.protocol
        if switches.trace ? 0 | switches.trace_asl ? 0
            echo "Inheriting $(protocol.name)"
        endif
        perform_inherit_asl_item (global.top, protocol)
    endfor

endfunction

function perform_inherit_asl (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_asl ? 0
       my.location = location ("protocol")
       echo "<inherit_asl location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[protocol] ?
    for my.source.[protocol] as [asl]
        my.existing = my.target->[protocol] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_asl_item (my.existing, [asl])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [asl] before my.insert
                else
                    copy [asl] to my.target
                endif
            else
                copy [asl] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_asl

function perform_inherit_include (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("protocol")
       echo "<inherit_include location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[include] ?
    for my.source.[include] as [include]
        if my.inherit = "overlay"
            my.existing = my.target->[include] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_include_item (my.existing, [include])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [include] before my.insert
                else
                    copy [include] to my.target
                endif
            else
                copy [include] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_include

function perform_inherit_constant (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_constant ? 0
       my.location = location ("protocol")
       echo "<inherit_constant location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[constant] ?
    for my.source.[constant] as [constant]
        my.existing = my.target->[constant] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_constant_item (my.existing, [constant])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [constant] before my.insert
                else
                    copy [constant] to my.target
                endif
            else
                copy [constant] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_constant

function perform_inherit_class (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_class ? 0
       my.location = location ("protocol")
       echo "<inherit_class location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[class] ?
    for my.source.[class] as [class]
        my.existing = my.target->[class] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_class_item (my.existing, [class])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [class] before my.insert
                else
                    copy [class] to my.target
                endif
            else
                copy [class] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_class

function perform_inherit_doc (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_doc ? 0
       my.location = location ("protocol")
       echo "<inherit_doc location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[doc] ?
    for my.source.[doc] as [doc]
        my.existing = my.target->[doc] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_doc_item (my.existing, [doc])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert)
                    copy [doc] before my.insert
                else
                    copy [doc] to my.target
                endif
            else
                copy [doc] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_doc

function perform_inherit_see (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_see ? 0
       my.location = location ("protocol")
       echo "<inherit_see location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[see] ?
    for my.source.[see] as [see]
        my.existing = my.target->[see] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_see_item (my.existing, [see])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [see] before my.insert
                else
                    copy [see] to my.target
                endif
            else
                copy [see] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_see

function perform_inherit_chassis (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_chassis ? 0
       my.location = location ("protocol")
       echo "<inherit_chassis location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[chassis] ?
    for my.source.[chassis] as [chassis]
        my.existing = my.target->[chassis] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_chassis_item (my.existing, [chassis])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [chassis] before my.insert
                else
                    copy [chassis] to my.target
                endif
            else
                copy [chassis] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_chassis

function perform_inherit_method (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("protocol")
       echo "<inherit_method location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[method] ?
    for my.source.[method] as [method]
        my.existing = my.target->[method] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_method_item (my.existing, [method])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [method] before my.insert
                else
                    copy [method] to my.target
                endif
            else
                copy [method] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_method

function perform_inherit_response (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_response ? 0
       my.location = location ("protocol")
       echo "<inherit_response location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[response] ?
    for my.source.[response] as [response]
        my.existing = my.target->[response] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_response_item (my.existing, [response])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [response] before my.insert
                else
                    copy [response] to my.target
                endif
            else
                copy [response] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_response

function perform_inherit_field (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_field ? 0
       my.location = location ("protocol")
       echo "<inherit_field location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[field] ?
    for my.source.[field] as [field]
        my.existing = my.target->[field] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_field_item (my.existing, [field])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [field] before my.insert
                else
                    copy [field] to my.target
                endif
            else
                copy [field] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_field

function perform_inherit_domain (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_domain ? 0
       my.location = location ("protocol")
       echo "<inherit_domain location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[domain] ?
    for my.source.[domain] as [domain]
        my.existing = my.target->[domain] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_domain_item (my.existing, [domain])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [domain] before my.insert
                else
                    copy [domain] to my.target
                endif
            else
                copy [domain] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_domain

function perform_inherit_assert (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("protocol")
       echo "<inherit_assert location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[assert] ?
    for my.source.[assert] as [assert]
        if my.inherit = "overlay"
            my.existing = my.target->[assert] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_assert_item (my.existing, [assert])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [assert] before my.insert
                else
                    copy [assert] to my.target
                endif
            else
                copy [assert] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_assert

function perform_inherit_value (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_value ? 0
       my.location = location ("protocol")
       echo "<inherit_value location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[value] ?
    for my.source.[value] as [value]
        my.existing = my.target->[value] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_value_item (my.existing, [value])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [value] before my.insert
                else
                    copy [value] to my.target
                endif
            else
                copy [value] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_value

function perform_inherit_context (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_context ? 0
       my.location = location ("protocol")
       echo "<inherit_context location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[context] ?
    for my.source.[context] as [context]
        if my.inherit = "overlay"
            my.existing = my.target->[context] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_context_item (my.existing, [context])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [context] before my.insert
                else
                    copy [context] to my.target
                endif
            else
                copy [context] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_context

function perform_inherit_action (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_action ? 0
       my.location = location ("protocol")
       echo "<inherit_action location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[action] ?
    for my.source.[action] as [action]
        my.existing = my.target->[action] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_action_item (my.existing, [action])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [action] before my.insert
                else
                    copy [action] to my.target
                endif
            else
                copy [action] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_action

function perform_inherit_local (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_local ? 0
       my.location = location ("protocol")
       echo "<inherit_local location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[local] ?
    for my.source.[local] as [local]
        if my.inherit = "overlay"
            my.existing = my.target->[local] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_local_item (my.existing, [local])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [local] before my.insert
                else
                    copy [local] to my.target
                endif
            else
                copy [local] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_local

function perform_inherit_header (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_header ? 0
       my.location = location ("protocol")
       echo "<inherit_header location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[header] ?
    for my.source.[header] as [header]
        if [header].export ? "default" <> "none"
        if my.inherit = "overlay"
            my.existing = my.target->[header] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_header_item (my.existing, [header])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert) & [header].export ? "default" <> "after"
                    copy [header] before my.insert
                else
                    copy [header] to my.target
                endif
            else
                if defined (my.insert) & [header].export ? "default" = "before"
                    copy [header] before my.insert
                else
                    copy [header] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_header

function perform_inherit_footer (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_footer ? 0
       my.location = location ("protocol")
       echo "<inherit_footer location = \"$(my.location)\""
    endif

    my.inherit ?= "insert"
    my.insert = my.target->[footer] ?
    for my.source.[footer] as [footer]
        if [footer].export ? "default" <> "none"
        if my.inherit = "overlay"
            my.existing = my.target->[footer] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_footer_item (my.existing, [footer])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "after") = "before"
                if defined (my.insert) & [footer].export ? "default" <> "after"
                    copy [footer] before my.insert
                else
                    copy [footer] to my.target
                endif
            else
                if defined (my.insert) & [footer].export ? "default" = "before"
                    copy [footer] before my.insert
                else
                    copy [footer] to my.target
                endif
            endif
        endif
        endif
    endfor
endfunction perform_inherit_footer

function perform_inherit_constructor (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_constructor ? 0
       my.location = location ("protocol")
       echo "<inherit_constructor location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[constructor] ?
    for my.source.[constructor] as [constructor]
        if my.inherit = "overlay"
            my.existing = my.target->[constructor] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_constructor_item (my.existing, [constructor])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [constructor] before my.insert
                else
                    copy [constructor] to my.target
                endif
            else
                copy [constructor] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_constructor

function perform_inherit_destructor (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_destructor ? 0
       my.location = location ("protocol")
       echo "<inherit_destructor location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[destructor] ?
    for my.source.[destructor] as [destructor]
        if my.inherit = "overlay"
            my.existing = my.target->[destructor] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_destructor_item (my.existing, [destructor])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [destructor] before my.insert
                else
                    copy [destructor] to my.target
                endif
            else
                copy [destructor] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_destructor

function perform_inherit_todo (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_todo ? 0
       my.location = location ("protocol")
       echo "<inherit_todo location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[todo] ?
    for my.source.[todo] as [todo]
        if my.inherit = "overlay"
            my.existing = my.target->[todo] ?
        endif
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_todo_item (my.existing, [todo])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [todo] before my.insert
                else
                    copy [todo] to my.target
                endif
            else
                copy [todo] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_todo

function perform_inherit_inherit (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("protocol")
       echo "<inherit_inherit location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[inherit] ?
    for my.source.[inherit] as [inherit]
        my.existing = my.target->[inherit] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_inherit_item (my.existing, [inherit])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [inherit] before my.insert
                else
                    copy [inherit] to my.target
                endif
            else
                copy [inherit] to my.target
            endif
        endif
    endfor
endfunction perform_inherit_inherit

function perform_inherit_option (target, source, inherit, sequence)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("protocol")
       echo "<inherit_option location = \"$(my.location)\""
    endif

    my.inherit ?= "overlay"
    my.insert = my.target->[option] ?
    for my.source.[option] as [option]
        my.existing = my.target->[option] (0.[name] ?= -1.[name]) ?
        if my.inherit = "overlay" & defined (my.existing)
            perform_inherit_option_item (my.existing, [option])
        elsif my.inherit <> "none" & !defined (my.existing)
            if (my.sequence ? "before") = "before"
                if defined (my.insert)
                    copy [option] before my.insert
                else
                    copy [option] to my.target
                endif
            else
                copy [option] to my.target
            endif
        endif
            #   Export option to parent and all children
    if !defined (my.target.$(name))
        define_throughout (my.target, option)
    endif
    endfor
endfunction perform_inherit_option

function perform_inherit_asl_item (target, source)
    if switches.trace ? 0 | switches.trace_asl ? 0
       my.location = location ("protocol")
       echo "<inherit_asl_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[role] ?= my.source.[role] ?
        my.target.[before] ?= my.source.[before] ?
        my.target.[after] ?= my.source.[after] ?
        my.target.[copyright] ?= my.source.[copyright] ?
        my.target.[license] ?= my.source.[license] ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[desc] ?= my.source.[desc] ?
        my.target.[target] ?= my.source.[target] ?
        my.target.[version] ?= my.source.[version] ?
        my.target.[chassis] ?= my.source.[chassis] ?
        my.target.[basename] ?= my.source.[basename] ?
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_include (my.target, my.source, , )
        perform_inherit_constant (my.target, my.source, , )
        perform_inherit_class (my.target, my.source, , )
        perform_inherit_domain (my.target, my.source, , )
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_include_item (target, source)
    if switches.trace ? 0 | switches.trace_include ? 0
       my.location = location ("protocol")
       echo "<inherit_include_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[filename] ?= my.source.[filename] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_constant_item (target, source)
    if switches.trace ? 0 | switches.trace_constant ? 0
       my.location = location ("protocol")
       echo "<inherit_constant_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[class] ?= my.source.[class] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_class_item (target, source)
    if switches.trace ? 0 | switches.trace_class ? 0
       my.location = location ("protocol")
       echo "<inherit_class_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[comment] ?= my.source.[comment] ?
        my.target.[handler] ?= my.source.[handler] ?
        my.target.[index] ?= my.source.[index] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_doc (my.target, my.source, "insert", "after")
        perform_inherit_see (my.target, my.source, , )
        perform_inherit_chassis (my.target, my.source, , )
        perform_inherit_field (my.target, my.source, , )
        perform_inherit_method (my.target, my.source, , )
        perform_inherit_context (my.target, my.source, , )
        perform_inherit_action (my.target, my.source, , )
        perform_inherit_constructor (my.target, my.source, , )
        perform_inherit_destructor (my.target, my.source, , )
        perform_inherit_todo (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_see_item (target, source)
    if switches.trace ? 0 | switches.trace_see ? 0
       my.location = location ("protocol")
       echo "<inherit_see_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_chassis_item (target, source)
    if switches.trace ? 0 | switches.trace_chassis ? 0
       my.location = location ("protocol")
       echo "<inherit_chassis_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[implement] ?= my.source.[implement] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_method_item (target, source)
    if switches.trace ? 0 | switches.trace_method ? 0
       my.location = location ("protocol")
       echo "<inherit_method_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[template] ?= my.source.[template] ?
        my.target.[synchronous] ?= my.source.[synchronous] ?
        my.target.[content] ?= my.source.[content] ?
        perform_inherit_option (my.target, my.source, , )
        perform_inherit_inherit (my.target, my.source, , )
        perform_inherit_doc (my.target, my.source, "insert", "after")
        perform_inherit_see (my.target, my.source, "overlay", "before")
        perform_inherit_chassis (my.target, my.source, "overlay", "before")
        perform_inherit_field (my.target, my.source, , )
        perform_inherit_response (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_response_item (target, source)
    if switches.trace ? 0 | switches.trace_response ? 0
       my.location = location ("protocol")
       echo "<inherit_response_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_field_item (target, source)
    if switches.trace ? 0 | switches.trace_field ? 0
       my.location = location ("protocol")
       echo "<inherit_field_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[domain] ?= my.source.[domain] ?
        my.target.[type] ?= my.source.[type] ?
        my.target.[global] ?= my.source.[global] ?
        perform_inherit_assert (my.target, my.source, , )
        perform_inherit_doc (my.target, my.source, "insert", "after")
        perform_inherit_see (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_domain_item (target, source)
    if switches.trace ? 0 | switches.trace_domain ? 0
       my.location = location ("protocol")
       echo "<inherit_domain_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[type] ?= my.source.[type] ?
        perform_inherit_assert (my.target, my.source, , )
        perform_inherit_doc (my.target, my.source, "insert", "after")
        perform_inherit_see (my.target, my.source, "overlay", "before")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_assert_item (target, source)
    if switches.trace ? 0 | switches.trace_assert ? 0
       my.location = location ("protocol")
       echo "<inherit_assert_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[check] ?= my.source.[check] ?
        my.target.[value] ?= my.source.[value] ?
        my.target.[method] ?= my.source.[method] ?
        my.target.[field] ?= my.source.[field] ?
        my.target.[rule] ?= my.source.[rule] ?
        perform_inherit_value (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_value_item (target, source)
    if switches.trace ? 0 | switches.trace_value ? 0
       my.location = location ("protocol")
       echo "<inherit_value_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_context_item (target, source)
    if switches.trace ? 0 | switches.trace_context ? 0
       my.location = location ("protocol")
       echo "<inherit_context_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_action_item (target, source)
    if switches.trace ? 0 | switches.trace_action ? 0
       my.location = location ("protocol")
       echo "<inherit_action_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[sameas] ?= my.source.[sameas] ?
        perform_inherit_local (my.target, my.source, "insert", )
        perform_inherit_header (my.target, my.source, "insert", "before")
        perform_inherit_footer (my.target, my.source, "insert", "after")
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_constructor_item (target, source)
    if switches.trace ? 0 | switches.trace_constructor ? 0
       my.location = location ("protocol")
       echo "<inherit_constructor_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_destructor_item (target, source)
    if switches.trace ? 0 | switches.trace_destructor ? 0
       my.location = location ("protocol")
       echo "<inherit_destructor_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_todo_item (target, source)
    if switches.trace ? 0 | switches.trace_todo ? 0
       my.location = location ("protocol")
       echo "<inherit_todo_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[owner] ?= my.source.[owner] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_inherit_item (target, source)
    if switches.trace ? 0 | switches.trace_inherit ? 0
       my.location = location ("protocol")
       echo "<inherit_inherit_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[phase] ?= my.source.[phase] ?
        perform_inherit_option (my.target, my.source, , )
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction

function perform_inherit_option_item (target, source)
    if switches.trace ? 0 | switches.trace_option ? 0
       my.location = location ("protocol")
       echo "<inherit_option_item location = \"$(my.location)\""
    endif

    if my.target.inherit ? "default" <> "none"
        my.target._entity ?= my.source._entity ?
        my.target._key    ?= my.source._key    ?
        my.target.[name] ?= my.source.[name] ?
        my.target.[value] ?= my.source.[value] ?
        if defined (my.source.)
            my.target. = my.source. + (my.target. ? "")
        endif
    endif
endfunction



function inherit_error (message)
    echo (my.message)
    global.errno = 1
endfunction

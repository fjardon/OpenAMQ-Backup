#!/bin/sh
#
#   Boom builder for GSL 4.0c19
#   Generated by iMatix Boom from standard.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [gsl]: $* - stop" 1>&2
    else
        echo "boom E: [gsl]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [gsl]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="4.0c19"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,mt on all platforms.
#
if [ -z "$BOOM_MODEL" ]; then
    BOOM_MODEL=release,mt
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
            BOOM_MODEL="$BOOM_MODEL,mt"
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where GSL should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# --------------------------   BUILD BINARY FILES   ---------------------------

a_build_binary_files() {
:
    carp "Building GSL..."
    #   To prevent compatibility warnings...
    INCDIR=
    LIBDIR=
    export LIBDIR INCDIR
    if [ "$BOOM_TRACE" ]; then
        MY_COPTS=-v
    else
        MY_COPTS=-q
    fi
    if [ ! -z "$_LOCAL_BASE" ]; then
        MY_COPTS="$MY_COPTS -li $_LOCAL_BASE/include -ll $_LOCAL_BASE/lib"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS gsl"
    c $MY_COPTS gsl || croak "\"c $MY_COPTS gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS testpars"
    c $MY_COPTS testpars || croak "\"c $MY_COPTS testpars\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggobjt"
    c $MY_COPTS ggobjt || croak "\"c $MY_COPTS ggobjt\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggcomm"
    c $MY_COPTS ggcomm || croak "\"c $MY_COPTS ggcomm\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggscop"
    c $MY_COPTS ggscop || croak "\"c $MY_COPTS ggscop\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggcode"
    c $MY_COPTS ggcode || croak "\"c $MY_COPTS ggcode\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggcodem"
    c $MY_COPTS ggcodem || croak "\"c $MY_COPTS ggcodem\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggpars"
    c $MY_COPTS ggpars || croak "\"c $MY_COPTS ggpars\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggparsm"
    c $MY_COPTS ggparsm || croak "\"c $MY_COPTS ggparsm\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggconv"
    c $MY_COPTS ggconv || croak "\"c $MY_COPTS ggconv\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggdiag"
    c $MY_COPTS ggdiag || croak "\"c $MY_COPTS ggdiag\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggenvt"
    c $MY_COPTS ggenvt || croak "\"c $MY_COPTS ggenvt\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggfile"
    c $MY_COPTS ggfile || croak "\"c $MY_COPTS ggfile\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS gggsl"
    c $MY_COPTS gggsl || croak "\"c $MY_COPTS gggsl\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggmath"
    c $MY_COPTS ggmath || croak "\"c $MY_COPTS ggmath\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggpcre"
    c $MY_COPTS ggpcre || croak "\"c $MY_COPTS ggpcre\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggproc"
    c $MY_COPTS ggproc || croak "\"c $MY_COPTS ggproc\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggscrp"
    c $MY_COPTS ggscrp || croak "\"c $MY_COPTS ggscrp\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggsock"
    c $MY_COPTS ggsock || croak "\"c $MY_COPTS ggsock\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggstrn"
    c $MY_COPTS ggstrn || croak "\"c $MY_COPTS ggstrn\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggsymb"
    c $MY_COPTS ggsymb || croak "\"c $MY_COPTS ggsymb\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggthrd"
    c $MY_COPTS ggthrd || croak "\"c $MY_COPTS ggthrd\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggtime"
    c $MY_COPTS ggtime || croak "\"c $MY_COPTS ggtime\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS ggxml"
    c $MY_COPTS ggxml || croak "\"c $MY_COPTS ggxml\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggobjt"
    c $MY_COPTS -r libgsl ggobjt || croak "\"c $MY_COPTS -r libgsl ggobjt\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggcomm"
    c $MY_COPTS -r libgsl ggcomm || croak "\"c $MY_COPTS -r libgsl ggcomm\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggscop"
    c $MY_COPTS -r libgsl ggscop || croak "\"c $MY_COPTS -r libgsl ggscop\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggcode"
    c $MY_COPTS -r libgsl ggcode || croak "\"c $MY_COPTS -r libgsl ggcode\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggcodem"
    c $MY_COPTS -r libgsl ggcodem || croak "\"c $MY_COPTS -r libgsl ggcodem\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggpars"
    c $MY_COPTS -r libgsl ggpars || croak "\"c $MY_COPTS -r libgsl ggpars\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggparsm"
    c $MY_COPTS -r libgsl ggparsm || croak "\"c $MY_COPTS -r libgsl ggparsm\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggconv"
    c $MY_COPTS -r libgsl ggconv || croak "\"c $MY_COPTS -r libgsl ggconv\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggdiag"
    c $MY_COPTS -r libgsl ggdiag || croak "\"c $MY_COPTS -r libgsl ggdiag\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggenvt"
    c $MY_COPTS -r libgsl ggenvt || croak "\"c $MY_COPTS -r libgsl ggenvt\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggfile"
    c $MY_COPTS -r libgsl ggfile || croak "\"c $MY_COPTS -r libgsl ggfile\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl gggsl"
    c $MY_COPTS -r libgsl gggsl || croak "\"c $MY_COPTS -r libgsl gggsl\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggmath"
    c $MY_COPTS -r libgsl ggmath || croak "\"c $MY_COPTS -r libgsl ggmath\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggpcre"
    c $MY_COPTS -r libgsl ggpcre || croak "\"c $MY_COPTS -r libgsl ggpcre\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggproc"
    c $MY_COPTS -r libgsl ggproc || croak "\"c $MY_COPTS -r libgsl ggproc\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggscrp"
    c $MY_COPTS -r libgsl ggscrp || croak "\"c $MY_COPTS -r libgsl ggscrp\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggsock"
    c $MY_COPTS -r libgsl ggsock || croak "\"c $MY_COPTS -r libgsl ggsock\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggstrn"
    c $MY_COPTS -r libgsl ggstrn || croak "\"c $MY_COPTS -r libgsl ggstrn\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggsymb"
    c $MY_COPTS -r libgsl ggsymb || croak "\"c $MY_COPTS -r libgsl ggsymb\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggthrd"
    c $MY_COPTS -r libgsl ggthrd || croak "\"c $MY_COPTS -r libgsl ggthrd\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggtime"
    c $MY_COPTS -r libgsl ggtime || croak "\"c $MY_COPTS -r libgsl ggtime\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libgsl ggxml"
    c $MY_COPTS -r libgsl ggxml || croak "\"c $MY_COPTS -r libgsl ggxml\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L gsl"
    c $MY_COPTS -L gsl || croak "\"c $MY_COPTS -L gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L testpars"
    c $MY_COPTS -L testpars || croak "\"c $MY_COPTS -L testpars\" failed"
}

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "release.txt" ]; then
        echo release.txt>>_package.lst
    fi
    if [ -f "version.h" ]; then
        echo version.h>>_package.lst
    fi
    if [ -f "gsl.c" ]; then
        echo gsl.c>>_package.lst
    fi
    if [ -f "testpars.c" ]; then
        echo testpars.c>>_package.lst
    fi
    if [ -f "gsl.l" ]; then
        echo gsl.l>>_package.lst
    fi
    if [ -f "ggcode.xml" ]; then
        echo ggcode.xml>>_package.lst
    fi
    if [ -f "ggpars.xml" ]; then
        echo ggpars.xml>>_package.lst
    fi
    if [ -f "gghead.h" ]; then
        echo gghead.h>>_package.lst
    fi
    if [ -f "ggpriv.h" ]; then
        echo ggpriv.h>>_package.lst
    fi
    if [ -f "ggfunc.inc" ]; then
        echo ggfunc.inc>>_package.lst
    fi
    if [ -f "ggobjt.c" ]; then
        echo ggobjt.c>>_package.lst
    fi
    if [ -f "ggcomm.c" ]; then
        echo ggcomm.c>>_package.lst
    fi
    if [ -f "ggscop.c" ]; then
        echo ggscop.c>>_package.lst
    fi
    if [ -f "ggconv.gxl" ]; then
        echo ggconv.gxl>>_package.lst
    fi
    if [ -f "ggdiag.gxl" ]; then
        echo ggdiag.gxl>>_package.lst
    fi
    if [ -f "ggenvt.gxl" ]; then
        echo ggenvt.gxl>>_package.lst
    fi
    if [ -f "ggfile.gxl" ]; then
        echo ggfile.gxl>>_package.lst
    fi
    if [ -f "gggsl.gxl" ]; then
        echo gggsl.gxl>>_package.lst
    fi
    if [ -f "ggmath.gxl" ]; then
        echo ggmath.gxl>>_package.lst
    fi
    if [ -f "ggpcre.gxl" ]; then
        echo ggpcre.gxl>>_package.lst
    fi
    if [ -f "ggproc.gxl" ]; then
        echo ggproc.gxl>>_package.lst
    fi
    if [ -f "ggscrp.gxl" ]; then
        echo ggscrp.gxl>>_package.lst
    fi
    if [ -f "ggsock.gxl" ]; then
        echo ggsock.gxl>>_package.lst
    fi
    if [ -f "ggstrn.gxl" ]; then
        echo ggstrn.gxl>>_package.lst
    fi
    if [ -f "ggsymb.gxl" ]; then
        echo ggsymb.gxl>>_package.lst
    fi
    if [ -f "ggthrd.gxl" ]; then
        echo ggthrd.gxl>>_package.lst
    fi
    if [ -f "ggtime.gxl" ]; then
        echo ggtime.gxl>>_package.lst
    fi
    if [ -f "ggxml.gxl" ]; then
        echo ggxml.gxl>>_package.lst
    fi
    if [ -f "ggobjt.gsl" ]; then
        echo ggobjt.gsl>>_package.lst
    fi
    if [ -f "console.gsl" ]; then
        echo console.gsl>>_package.lst
    fi
    if [ -f "echod.gsl" ]; then
        echo echod.gsl>>_package.lst
    fi
    if [ -f "ggdoc.gsl" ]; then
        echo ggdoc.gsl>>_package.lst
    fi
    if [ -f "ggmacro.gsl" ]; then
        echo ggmacro.gsl>>_package.lst
    fi
    if [ -f "ggreport.gsl" ]; then
        echo ggreport.gsl>>_package.lst
    fi
    if [ -f "testall.gsl" ]; then
        echo testall.gsl>>_package.lst
    fi
    if [ -f "testchi2.gsl" ]; then
        echo testchi2.gsl>>_package.lst
    fi
    if [ -f "testconv.gsl" ]; then
        echo testconv.gsl>>_package.lst
    fi
    if [ -f "testdate.gsl" ]; then
        echo testdate.gsl>>_package.lst
    fi
    if [ -f "testdir.gsl" ]; then
        echo testdir.gsl>>_package.lst
    fi
    if [ -f "testecho.gsl" ]; then
        echo testecho.gsl>>_package.lst
    fi
    if [ -f "testfile.gsl" ]; then
        echo testfile.gsl>>_package.lst
    fi
    if [ -f "testmath.gsl" ]; then
        echo testmath.gsl>>_package.lst
    fi
    if [ -f "testpcre.gsl" ]; then
        echo testpcre.gsl>>_package.lst
    fi
    if [ -f "testscope.gsl" ]; then
        echo testscope.gsl>>_package.lst
    fi
    if [ -f "testsort.gsl" ]; then
        echo testsort.gsl>>_package.lst
    fi
    if [ -f "teststr.gsl" ]; then
        echo teststr.gsl>>_package.lst
    fi
    if [ -f "testzip.gsl" ]; then
        echo testzip.gsl>>_package.lst
    fi
    if [ -f "gsldoc.txt" ]; then
        echo gsldoc.txt>>_package.lst
    fi
    if [ -f "prelude.pdl" ]; then
        echo prelude.pdl>>_package.lst
    fi
    if [ -f "license.gpl" ]; then
        echo license.gpl>>_package.lst
    fi
    if [ -f "project.pdl" ]; then
        echo project.pdl>>_package.lst
    fi
    if [ -f "readme.txt" ]; then
        echo readme.txt>>_package.lst
    fi
    if [ -f "gsl.i" ]; then
        echo gsl.i>>_package.lst
    fi
    if [ -f "gsl.d" ]; then
        echo gsl.d>>_package.lst
    fi
    if [ -f "ggcode.l" ]; then
        echo ggcode.l>>_package.lst
    fi
    if [ -f "ggcode.i" ]; then
        echo ggcode.i>>_package.lst
    fi
    if [ -f "ggcode.d" ]; then
        echo ggcode.d>>_package.lst
    fi
    if [ -f "ggcode.c" ]; then
        echo ggcode.c>>_package.lst
    fi
    if [ -f "ggcode.h" ]; then
        echo ggcode.h>>_package.lst
    fi
    if [ -f "ggcodem.c" ]; then
        echo ggcodem.c>>_package.lst
    fi
    if [ -f "ggcodem.h" ]; then
        echo ggcodem.h>>_package.lst
    fi
    if [ -f "ggpars.l" ]; then
        echo ggpars.l>>_package.lst
    fi
    if [ -f "ggpars.i" ]; then
        echo ggpars.i>>_package.lst
    fi
    if [ -f "ggpars.d" ]; then
        echo ggpars.d>>_package.lst
    fi
    if [ -f "ggpars.c" ]; then
        echo ggpars.c>>_package.lst
    fi
    if [ -f "ggpars.h" ]; then
        echo ggpars.h>>_package.lst
    fi
    if [ -f "ggparsm.c" ]; then
        echo ggparsm.c>>_package.lst
    fi
    if [ -f "ggparsm.h" ]; then
        echo ggparsm.h>>_package.lst
    fi
    if [ -f "ggobjt.h" ]; then
        echo ggobjt.h>>_package.lst
    fi
    if [ -f "ggcomm.h" ]; then
        echo ggcomm.h>>_package.lst
    fi
    if [ -f "ggscop.h" ]; then
        echo ggscop.h>>_package.lst
    fi
    if [ -f "ggconv.c" ]; then
        echo ggconv.c>>_package.lst
    fi
    if [ -f "ggconv.h" ]; then
        echo ggconv.h>>_package.lst
    fi
    if [ -f "ggdiag.c" ]; then
        echo ggdiag.c>>_package.lst
    fi
    if [ -f "ggdiag.h" ]; then
        echo ggdiag.h>>_package.lst
    fi
    if [ -f "ggenvt.c" ]; then
        echo ggenvt.c>>_package.lst
    fi
    if [ -f "ggenvt.h" ]; then
        echo ggenvt.h>>_package.lst
    fi
    if [ -f "ggfile.c" ]; then
        echo ggfile.c>>_package.lst
    fi
    if [ -f "ggfile.h" ]; then
        echo ggfile.h>>_package.lst
    fi
    if [ -f "gggsl.c" ]; then
        echo gggsl.c>>_package.lst
    fi
    if [ -f "gggsl.h" ]; then
        echo gggsl.h>>_package.lst
    fi
    if [ -f "gggsl.l" ]; then
        echo gggsl.l>>_package.lst
    fi
    if [ -f "gggsl.i" ]; then
        echo gggsl.i>>_package.lst
    fi
    if [ -f "gggsl.d" ]; then
        echo gggsl.d>>_package.lst
    fi
    if [ -f "ggmath.c" ]; then
        echo ggmath.c>>_package.lst
    fi
    if [ -f "ggmath.h" ]; then
        echo ggmath.h>>_package.lst
    fi
    if [ -f "ggpcre.c" ]; then
        echo ggpcre.c>>_package.lst
    fi
    if [ -f "ggpcre.h" ]; then
        echo ggpcre.h>>_package.lst
    fi
    if [ -f "ggproc.c" ]; then
        echo ggproc.c>>_package.lst
    fi
    if [ -f "ggproc.h" ]; then
        echo ggproc.h>>_package.lst
    fi
    if [ -f "ggscrp.c" ]; then
        echo ggscrp.c>>_package.lst
    fi
    if [ -f "ggscrp.h" ]; then
        echo ggscrp.h>>_package.lst
    fi
    if [ -f "ggscrp.l" ]; then
        echo ggscrp.l>>_package.lst
    fi
    if [ -f "ggscrp.i" ]; then
        echo ggscrp.i>>_package.lst
    fi
    if [ -f "ggscrp.d" ]; then
        echo ggscrp.d>>_package.lst
    fi
    if [ -f "ggsock.c" ]; then
        echo ggsock.c>>_package.lst
    fi
    if [ -f "ggsock.h" ]; then
        echo ggsock.h>>_package.lst
    fi
    if [ -f "ggsock.l" ]; then
        echo ggsock.l>>_package.lst
    fi
    if [ -f "ggsock.i" ]; then
        echo ggsock.i>>_package.lst
    fi
    if [ -f "ggsock.d" ]; then
        echo ggsock.d>>_package.lst
    fi
    if [ -f "ggstrn.c" ]; then
        echo ggstrn.c>>_package.lst
    fi
    if [ -f "ggstrn.h" ]; then
        echo ggstrn.h>>_package.lst
    fi
    if [ -f "ggsymb.c" ]; then
        echo ggsymb.c>>_package.lst
    fi
    if [ -f "ggsymb.h" ]; then
        echo ggsymb.h>>_package.lst
    fi
    if [ -f "ggthrd.c" ]; then
        echo ggthrd.c>>_package.lst
    fi
    if [ -f "ggthrd.h" ]; then
        echo ggthrd.h>>_package.lst
    fi
    if [ -f "ggthrd.l" ]; then
        echo ggthrd.l>>_package.lst
    fi
    if [ -f "ggthrd.i" ]; then
        echo ggthrd.i>>_package.lst
    fi
    if [ -f "ggthrd.d" ]; then
        echo ggthrd.d>>_package.lst
    fi
    if [ -f "ggtime.c" ]; then
        echo ggtime.c>>_package.lst
    fi
    if [ -f "ggtime.h" ]; then
        echo ggtime.h>>_package.lst
    fi
    if [ -f "ggxml.c" ]; then
        echo ggxml.c>>_package.lst
    fi
    if [ -f "ggxml.h" ]; then
        echo ggxml.h>>_package.lst
    fi
    if [ -f "gsl.h" ]; then
        echo gsl.h>>_package.lst
    fi
    if [ -f "stamp_generate" ]; then
        echo stamp_generate>>_package.lst
    fi
    if [ -f "boomakew.bat" ]; then
        echo boomakew.bat>>_package.lst
    fi
    if [ -f "configure" ]; then
        echo configure>>_package.lst
    fi
    if [ -f "Makefile.unix" ]; then
        echo Makefile.unix>>_package.lst
    fi
    if [ -f "boomake" ]; then
        echo boomake>>_package.lst
    fi
    if [ -f "configure.bat" ]; then
        echo configure.bat>>_package.lst
    fi
    if [ -f "Makefile.win32" ]; then
        echo Makefile.win32>>_package.lst
    fi
    if [ -f "boomake.bat" ]; then
        echo boomake.bat>>_package.lst
    fi
    if [ -f "gsl.vcproj" ]; then
        echo gsl.vcproj>>_package.lst
    fi
    if [ -f "libgsl.vcproj" ]; then
        echo libgsl.vcproj>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building gsl-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d gsl-$MY_VERSION
    rm -f gsl-$MY_VERSION-src.tar.gz
    tar -cf  gsl-$MY_VERSION-src.tar gsl-$MY_VERSION
    gzip gsl-$MY_VERSION-src.tar
    rm -f gsl-$MY_VERSION-src.zip
    carp "Building gsl-$MY_VERSION-src.zip..."
    zip -lrmq gsl-$MY_VERSION-src.zip gsl-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "release.txt" ]; then
        croak "release.txt is missing"
    fi
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "gsl.c" ]; then
        croak "gsl.c is missing"
    fi
    if [ ! -f "testpars.c" ]; then
        croak "testpars.c is missing"
    fi
    if [ ! -f "gsl.l" ]; then
        croak "gsl.l is missing"
    fi
    if [ ! -f "ggcode.xml" ]; then
        croak "ggcode.xml is missing"
    fi
    if [ ! -f "ggpars.xml" ]; then
        croak "ggpars.xml is missing"
    fi
    if [ ! -f "gghead.h" ]; then
        croak "gghead.h is missing"
    fi
    if [ ! -f "ggpriv.h" ]; then
        croak "ggpriv.h is missing"
    fi
    if [ ! -f "ggfunc.inc" ]; then
        croak "ggfunc.inc is missing"
    fi
    if [ ! -f "ggobjt.c" ]; then
        croak "ggobjt.c is missing"
    fi
    if [ ! -f "ggcomm.c" ]; then
        croak "ggcomm.c is missing"
    fi
    if [ ! -f "ggscop.c" ]; then
        croak "ggscop.c is missing"
    fi
    if [ ! -f "ggconv.gxl" ]; then
        croak "ggconv.gxl is missing"
    fi
    if [ ! -f "ggdiag.gxl" ]; then
        croak "ggdiag.gxl is missing"
    fi
    if [ ! -f "ggenvt.gxl" ]; then
        croak "ggenvt.gxl is missing"
    fi
    if [ ! -f "ggfile.gxl" ]; then
        croak "ggfile.gxl is missing"
    fi
    if [ ! -f "gggsl.gxl" ]; then
        croak "gggsl.gxl is missing"
    fi
    if [ ! -f "ggmath.gxl" ]; then
        croak "ggmath.gxl is missing"
    fi
    if [ ! -f "ggpcre.gxl" ]; then
        croak "ggpcre.gxl is missing"
    fi
    if [ ! -f "ggproc.gxl" ]; then
        croak "ggproc.gxl is missing"
    fi
    if [ ! -f "ggscrp.gxl" ]; then
        croak "ggscrp.gxl is missing"
    fi
    if [ ! -f "ggsock.gxl" ]; then
        croak "ggsock.gxl is missing"
    fi
    if [ ! -f "ggstrn.gxl" ]; then
        croak "ggstrn.gxl is missing"
    fi
    if [ ! -f "ggsymb.gxl" ]; then
        croak "ggsymb.gxl is missing"
    fi
    if [ ! -f "ggthrd.gxl" ]; then
        croak "ggthrd.gxl is missing"
    fi
    if [ ! -f "ggtime.gxl" ]; then
        croak "ggtime.gxl is missing"
    fi
    if [ ! -f "ggxml.gxl" ]; then
        croak "ggxml.gxl is missing"
    fi
    if [ ! -f "ggobjt.gsl" ]; then
        croak "ggobjt.gsl is missing"
    fi
    if [ ! -f "console.gsl" ]; then
        croak "console.gsl is missing"
    fi
    if [ ! -f "echod.gsl" ]; then
        croak "echod.gsl is missing"
    fi
    if [ ! -f "ggdoc.gsl" ]; then
        croak "ggdoc.gsl is missing"
    fi
    if [ ! -f "ggmacro.gsl" ]; then
        croak "ggmacro.gsl is missing"
    fi
    if [ ! -f "ggreport.gsl" ]; then
        croak "ggreport.gsl is missing"
    fi
    if [ ! -f "testall.gsl" ]; then
        croak "testall.gsl is missing"
    fi
    if [ ! -f "testchi2.gsl" ]; then
        croak "testchi2.gsl is missing"
    fi
    if [ ! -f "testconv.gsl" ]; then
        croak "testconv.gsl is missing"
    fi
    if [ ! -f "testdate.gsl" ]; then
        croak "testdate.gsl is missing"
    fi
    if [ ! -f "testdir.gsl" ]; then
        croak "testdir.gsl is missing"
    fi
    if [ ! -f "testecho.gsl" ]; then
        croak "testecho.gsl is missing"
    fi
    if [ ! -f "testfile.gsl" ]; then
        croak "testfile.gsl is missing"
    fi
    if [ ! -f "testmath.gsl" ]; then
        croak "testmath.gsl is missing"
    fi
    if [ ! -f "testpcre.gsl" ]; then
        croak "testpcre.gsl is missing"
    fi
    if [ ! -f "testscope.gsl" ]; then
        croak "testscope.gsl is missing"
    fi
    if [ ! -f "testsort.gsl" ]; then
        croak "testsort.gsl is missing"
    fi
    if [ ! -f "teststr.gsl" ]; then
        croak "teststr.gsl is missing"
    fi
    if [ ! -f "testzip.gsl" ]; then
        croak "testzip.gsl is missing"
    fi
    if [ ! -f "gsldoc.txt" ]; then
        croak "gsldoc.txt is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "gsl.i" ]; then
        croak "gsl.i is missing"
    fi
    if [ ! -f "gsl.d" ]; then
        croak "gsl.d is missing"
    fi
    if [ ! -f "ggcode.l" ]; then
        croak "ggcode.l is missing"
    fi
    if [ ! -f "ggcode.i" ]; then
        croak "ggcode.i is missing"
    fi
    if [ ! -f "ggcode.d" ]; then
        croak "ggcode.d is missing"
    fi
    if [ ! -f "ggcode.c" ]; then
        croak "ggcode.c is missing"
    fi
    if [ ! -f "ggcode.h" ]; then
        croak "ggcode.h is missing"
    fi
    if [ ! -f "ggcodem.c" ]; then
        croak "ggcodem.c is missing"
    fi
    if [ ! -f "ggcodem.h" ]; then
        croak "ggcodem.h is missing"
    fi
    if [ ! -f "ggpars.l" ]; then
        croak "ggpars.l is missing"
    fi
    if [ ! -f "ggpars.i" ]; then
        croak "ggpars.i is missing"
    fi
    if [ ! -f "ggpars.d" ]; then
        croak "ggpars.d is missing"
    fi
    if [ ! -f "ggpars.c" ]; then
        croak "ggpars.c is missing"
    fi
    if [ ! -f "ggpars.h" ]; then
        croak "ggpars.h is missing"
    fi
    if [ ! -f "ggparsm.c" ]; then
        croak "ggparsm.c is missing"
    fi
    if [ ! -f "ggparsm.h" ]; then
        croak "ggparsm.h is missing"
    fi
    if [ ! -f "ggobjt.h" ]; then
        croak "ggobjt.h is missing"
    fi
    if [ ! -f "ggcomm.h" ]; then
        croak "ggcomm.h is missing"
    fi
    if [ ! -f "ggscop.h" ]; then
        croak "ggscop.h is missing"
    fi
    if [ ! -f "ggconv.c" ]; then
        croak "ggconv.c is missing"
    fi
    if [ ! -f "ggconv.h" ]; then
        croak "ggconv.h is missing"
    fi
    if [ ! -f "ggdiag.c" ]; then
        croak "ggdiag.c is missing"
    fi
    if [ ! -f "ggdiag.h" ]; then
        croak "ggdiag.h is missing"
    fi
    if [ ! -f "ggenvt.c" ]; then
        croak "ggenvt.c is missing"
    fi
    if [ ! -f "ggenvt.h" ]; then
        croak "ggenvt.h is missing"
    fi
    if [ ! -f "ggfile.c" ]; then
        croak "ggfile.c is missing"
    fi
    if [ ! -f "ggfile.h" ]; then
        croak "ggfile.h is missing"
    fi
    if [ ! -f "gggsl.c" ]; then
        croak "gggsl.c is missing"
    fi
    if [ ! -f "gggsl.h" ]; then
        croak "gggsl.h is missing"
    fi
    if [ ! -f "gggsl.l" ]; then
        croak "gggsl.l is missing"
    fi
    if [ ! -f "gggsl.i" ]; then
        croak "gggsl.i is missing"
    fi
    if [ ! -f "gggsl.d" ]; then
        croak "gggsl.d is missing"
    fi
    if [ ! -f "ggmath.c" ]; then
        croak "ggmath.c is missing"
    fi
    if [ ! -f "ggmath.h" ]; then
        croak "ggmath.h is missing"
    fi
    if [ ! -f "ggpcre.c" ]; then
        croak "ggpcre.c is missing"
    fi
    if [ ! -f "ggpcre.h" ]; then
        croak "ggpcre.h is missing"
    fi
    if [ ! -f "ggproc.c" ]; then
        croak "ggproc.c is missing"
    fi
    if [ ! -f "ggproc.h" ]; then
        croak "ggproc.h is missing"
    fi
    if [ ! -f "ggscrp.c" ]; then
        croak "ggscrp.c is missing"
    fi
    if [ ! -f "ggscrp.h" ]; then
        croak "ggscrp.h is missing"
    fi
    if [ ! -f "ggscrp.l" ]; then
        croak "ggscrp.l is missing"
    fi
    if [ ! -f "ggscrp.i" ]; then
        croak "ggscrp.i is missing"
    fi
    if [ ! -f "ggscrp.d" ]; then
        croak "ggscrp.d is missing"
    fi
    if [ ! -f "ggsock.c" ]; then
        croak "ggsock.c is missing"
    fi
    if [ ! -f "ggsock.h" ]; then
        croak "ggsock.h is missing"
    fi
    if [ ! -f "ggsock.l" ]; then
        croak "ggsock.l is missing"
    fi
    if [ ! -f "ggsock.i" ]; then
        croak "ggsock.i is missing"
    fi
    if [ ! -f "ggsock.d" ]; then
        croak "ggsock.d is missing"
    fi
    if [ ! -f "ggstrn.c" ]; then
        croak "ggstrn.c is missing"
    fi
    if [ ! -f "ggstrn.h" ]; then
        croak "ggstrn.h is missing"
    fi
    if [ ! -f "ggsymb.c" ]; then
        croak "ggsymb.c is missing"
    fi
    if [ ! -f "ggsymb.h" ]; then
        croak "ggsymb.h is missing"
    fi
    if [ ! -f "ggthrd.c" ]; then
        croak "ggthrd.c is missing"
    fi
    if [ ! -f "ggthrd.h" ]; then
        croak "ggthrd.h is missing"
    fi
    if [ ! -f "ggthrd.l" ]; then
        croak "ggthrd.l is missing"
    fi
    if [ ! -f "ggthrd.i" ]; then
        croak "ggthrd.i is missing"
    fi
    if [ ! -f "ggthrd.d" ]; then
        croak "ggthrd.d is missing"
    fi
    if [ ! -f "ggtime.c" ]; then
        croak "ggtime.c is missing"
    fi
    if [ ! -f "ggtime.h" ]; then
        croak "ggtime.h is missing"
    fi
    if [ ! -f "ggxml.c" ]; then
        croak "ggxml.c is missing"
    fi
    if [ ! -f "ggxml.h" ]; then
        croak "ggxml.h is missing"
    fi
    if [ ! -f "gsl.h" ]; then
        croak "gsl.h is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
    if [ ! -f "gsl.vcproj" ]; then
        croak "gsl.vcproj is missing"
    fi
    if [ ! -f "libgsl.vcproj" ]; then
        croak "libgsl.vcproj is missing"
    fi
}

# -----------------------   CHECK BINARY FILES EXIST   ------------------------

a_check_binary_files_exist() {
:
    if [ ! -f "release.txt" ]; then
        croak "release.txt is missing"
    fi
    if [ ! -f "ggobjt.gsl" ]; then
        croak "ggobjt.gsl is missing"
    fi
    if [ ! -f "gsl" ]; then
        croak "gsl is missing"
    fi
    if [ ! -f "libgsl.a" ]; then
        croak "libgsl.a is missing"
    fi
    if [ ! -f "gsldoc.txt" ]; then
        croak "gsldoc.txt is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "ggcodem.h" ]; then
        croak "ggcodem.h is missing"
    fi
    if [ ! -f "ggparsm.h" ]; then
        croak "ggparsm.h is missing"
    fi
    if [ ! -f "ggconv.h" ]; then
        croak "ggconv.h is missing"
    fi
    if [ ! -f "ggdiag.h" ]; then
        croak "ggdiag.h is missing"
    fi
    if [ ! -f "ggenvt.h" ]; then
        croak "ggenvt.h is missing"
    fi
    if [ ! -f "ggfile.h" ]; then
        croak "ggfile.h is missing"
    fi
    if [ ! -f "gggsl.h" ]; then
        croak "gggsl.h is missing"
    fi
    if [ ! -f "ggmath.h" ]; then
        croak "ggmath.h is missing"
    fi
    if [ ! -f "ggpcre.h" ]; then
        croak "ggpcre.h is missing"
    fi
    if [ ! -f "ggproc.h" ]; then
        croak "ggproc.h is missing"
    fi
    if [ ! -f "ggscrp.h" ]; then
        croak "ggscrp.h is missing"
    fi
    if [ ! -f "ggsock.h" ]; then
        croak "ggsock.h is missing"
    fi
    if [ ! -f "ggstrn.h" ]; then
        croak "ggstrn.h is missing"
    fi
    if [ ! -f "ggsymb.h" ]; then
        croak "ggsymb.h is missing"
    fi
    if [ ! -f "ggthrd.h" ]; then
        croak "ggthrd.h is missing"
    fi
    if [ ! -f "ggtime.h" ]; then
        croak "ggtime.h is missing"
    fi
    if [ ! -f "ggxml.h" ]; then
        croak "ggxml.h is missing"
    fi
    if [ ! -f "gsl.h" ]; then
        croak "gsl.h is missing"
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "release.txt" ]; then
        croak "release.txt is missing"
    fi
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "gsl.c" ]; then
        croak "gsl.c is missing"
    fi
    if [ ! -f "testpars.c" ]; then
        croak "testpars.c is missing"
    fi
    if [ ! -f "gsl.l" ]; then
        croak "gsl.l is missing"
    fi
    if [ ! -f "ggcode.xml" ]; then
        croak "ggcode.xml is missing"
    fi
    if [ ! -f "ggpars.xml" ]; then
        croak "ggpars.xml is missing"
    fi
    if [ ! -f "gghead.h" ]; then
        croak "gghead.h is missing"
    fi
    if [ ! -f "ggpriv.h" ]; then
        croak "ggpriv.h is missing"
    fi
    if [ ! -f "ggfunc.inc" ]; then
        croak "ggfunc.inc is missing"
    fi
    if [ ! -f "ggobjt.c" ]; then
        croak "ggobjt.c is missing"
    fi
    if [ ! -f "ggcomm.c" ]; then
        croak "ggcomm.c is missing"
    fi
    if [ ! -f "ggscop.c" ]; then
        croak "ggscop.c is missing"
    fi
    if [ ! -f "ggconv.gxl" ]; then
        croak "ggconv.gxl is missing"
    fi
    if [ ! -f "ggdiag.gxl" ]; then
        croak "ggdiag.gxl is missing"
    fi
    if [ ! -f "ggenvt.gxl" ]; then
        croak "ggenvt.gxl is missing"
    fi
    if [ ! -f "ggfile.gxl" ]; then
        croak "ggfile.gxl is missing"
    fi
    if [ ! -f "gggsl.gxl" ]; then
        croak "gggsl.gxl is missing"
    fi
    if [ ! -f "ggmath.gxl" ]; then
        croak "ggmath.gxl is missing"
    fi
    if [ ! -f "ggpcre.gxl" ]; then
        croak "ggpcre.gxl is missing"
    fi
    if [ ! -f "ggproc.gxl" ]; then
        croak "ggproc.gxl is missing"
    fi
    if [ ! -f "ggscrp.gxl" ]; then
        croak "ggscrp.gxl is missing"
    fi
    if [ ! -f "ggsock.gxl" ]; then
        croak "ggsock.gxl is missing"
    fi
    if [ ! -f "ggstrn.gxl" ]; then
        croak "ggstrn.gxl is missing"
    fi
    if [ ! -f "ggsymb.gxl" ]; then
        croak "ggsymb.gxl is missing"
    fi
    if [ ! -f "ggthrd.gxl" ]; then
        croak "ggthrd.gxl is missing"
    fi
    if [ ! -f "ggtime.gxl" ]; then
        croak "ggtime.gxl is missing"
    fi
    if [ ! -f "ggxml.gxl" ]; then
        croak "ggxml.gxl is missing"
    fi
    if [ ! -f "ggobjt.gsl" ]; then
        croak "ggobjt.gsl is missing"
    fi
    if [ ! -f "console.gsl" ]; then
        croak "console.gsl is missing"
    fi
    if [ ! -f "echod.gsl" ]; then
        croak "echod.gsl is missing"
    fi
    if [ ! -f "ggdoc.gsl" ]; then
        croak "ggdoc.gsl is missing"
    fi
    if [ ! -f "ggmacro.gsl" ]; then
        croak "ggmacro.gsl is missing"
    fi
    if [ ! -f "ggreport.gsl" ]; then
        croak "ggreport.gsl is missing"
    fi
    if [ ! -f "testall.gsl" ]; then
        croak "testall.gsl is missing"
    fi
    if [ ! -f "testchi2.gsl" ]; then
        croak "testchi2.gsl is missing"
    fi
    if [ ! -f "testconv.gsl" ]; then
        croak "testconv.gsl is missing"
    fi
    if [ ! -f "testdate.gsl" ]; then
        croak "testdate.gsl is missing"
    fi
    if [ ! -f "testdir.gsl" ]; then
        croak "testdir.gsl is missing"
    fi
    if [ ! -f "testecho.gsl" ]; then
        croak "testecho.gsl is missing"
    fi
    if [ ! -f "testfile.gsl" ]; then
        croak "testfile.gsl is missing"
    fi
    if [ ! -f "testmath.gsl" ]; then
        croak "testmath.gsl is missing"
    fi
    if [ ! -f "testpcre.gsl" ]; then
        croak "testpcre.gsl is missing"
    fi
    if [ ! -f "testscope.gsl" ]; then
        croak "testscope.gsl is missing"
    fi
    if [ ! -f "testsort.gsl" ]; then
        croak "testsort.gsl is missing"
    fi
    if [ ! -f "teststr.gsl" ]; then
        croak "teststr.gsl is missing"
    fi
    if [ ! -f "testzip.gsl" ]; then
        croak "testzip.gsl is missing"
    fi
    if [ ! -f "gsldoc.txt" ]; then
        croak "gsldoc.txt is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "ggcode.l" ]; then
        croak "ggcode.l is missing"
    fi
    if [ ! -f "ggcode.c" ]; then
        croak "ggcode.c is missing"
    fi
    if [ ! -f "ggcode.h" ]; then
        croak "ggcode.h is missing"
    fi
    if [ ! -f "ggpars.l" ]; then
        croak "ggpars.l is missing"
    fi
    if [ ! -f "ggpars.c" ]; then
        croak "ggpars.c is missing"
    fi
    if [ ! -f "ggpars.h" ]; then
        croak "ggpars.h is missing"
    fi
    if [ ! -f "ggobjt.h" ]; then
        croak "ggobjt.h is missing"
    fi
    if [ ! -f "ggcomm.h" ]; then
        croak "ggcomm.h is missing"
    fi
    if [ ! -f "ggscop.h" ]; then
        croak "ggscop.h is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "release.txt" ]; then
        croak "release.txt is missing"
    fi
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "gsl.c" ]; then
        croak "gsl.c is missing"
    fi
    if [ ! -f "testpars.c" ]; then
        croak "testpars.c is missing"
    fi
    if [ ! -f "gsl.l" ]; then
        croak "gsl.l is missing"
    fi
    if [ ! -f "ggcode.xml" ]; then
        croak "ggcode.xml is missing"
    fi
    if [ ! -f "ggpars.xml" ]; then
        croak "ggpars.xml is missing"
    fi
    if [ ! -f "gghead.h" ]; then
        croak "gghead.h is missing"
    fi
    if [ ! -f "ggpriv.h" ]; then
        croak "ggpriv.h is missing"
    fi
    if [ ! -f "ggfunc.inc" ]; then
        croak "ggfunc.inc is missing"
    fi
    if [ ! -f "ggobjt.c" ]; then
        croak "ggobjt.c is missing"
    fi
    if [ ! -f "ggcomm.c" ]; then
        croak "ggcomm.c is missing"
    fi
    if [ ! -f "ggscop.c" ]; then
        croak "ggscop.c is missing"
    fi
    if [ ! -f "ggconv.gxl" ]; then
        croak "ggconv.gxl is missing"
    fi
    if [ ! -f "ggdiag.gxl" ]; then
        croak "ggdiag.gxl is missing"
    fi
    if [ ! -f "ggenvt.gxl" ]; then
        croak "ggenvt.gxl is missing"
    fi
    if [ ! -f "ggfile.gxl" ]; then
        croak "ggfile.gxl is missing"
    fi
    if [ ! -f "gggsl.gxl" ]; then
        croak "gggsl.gxl is missing"
    fi
    if [ ! -f "ggmath.gxl" ]; then
        croak "ggmath.gxl is missing"
    fi
    if [ ! -f "ggpcre.gxl" ]; then
        croak "ggpcre.gxl is missing"
    fi
    if [ ! -f "ggproc.gxl" ]; then
        croak "ggproc.gxl is missing"
    fi
    if [ ! -f "ggscrp.gxl" ]; then
        croak "ggscrp.gxl is missing"
    fi
    if [ ! -f "ggsock.gxl" ]; then
        croak "ggsock.gxl is missing"
    fi
    if [ ! -f "ggstrn.gxl" ]; then
        croak "ggstrn.gxl is missing"
    fi
    if [ ! -f "ggsymb.gxl" ]; then
        croak "ggsymb.gxl is missing"
    fi
    if [ ! -f "ggthrd.gxl" ]; then
        croak "ggthrd.gxl is missing"
    fi
    if [ ! -f "ggtime.gxl" ]; then
        croak "ggtime.gxl is missing"
    fi
    if [ ! -f "ggxml.gxl" ]; then
        croak "ggxml.gxl is missing"
    fi
    if [ ! -f "ggobjt.gsl" ]; then
        croak "ggobjt.gsl is missing"
    fi
    if [ ! -f "console.gsl" ]; then
        croak "console.gsl is missing"
    fi
    if [ ! -f "echod.gsl" ]; then
        croak "echod.gsl is missing"
    fi
    if [ ! -f "ggdoc.gsl" ]; then
        croak "ggdoc.gsl is missing"
    fi
    if [ ! -f "ggmacro.gsl" ]; then
        croak "ggmacro.gsl is missing"
    fi
    if [ ! -f "ggreport.gsl" ]; then
        croak "ggreport.gsl is missing"
    fi
    if [ ! -f "testall.gsl" ]; then
        croak "testall.gsl is missing"
    fi
    if [ ! -f "testchi2.gsl" ]; then
        croak "testchi2.gsl is missing"
    fi
    if [ ! -f "testconv.gsl" ]; then
        croak "testconv.gsl is missing"
    fi
    if [ ! -f "testdate.gsl" ]; then
        croak "testdate.gsl is missing"
    fi
    if [ ! -f "testdir.gsl" ]; then
        croak "testdir.gsl is missing"
    fi
    if [ ! -f "testecho.gsl" ]; then
        croak "testecho.gsl is missing"
    fi
    if [ ! -f "testfile.gsl" ]; then
        croak "testfile.gsl is missing"
    fi
    if [ ! -f "testmath.gsl" ]; then
        croak "testmath.gsl is missing"
    fi
    if [ ! -f "testpcre.gsl" ]; then
        croak "testpcre.gsl is missing"
    fi
    if [ ! -f "testscope.gsl" ]; then
        croak "testscope.gsl is missing"
    fi
    if [ ! -f "testsort.gsl" ]; then
        croak "testsort.gsl is missing"
    fi
    if [ ! -f "teststr.gsl" ]; then
        croak "teststr.gsl is missing"
    fi
    if [ ! -f "testzip.gsl" ]; then
        croak "testzip.gsl is missing"
    fi
    if [ ! -f "gsldoc.txt" ]; then
        croak "gsldoc.txt is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "gsl.i" ]; then
        croak "gsl.i is missing"
    fi
    if [ ! -f "gsl.d" ]; then
        croak "gsl.d is missing"
    fi
    if [ ! -f "ggcode.l" ]; then
        croak "ggcode.l is missing"
    fi
    if [ ! -f "ggcode.i" ]; then
        croak "ggcode.i is missing"
    fi
    if [ ! -f "ggcode.d" ]; then
        croak "ggcode.d is missing"
    fi
    if [ ! -f "ggcode.c" ]; then
        croak "ggcode.c is missing"
    fi
    if [ ! -f "ggcode.h" ]; then
        croak "ggcode.h is missing"
    fi
    if [ ! -f "ggcodem.c" ]; then
        croak "ggcodem.c is missing"
    fi
    if [ ! -f "ggcodem.h" ]; then
        croak "ggcodem.h is missing"
    fi
    if [ ! -f "ggpars.l" ]; then
        croak "ggpars.l is missing"
    fi
    if [ ! -f "ggpars.i" ]; then
        croak "ggpars.i is missing"
    fi
    if [ ! -f "ggpars.d" ]; then
        croak "ggpars.d is missing"
    fi
    if [ ! -f "ggpars.c" ]; then
        croak "ggpars.c is missing"
    fi
    if [ ! -f "ggpars.h" ]; then
        croak "ggpars.h is missing"
    fi
    if [ ! -f "ggparsm.c" ]; then
        croak "ggparsm.c is missing"
    fi
    if [ ! -f "ggparsm.h" ]; then
        croak "ggparsm.h is missing"
    fi
    if [ ! -f "ggobjt.h" ]; then
        croak "ggobjt.h is missing"
    fi
    if [ ! -f "ggcomm.h" ]; then
        croak "ggcomm.h is missing"
    fi
    if [ ! -f "ggscop.h" ]; then
        croak "ggscop.h is missing"
    fi
    if [ ! -f "ggconv.c" ]; then
        croak "ggconv.c is missing"
    fi
    if [ ! -f "ggconv.h" ]; then
        croak "ggconv.h is missing"
    fi
    if [ ! -f "ggdiag.c" ]; then
        croak "ggdiag.c is missing"
    fi
    if [ ! -f "ggdiag.h" ]; then
        croak "ggdiag.h is missing"
    fi
    if [ ! -f "ggenvt.c" ]; then
        croak "ggenvt.c is missing"
    fi
    if [ ! -f "ggenvt.h" ]; then
        croak "ggenvt.h is missing"
    fi
    if [ ! -f "ggfile.c" ]; then
        croak "ggfile.c is missing"
    fi
    if [ ! -f "ggfile.h" ]; then
        croak "ggfile.h is missing"
    fi
    if [ ! -f "gggsl.c" ]; then
        croak "gggsl.c is missing"
    fi
    if [ ! -f "gggsl.h" ]; then
        croak "gggsl.h is missing"
    fi
    if [ ! -f "gggsl.l" ]; then
        croak "gggsl.l is missing"
    fi
    if [ ! -f "gggsl.i" ]; then
        croak "gggsl.i is missing"
    fi
    if [ ! -f "gggsl.d" ]; then
        croak "gggsl.d is missing"
    fi
    if [ ! -f "ggmath.c" ]; then
        croak "ggmath.c is missing"
    fi
    if [ ! -f "ggmath.h" ]; then
        croak "ggmath.h is missing"
    fi
    if [ ! -f "ggpcre.c" ]; then
        croak "ggpcre.c is missing"
    fi
    if [ ! -f "ggpcre.h" ]; then
        croak "ggpcre.h is missing"
    fi
    if [ ! -f "ggproc.c" ]; then
        croak "ggproc.c is missing"
    fi
    if [ ! -f "ggproc.h" ]; then
        croak "ggproc.h is missing"
    fi
    if [ ! -f "ggscrp.c" ]; then
        croak "ggscrp.c is missing"
    fi
    if [ ! -f "ggscrp.h" ]; then
        croak "ggscrp.h is missing"
    fi
    if [ ! -f "ggscrp.l" ]; then
        croak "ggscrp.l is missing"
    fi
    if [ ! -f "ggscrp.i" ]; then
        croak "ggscrp.i is missing"
    fi
    if [ ! -f "ggscrp.d" ]; then
        croak "ggscrp.d is missing"
    fi
    if [ ! -f "ggsock.c" ]; then
        croak "ggsock.c is missing"
    fi
    if [ ! -f "ggsock.h" ]; then
        croak "ggsock.h is missing"
    fi
    if [ ! -f "ggsock.l" ]; then
        croak "ggsock.l is missing"
    fi
    if [ ! -f "ggsock.i" ]; then
        croak "ggsock.i is missing"
    fi
    if [ ! -f "ggsock.d" ]; then
        croak "ggsock.d is missing"
    fi
    if [ ! -f "ggstrn.c" ]; then
        croak "ggstrn.c is missing"
    fi
    if [ ! -f "ggstrn.h" ]; then
        croak "ggstrn.h is missing"
    fi
    if [ ! -f "ggsymb.c" ]; then
        croak "ggsymb.c is missing"
    fi
    if [ ! -f "ggsymb.h" ]; then
        croak "ggsymb.h is missing"
    fi
    if [ ! -f "ggthrd.c" ]; then
        croak "ggthrd.c is missing"
    fi
    if [ ! -f "ggthrd.h" ]; then
        croak "ggthrd.h is missing"
    fi
    if [ ! -f "ggthrd.l" ]; then
        croak "ggthrd.l is missing"
    fi
    if [ ! -f "ggthrd.i" ]; then
        croak "ggthrd.i is missing"
    fi
    if [ ! -f "ggthrd.d" ]; then
        croak "ggthrd.d is missing"
    fi
    if [ ! -f "ggtime.c" ]; then
        croak "ggtime.c is missing"
    fi
    if [ ! -f "ggtime.h" ]; then
        croak "ggtime.h is missing"
    fi
    if [ ! -f "ggxml.c" ]; then
        croak "ggxml.c is missing"
    fi
    if [ ! -f "ggxml.h" ]; then
        croak "ggxml.h is missing"
    fi
    if [ ! -f "gsl.h" ]; then
        croak "gsl.h is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
    if [ ! -f "gsl.vcproj" ]; then
        croak "gsl.vcproj is missing"
    fi
    if [ ! -f "libgsl.vcproj" ]; then
        croak "libgsl.vcproj is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing GSL into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/doc/GSL/
    [ "$BOOM_TRACE" ] && echo "cp release.txt $_INSTALL_ROOT/doc/GSL/"
    cp release.txt $_INSTALL_ROOT/doc/GSL/ || croak "\"cp release.txt $_INSTALL_ROOT/doc/GSL/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/GSL/release.txt"
    chmod 0644 $_INSTALL_ROOT/doc/GSL/release.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/GSL/release.txt\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp ggobjt.gsl $_INSTALL_ROOT/bin/"
    cp ggobjt.gsl $_INSTALL_ROOT/bin/ || croak "\"cp ggobjt.gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/ggobjt.gsl"
    chmod 0644 $_INSTALL_ROOT/bin/ggobjt.gsl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/ggobjt.gsl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gsl $_INSTALL_ROOT/bin/"
    cp gsl $_INSTALL_ROOT/bin/ || croak "\"cp gsl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/gsl"
    chmod 0755 $_INSTALL_ROOT/bin/gsl || croak "\"chmod 0755 $_INSTALL_ROOT/bin/gsl\" failed"
    mkdir -p $_INSTALL_ROOT/lib/
    [ "$BOOM_TRACE" ] && echo "cp libgsl.a $_INSTALL_ROOT/lib/"
    cp libgsl.a $_INSTALL_ROOT/lib/ || croak "\"cp libgsl.a $_INSTALL_ROOT/lib/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/lib/libgsl.a"
    chmod 0644 $_INSTALL_ROOT/lib/libgsl.a || croak "\"chmod 0644 $_INSTALL_ROOT/lib/libgsl.a\" failed"
    mkdir -p $_INSTALL_ROOT/doc/GSL/
    [ "$BOOM_TRACE" ] && echo "cp gsldoc.txt $_INSTALL_ROOT/doc/GSL/"
    cp gsldoc.txt $_INSTALL_ROOT/doc/GSL/ || croak "\"cp gsldoc.txt $_INSTALL_ROOT/doc/GSL/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/GSL/gsldoc.txt"
    chmod 0644 $_INSTALL_ROOT/doc/GSL/gsldoc.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/GSL/gsldoc.txt\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    mkdir -p $_INSTALL_ROOT/doc/GSL/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/GSL/"
    cp readme.txt $_INSTALL_ROOT/doc/GSL/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/GSL/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/GSL/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/GSL/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/GSL/readme.txt\" failed"
    mkdir -p $_INSTALL_ROOT/include/
    [ "$BOOM_TRACE" ] && echo "cp ggcodem.h $_INSTALL_ROOT/include/"
    cp ggcodem.h $_INSTALL_ROOT/include/ || croak "\"cp ggcodem.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggcodem.h"
    chmod 0644 $_INSTALL_ROOT/include/ggcodem.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggcodem.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggparsm.h $_INSTALL_ROOT/include/"
    cp ggparsm.h $_INSTALL_ROOT/include/ || croak "\"cp ggparsm.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggparsm.h"
    chmod 0644 $_INSTALL_ROOT/include/ggparsm.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggparsm.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggconv.h $_INSTALL_ROOT/include/"
    cp ggconv.h $_INSTALL_ROOT/include/ || croak "\"cp ggconv.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggconv.h"
    chmod 0644 $_INSTALL_ROOT/include/ggconv.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggconv.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggdiag.h $_INSTALL_ROOT/include/"
    cp ggdiag.h $_INSTALL_ROOT/include/ || croak "\"cp ggdiag.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggdiag.h"
    chmod 0644 $_INSTALL_ROOT/include/ggdiag.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggdiag.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggenvt.h $_INSTALL_ROOT/include/"
    cp ggenvt.h $_INSTALL_ROOT/include/ || croak "\"cp ggenvt.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggenvt.h"
    chmod 0644 $_INSTALL_ROOT/include/ggenvt.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggenvt.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggfile.h $_INSTALL_ROOT/include/"
    cp ggfile.h $_INSTALL_ROOT/include/ || croak "\"cp ggfile.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggfile.h"
    chmod 0644 $_INSTALL_ROOT/include/ggfile.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggfile.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gggsl.h $_INSTALL_ROOT/include/"
    cp gggsl.h $_INSTALL_ROOT/include/ || croak "\"cp gggsl.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/gggsl.h"
    chmod 0644 $_INSTALL_ROOT/include/gggsl.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/gggsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggmath.h $_INSTALL_ROOT/include/"
    cp ggmath.h $_INSTALL_ROOT/include/ || croak "\"cp ggmath.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggmath.h"
    chmod 0644 $_INSTALL_ROOT/include/ggmath.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggmath.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggpcre.h $_INSTALL_ROOT/include/"
    cp ggpcre.h $_INSTALL_ROOT/include/ || croak "\"cp ggpcre.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggpcre.h"
    chmod 0644 $_INSTALL_ROOT/include/ggpcre.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggpcre.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggproc.h $_INSTALL_ROOT/include/"
    cp ggproc.h $_INSTALL_ROOT/include/ || croak "\"cp ggproc.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggproc.h"
    chmod 0644 $_INSTALL_ROOT/include/ggproc.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggproc.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggscrp.h $_INSTALL_ROOT/include/"
    cp ggscrp.h $_INSTALL_ROOT/include/ || croak "\"cp ggscrp.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggscrp.h"
    chmod 0644 $_INSTALL_ROOT/include/ggscrp.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggscrp.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggsock.h $_INSTALL_ROOT/include/"
    cp ggsock.h $_INSTALL_ROOT/include/ || croak "\"cp ggsock.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggsock.h"
    chmod 0644 $_INSTALL_ROOT/include/ggsock.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggsock.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggstrn.h $_INSTALL_ROOT/include/"
    cp ggstrn.h $_INSTALL_ROOT/include/ || croak "\"cp ggstrn.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggstrn.h"
    chmod 0644 $_INSTALL_ROOT/include/ggstrn.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggstrn.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggsymb.h $_INSTALL_ROOT/include/"
    cp ggsymb.h $_INSTALL_ROOT/include/ || croak "\"cp ggsymb.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggsymb.h"
    chmod 0644 $_INSTALL_ROOT/include/ggsymb.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggsymb.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggthrd.h $_INSTALL_ROOT/include/"
    cp ggthrd.h $_INSTALL_ROOT/include/ || croak "\"cp ggthrd.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggthrd.h"
    chmod 0644 $_INSTALL_ROOT/include/ggthrd.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggthrd.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggtime.h $_INSTALL_ROOT/include/"
    cp ggtime.h $_INSTALL_ROOT/include/ || croak "\"cp ggtime.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggtime.h"
    chmod 0644 $_INSTALL_ROOT/include/ggtime.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggtime.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp ggxml.h $_INSTALL_ROOT/include/"
    cp ggxml.h $_INSTALL_ROOT/include/ || croak "\"cp ggxml.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/ggxml.h"
    chmod 0644 $_INSTALL_ROOT/include/ggxml.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/ggxml.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp gsl.h $_INSTALL_ROOT/include/"
    cp gsl.h $_INSTALL_ROOT/include/ || croak "\"cp gsl.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/gsl.h"
    chmod 0644 $_INSTALL_ROOT/include/gsl.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/gsl.h\" failed"
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "lr -quiet gsl.l"
    lr -quiet gsl.l || croak "\"lr -quiet gsl.l\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 ggcode.xml"
    gsl -q -quiet:1 ggcode.xml || croak "\"gsl -q -quiet:1 ggcode.xml\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 ggpars.xml"
    gsl -q -quiet:1 ggpars.xml || croak "\"gsl -q -quiet:1 ggpars.xml\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggconv.gxl"
    gsl -q ggconv.gxl || croak "\"gsl -q ggconv.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggdiag.gxl"
    gsl -q ggdiag.gxl || croak "\"gsl -q ggdiag.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggenvt.gxl"
    gsl -q ggenvt.gxl || croak "\"gsl -q ggenvt.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggfile.gxl"
    gsl -q ggfile.gxl || croak "\"gsl -q ggfile.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q gggsl.gxl"
    gsl -q gggsl.gxl || croak "\"gsl -q gggsl.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggmath.gxl"
    gsl -q ggmath.gxl || croak "\"gsl -q ggmath.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggpcre.gxl"
    gsl -q ggpcre.gxl || croak "\"gsl -q ggpcre.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggproc.gxl"
    gsl -q ggproc.gxl || croak "\"gsl -q ggproc.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggscrp.gxl"
    gsl -q ggscrp.gxl || croak "\"gsl -q ggscrp.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggsock.gxl"
    gsl -q ggsock.gxl || croak "\"gsl -q ggsock.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggstrn.gxl"
    gsl -q ggstrn.gxl || croak "\"gsl -q ggstrn.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggsymb.gxl"
    gsl -q ggsymb.gxl || croak "\"gsl -q ggsymb.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggthrd.gxl"
    gsl -q ggthrd.gxl || croak "\"gsl -q ggthrd.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggtime.gxl"
    gsl -q ggtime.gxl || croak "\"gsl -q ggtime.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggxml.gxl"
    gsl -q ggxml.gxl || croak "\"gsl -q ggxml.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggcode.l"
    lr -quiet ggcode.l || croak "\"lr -quiet ggcode.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggpars.l"
    lr -quiet ggpars.l || croak "\"lr -quiet ggpars.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet gggsl.l"
    lr -quiet gggsl.l || croak "\"lr -quiet gggsl.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggscrp.l"
    lr -quiet ggscrp.l || croak "\"lr -quiet ggscrp.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggsock.l"
    lr -quiet ggsock.l || croak "\"lr -quiet ggsock.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggthrd.l"
    lr -quiet ggthrd.l || croak "\"lr -quiet ggthrd.l\" failed"
    rm -f gsl.h
    [ "$BOOM_TRACE" ] && echo "cat gghead.h>>gsl.h"
    cat gghead.h>>gsl.h || croak "\"cat gghead.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcomm.h>>gsl.h"
    cat ggcomm.h>>gsl.h || croak "\"cat ggcomm.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggpars.h>>gsl.h"
    cat ggpars.h>>gsl.h || croak "\"cat ggpars.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggparsm.h>>gsl.h"
    cat ggparsm.h>>gsl.h || croak "\"cat ggparsm.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggscrp.h>>gsl.h"
    cat ggscrp.h>>gsl.h || croak "\"cat ggscrp.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggscop.h>>gsl.h"
    cat ggscop.h>>gsl.h || croak "\"cat ggscop.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggobjt.h>>gsl.h"
    cat ggobjt.h>>gsl.h || croak "\"cat ggobjt.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggsymb.h>>gsl.h"
    cat ggsymb.h>>gsl.h || croak "\"cat ggsymb.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat gggsl.h>>gsl.h"
    cat gggsl.h>>gsl.h || croak "\"cat gggsl.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcode.h>>gsl.h"
    cat ggcode.h>>gsl.h || croak "\"cat ggcode.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcodem.h>>gsl.h"
    cat ggcodem.h>>gsl.h || croak "\"cat ggcodem.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggfile.h>>gsl.h"
    cat ggfile.h>>gsl.h || croak "\"cat ggfile.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggstrn.h>>gsl.h"
    cat ggstrn.h>>gsl.h || croak "\"cat ggstrn.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggenvt.h>>gsl.h"
    cat ggenvt.h>>gsl.h || croak "\"cat ggenvt.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggconv.h>>gsl.h"
    cat ggconv.h>>gsl.h || croak "\"cat ggconv.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggmath.h>>gsl.h"
    cat ggmath.h>>gsl.h || croak "\"cat ggmath.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggsock.h>>gsl.h"
    cat ggsock.h>>gsl.h || croak "\"cat ggsock.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggthrd.h>>gsl.h"
    cat ggthrd.h>>gsl.h || croak "\"cat ggthrd.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggxml.h>>gsl.h"
    cat ggxml.h>>gsl.h || croak "\"cat ggxml.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggtime.h>>gsl.h"
    cat ggtime.h>>gsl.h || croak "\"cat ggtime.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggpcre.h>>gsl.h"
    cat ggpcre.h>>gsl.h || croak "\"cat ggpcre.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggdiag.h>>gsl.h"
    cat ggdiag.h>>gsl.h || croak "\"cat ggdiag.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggproc.h>>gsl.h"
    cat ggproc.h>>gsl.h || croak "\"cat ggproc.h>>gsl.h\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "lr -quiet gsl.l"
    lr -quiet gsl.l || croak "\"lr -quiet gsl.l\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 ggcode.xml"
    gsl -q -quiet:1 ggcode.xml || croak "\"gsl -q -quiet:1 ggcode.xml\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 ggpars.xml"
    gsl -q -quiet:1 ggpars.xml || croak "\"gsl -q -quiet:1 ggpars.xml\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggconv.gxl"
    gsl -q ggconv.gxl || croak "\"gsl -q ggconv.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggdiag.gxl"
    gsl -q ggdiag.gxl || croak "\"gsl -q ggdiag.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggenvt.gxl"
    gsl -q ggenvt.gxl || croak "\"gsl -q ggenvt.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggfile.gxl"
    gsl -q ggfile.gxl || croak "\"gsl -q ggfile.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q gggsl.gxl"
    gsl -q gggsl.gxl || croak "\"gsl -q gggsl.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggmath.gxl"
    gsl -q ggmath.gxl || croak "\"gsl -q ggmath.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggpcre.gxl"
    gsl -q ggpcre.gxl || croak "\"gsl -q ggpcre.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggproc.gxl"
    gsl -q ggproc.gxl || croak "\"gsl -q ggproc.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggscrp.gxl"
    gsl -q ggscrp.gxl || croak "\"gsl -q ggscrp.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggsock.gxl"
    gsl -q ggsock.gxl || croak "\"gsl -q ggsock.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggstrn.gxl"
    gsl -q ggstrn.gxl || croak "\"gsl -q ggstrn.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggsymb.gxl"
    gsl -q ggsymb.gxl || croak "\"gsl -q ggsymb.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggthrd.gxl"
    gsl -q ggthrd.gxl || croak "\"gsl -q ggthrd.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggtime.gxl"
    gsl -q ggtime.gxl || croak "\"gsl -q ggtime.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q ggxml.gxl"
    gsl -q ggxml.gxl || croak "\"gsl -q ggxml.gxl\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggcode.l"
    lr -quiet ggcode.l || croak "\"lr -quiet ggcode.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggpars.l"
    lr -quiet ggpars.l || croak "\"lr -quiet ggpars.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet gggsl.l"
    lr -quiet gggsl.l || croak "\"lr -quiet gggsl.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggscrp.l"
    lr -quiet ggscrp.l || croak "\"lr -quiet ggscrp.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggsock.l"
    lr -quiet ggsock.l || croak "\"lr -quiet ggsock.l\" failed"
    [ "$BOOM_TRACE" ] && echo "lr -quiet ggthrd.l"
    lr -quiet ggthrd.l || croak "\"lr -quiet ggthrd.l\" failed"
    rm -f gsl.h
    [ "$BOOM_TRACE" ] && echo "cat gghead.h>>gsl.h"
    cat gghead.h>>gsl.h || croak "\"cat gghead.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcomm.h>>gsl.h"
    cat ggcomm.h>>gsl.h || croak "\"cat ggcomm.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggpars.h>>gsl.h"
    cat ggpars.h>>gsl.h || croak "\"cat ggpars.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggparsm.h>>gsl.h"
    cat ggparsm.h>>gsl.h || croak "\"cat ggparsm.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggscrp.h>>gsl.h"
    cat ggscrp.h>>gsl.h || croak "\"cat ggscrp.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggscop.h>>gsl.h"
    cat ggscop.h>>gsl.h || croak "\"cat ggscop.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggobjt.h>>gsl.h"
    cat ggobjt.h>>gsl.h || croak "\"cat ggobjt.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggsymb.h>>gsl.h"
    cat ggsymb.h>>gsl.h || croak "\"cat ggsymb.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat gggsl.h>>gsl.h"
    cat gggsl.h>>gsl.h || croak "\"cat gggsl.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcode.h>>gsl.h"
    cat ggcode.h>>gsl.h || croak "\"cat ggcode.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggcodem.h>>gsl.h"
    cat ggcodem.h>>gsl.h || croak "\"cat ggcodem.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggfile.h>>gsl.h"
    cat ggfile.h>>gsl.h || croak "\"cat ggfile.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggstrn.h>>gsl.h"
    cat ggstrn.h>>gsl.h || croak "\"cat ggstrn.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggenvt.h>>gsl.h"
    cat ggenvt.h>>gsl.h || croak "\"cat ggenvt.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggconv.h>>gsl.h"
    cat ggconv.h>>gsl.h || croak "\"cat ggconv.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggmath.h>>gsl.h"
    cat ggmath.h>>gsl.h || croak "\"cat ggmath.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggsock.h>>gsl.h"
    cat ggsock.h>>gsl.h || croak "\"cat ggsock.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggthrd.h>>gsl.h"
    cat ggthrd.h>>gsl.h || croak "\"cat ggthrd.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggxml.h>>gsl.h"
    cat ggxml.h>>gsl.h || croak "\"cat ggxml.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggtime.h>>gsl.h"
    cat ggtime.h>>gsl.h || croak "\"cat ggtime.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggpcre.h>>gsl.h"
    cat ggpcre.h>>gsl.h || croak "\"cat ggpcre.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggdiag.h>>gsl.h"
    cat ggdiag.h>>gsl.h || croak "\"cat ggdiag.h>>gsl.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat ggproc.h>>gsl.h"
    cat ggproc.h>>gsl.h || croak "\"cat ggproc.h>>gsl.h\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED BINARIES   -----------------------

a_remove_generated_binaries() {
:
    rm -f gsl
    rm -f libgsl.a
    rm -f gsl.o
    rm -f gsl
    rm -f testpars.o
    rm -f testpars
    rm -f ggcode.o
    rm -f ggcodemm.o
    rm -f ggpars.o
    rm -f ggparsmm.o
    rm -f ggobjt.o
    rm -f ggcomm.o
    rm -f ggscop.o
    rm -f ggconv.o
    rm -f ggdiag.o
    rm -f ggenvt.o
    rm -f ggfile.o
    rm -f gggsl.o
    rm -f ggmath.o
    rm -f ggpcre.o
    rm -f ggproc.o
    rm -f ggscrp.o
    rm -f ggsock.o
    rm -f ggstrn.o
    rm -f ggsymb.o
    rm -f ggthrd.o
    rm -f ggtime.o
    rm -f ggxml.o
    rm -f ggcode.o
    rm -f ggcodem.o
    rm -f ggpars.o
    rm -f ggparsm.o
    rm -f ggconv.o
    rm -f ggdiag.o
    rm -f ggenvt.o
    rm -f ggfile.o
    rm -f gggsl.o
    rm -f ggmath.o
    rm -f ggpcre.o
    rm -f ggproc.o
    rm -f ggscrp.o
    rm -f ggsock.o
    rm -f ggstrn.o
    rm -f ggsymb.o
    rm -f ggthrd.o
    rm -f ggtime.o
    rm -f ggxml.o
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f gsl.i
    rm -f gsl.d
    rm -f ggcode.i
    rm -f ggcode.d
    rm -f ggcodem.c
    rm -f ggcodem.h
    rm -f ggpars.i
    rm -f ggpars.d
    rm -f ggparsm.c
    rm -f ggparsm.h
    rm -f ggconv.c
    rm -f ggconv.h
    rm -f ggdiag.c
    rm -f ggdiag.h
    rm -f ggenvt.c
    rm -f ggenvt.h
    rm -f ggfile.c
    rm -f ggfile.h
    rm -f gggsl.c
    rm -f gggsl.h
    rm -f gggsl.l
    rm -f gggsl.i
    rm -f gggsl.d
    rm -f ggmath.c
    rm -f ggmath.h
    rm -f ggpcre.c
    rm -f ggpcre.h
    rm -f ggproc.c
    rm -f ggproc.h
    rm -f ggscrp.c
    rm -f ggscrp.h
    rm -f ggscrp.l
    rm -f ggscrp.i
    rm -f ggscrp.d
    rm -f ggsock.c
    rm -f ggsock.h
    rm -f ggsock.l
    rm -f ggsock.i
    rm -f ggsock.d
    rm -f ggstrn.c
    rm -f ggstrn.h
    rm -f ggsymb.c
    rm -f ggsymb.h
    rm -f ggthrd.c
    rm -f ggthrd.h
    rm -f ggthrd.l
    rm -f ggthrd.i
    rm -f ggthrd.d
    rm -f ggtime.c
    rm -f ggtime.h
    rm -f ggxml.c
    rm -f ggxml.h
    rm -f gsl.h
    rm -f stamp_generate
    rm -f configure
    rm -f Makefile.unix
    rm -f configure.bat
    rm -f Makefile.win32
    rm -f gsl.vcproj
    rm -f libgsl.vcproj
    rm -f gsl_*.zip
    rm -f gsl_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "gsl-4.0c19"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files, and"
    echo "    compiles all source files."
echo "compile:"
    echo "  From the raw project sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the raw project sources, removes all generated"
    echo "    source and binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project.  Note that binary"
    echo "    distributions can only be created at the product level."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  From the packaged sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  From the stripped-down packaged sources, compiles all source files"
    echo "    without any code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
    echo "    This action is only valid after a successful build."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

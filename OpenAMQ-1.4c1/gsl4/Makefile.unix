#
#   Makefile for GSL
#
#   Generated by iMatix Boom
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Default values for object, library, and executable extensions.
#
OBJ = .o
LIB = .a
EXE =
CC  = c -q

#   Reset the suffixes that will be considered to just our own list.
#
#   Make programs use the .SUFFIXES psuedo rule for this

.SUFFIXES:
.SUFFIXES: $(EXE) $(LIB) $(OBJ) .c .d .i .l

#   Objects depend on source files with the same name; and are compiled
#   with the iMatix c script without any arguments.
#
.c$(OBJ):
	$(CC) $<
#   And .c files _do_not_ depend on .l files (.l files are Libero files,
#   not lex input files as the default rules think).
#
#   The semicolon forces make to accept the rule as an override.
#
.l.c: ;

#
#   Default rule -- all depends on everything.
#   We do this so that we can define the rule at the end.
#
all: everything
#
#   The following targets are not files. Mark them as such.
#
.PHONY: all generate everything install regen clean
#
#   Dependencies
#
libgsl$(LIB): ggobjt$(OBJ) ggcomm$(OBJ) ggscop$(OBJ) ggcode$(OBJ) ggcodem$(OBJ) ggpars$(OBJ) ggparsm$(OBJ) ggconv$(OBJ) ggdiag$(OBJ) ggenvt$(OBJ) ggfile$(OBJ) gggsl$(OBJ) ggmath$(OBJ) ggpcre$(OBJ) ggproc$(OBJ) ggscrp$(OBJ) ggsock$(OBJ) ggstrn$(OBJ) ggsymb$(OBJ) ggthrd$(OBJ) ggtime$(OBJ) ggxml$(OBJ) 
	$(CC) -r libgsl$(LIB) ggobjt$(OBJ) ggcomm$(OBJ) ggscop$(OBJ) ggcode$(OBJ) ggcodem$(OBJ) ggpars$(OBJ) ggparsm$(OBJ) ggconv$(OBJ) ggdiag$(OBJ) ggenvt$(OBJ) ggfile$(OBJ) gggsl$(OBJ) ggmath$(OBJ) ggpcre$(OBJ) ggproc$(OBJ) ggscrp$(OBJ) ggsock$(OBJ) ggstrn$(OBJ) ggsymb$(OBJ) ggthrd$(OBJ) ggtime$(OBJ) ggxml$(OBJ) 
gsl$(OBJ): gsl.c ggpriv.h ggcomm.h ggpars.h ggparsm.h ggscrp.h ggsymb.h gggsl.h ggscop.h ggcode.h ggcodem.h ggobjt.h ggxml.h ggfile.h ggstrn.h ggenvt.h ggconv.h ggmath.h ggsock.h ggthrd.h ggtime.h ggpcre.h ggdiag.h ggproc.h version.h gsl.d gsl.i
gsl$(EXE): gsl$(OBJ) libgsl$(LIB) 
	$(CC) -L gsl
testpars$(OBJ): testpars.c
testpars$(EXE): testpars$(OBJ) libgsl$(LIB) 
	$(CC) -L testpars
ggobjt$(OBJ): ggobjt.c
ggcomm$(OBJ): ggcomm.c
ggscop$(OBJ): ggscop.c
gsl.i: gsl.l
	lr -quiet gsl.l
gsl.d: gsl.l
	lr -quiet gsl.l
ggcode.i: ggcode.l
	lr -quiet ggcode.l
ggcode.d: ggcode.l
	lr -quiet ggcode.l
ggcode$(OBJ): ggcode.c ggcode.d ggfunc.inc ggcode.i
ggcodem$(OBJ): ggcodem.c
ggcodem.c: ggcode.xml
	gsl -q -quiet:1 ggcode.xml
ggpars.i: ggpars.l
	lr -quiet ggpars.l
ggpars.d: ggpars.l
	lr -quiet ggpars.l
ggpars$(OBJ): ggpars.c ggpars.d ggpars.i
ggparsm$(OBJ): ggparsm.c
ggparsm.c: ggpars.xml
	gsl -q -quiet:1 ggpars.xml
ggconv$(OBJ): ggconv.c gsl.h
ggconv.c: ggconv.gxl
	gsl -q ggconv.gxl
ggdiag$(OBJ): ggdiag.c
ggdiag.c: ggdiag.gxl
	gsl -q ggdiag.gxl
ggenvt$(OBJ): ggenvt.c
ggenvt.c: ggenvt.gxl
	gsl -q ggenvt.gxl
ggfile$(OBJ): ggfile.c
ggfile.c: ggfile.gxl
	gsl -q ggfile.gxl
gggsl$(OBJ): gggsl.c gggsl.d gggsl.i
gggsl.c: gggsl.gxl
	gsl -q gggsl.gxl
gggsl.l: gggsl.gxl
	gsl -q gggsl.gxl
gggsl.i: gggsl.l
	lr -quiet gggsl.l
gggsl.d: gggsl.l
	lr -quiet gggsl.l
ggmath$(OBJ): ggmath.c
ggmath.c: ggmath.gxl
	gsl -q ggmath.gxl
ggpcre$(OBJ): ggpcre.c
ggpcre.c: ggpcre.gxl
	gsl -q ggpcre.gxl
ggproc$(OBJ): ggproc.c
ggproc.c: ggproc.gxl
	gsl -q ggproc.gxl
ggscrp$(OBJ): ggscrp.c ggscrp.d ggscrp.i
ggscrp.c: ggscrp.gxl
	gsl -q ggscrp.gxl
ggscrp.l: ggscrp.gxl
	gsl -q ggscrp.gxl
ggscrp.i: ggscrp.l
	lr -quiet ggscrp.l
ggscrp.d: ggscrp.l
	lr -quiet ggscrp.l
ggsock$(OBJ): ggsock.c ggsock.d ggsock.i
ggsock.c: ggsock.gxl
	gsl -q ggsock.gxl
ggsock.l: ggsock.gxl
	gsl -q ggsock.gxl
ggsock.i: ggsock.l
	lr -quiet ggsock.l
ggsock.d: ggsock.l
	lr -quiet ggsock.l
ggstrn$(OBJ): ggstrn.c
ggstrn.c: ggstrn.gxl
	gsl -q ggstrn.gxl
ggsymb$(OBJ): ggsymb.c
ggsymb.c: ggsymb.gxl
	gsl -q ggsymb.gxl
ggthrd$(OBJ): ggthrd.c ggthrd.d ggthrd.i
ggthrd.c: ggthrd.gxl
	gsl -q ggthrd.gxl
ggthrd.l: ggthrd.gxl
	gsl -q ggthrd.gxl
ggthrd.i: ggthrd.l
	lr -quiet ggthrd.l
ggthrd.d: ggthrd.l
	lr -quiet ggthrd.l
ggtime$(OBJ): ggtime.c
ggtime.c: ggtime.gxl
	gsl -q ggtime.gxl
ggxml$(OBJ): ggxml.c
ggxml.c: ggxml.gxl
	gsl -q ggxml.gxl

everything: generate libgsl$(LIB) gsl$(EXE) testpars$(EXE) 
install:
	sh boomake install
generate: stamp_generate
stamp_generate:
	sh boomake regen
regen:
	sh boomake regen
clean:
	sh boomake clean


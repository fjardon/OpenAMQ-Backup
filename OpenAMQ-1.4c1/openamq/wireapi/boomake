#!/bin/sh
#
#   Boom builder for OpenAMQ WireAPI 1.4c1
#   Generated by iMatix Boom from standard.pwl
#   
#   Copyright (c) 1996-2009 iMatix Corporation
#   All rights reserved.
#   
#   This file is licensed under the BSD license as follows:
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of iMatix Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY IMATIX CORPORATION "AS IS" AND ANY
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL IMATIX CORPORATION BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#   Force environment variables to point to install location
#   Start by using final IBASE, then handle local -install path
#
boom_model_list () {
    set |
        awk 'BEGIN                      { FS="[=_]" }
             /^BOOM_MODEL_[A-Z0-9]*=1$/ { print $3  }'
}
boom_model_expand () {
    for MODEL in `boom_model_list`; do
        eval unset BOOM_MODEL_$MODEL
    done
    OLD_IFS=$IFS
    IFS=,
    for MODEL in $BOOM_MODEL; do
        MODEL=`echo $MODEL | tr \[a-z\] \[A-Z\]`
        eval BOOM_MODEL_$MODEL=1
        eval export BOOM_MODEL_$MODEL
    done
    IFS=$OLD_IFS
}
croak() {
    if [ -n "$*" ]; then
        echo "boom E: [OpenAMQ_WireAPI]: $* - stop" 1>&2
    else
        echo "boom E: [OpenAMQ_WireAPI]: stop" 1>&2
    fi
    exit 1
}
carp() {
    echo "boom I: [OpenAMQ_WireAPI]: $*" 1>&2
}
trap 'croak "Interrupted"' INT
trap 'croak "Terminated"' TERM
trap 'croak "Quit"' QUIT
self=$0
MY_VERSION="1.4c1"
#
#   Set default values for BOOM_MODEL
#
#   Default is release,mt on all platforms.
#
if [ -z "$BOOM_MODEL" ]; then
    BOOM_MODEL=release,mt
fi
boom_model_expand
if [ "$BOOM_MODEL_RELEASE" != "1" ]; then
    if [ "$BOOM_MODEL_DEBUG" != "1" ]; then
        BOOM_MODEL_RELEASE=1
        BOOM_MODEL="$BOOM_MODEL,release"
    fi
fi
if [ "$BOOM_MODEL_ST" != "1" ]; then
    if [ "$BOOM_MODEL_MT" != "1" ]; then
            BOOM_MODEL="$BOOM_MODEL,mt"
    fi
fi
if [ -z "$IBASE" ]; then
    carp "The IBASE variable is not set.  Please set it to the location where OpenAMQ WireAPI should be installed."
    exit 1
fi
if [ "$1" = "-v" ]; then
    BOOM_TRACE=1
    export BOOM_TRACE
    shift
fi
if [ "$1" != "-install" ]; then
    #   Normal use, use IBASE
    PATH=.:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$IBASE/include; export INCDIR_ALT
    _LOCAL_BASE=
    _INSTALL_ROOT=$IBASE
else
    #   Building product, we use -install directory first, then IBASE
    CURDIR=`pwd`
    cd $2
    _LOCAL_BASE=`pwd`
    cd $CURDIR
    PATH=.:$_LOCAL_BASE/bin:$IBASE/bin:$PATH; export PATH
    PERLLIB=.:$_LOCAL_BASE/bin:$IBASE/bin:$PERLLIB; export PERLLIB
    INCDIR_ALT=$_LOCAL_BASE/include:$IBASE/include; export INCDIR_ALT
    shift
    shift
    _INSTALL_ROOT=$_LOCAL_BASE
fi

# --------------------------   BUILD BINARY FILES   ---------------------------

a_build_binary_files() {
:
    carp "Building OpenAMQ WireAPI..."
    #   To prevent compatibility warnings...
    INCDIR=
    LIBDIR=
    export LIBDIR INCDIR
    if [ "$BOOM_TRACE" ]; then
        MY_COPTS=-v
    else
        MY_COPTS=-q
    fi
    if [ ! -z "$_LOCAL_BASE" ]; then
        MY_COPTS="$MY_COPTS -li $_LOCAL_BASE/include -ll $_LOCAL_BASE/lib"
    fi
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client"
    c $MY_COPTS amq_client || croak "\"c $MY_COPTS amq_client\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_method_test"
    c $MY_COPTS amq_client_method_test || croak "\"c $MY_COPTS amq_client_method_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_method"
    c $MY_COPTS amq_client_method || croak "\"c $MY_COPTS amq_client_method\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_agent"
    c $MY_COPTS amq_client_agent || croak "\"c $MY_COPTS amq_client_agent\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_config_test"
    c $MY_COPTS amq_client_config_test || croak "\"c $MY_COPTS amq_client_config_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_config"
    c $MY_COPTS amq_client_config || croak "\"c $MY_COPTS amq_client_config\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_classes"
    c $MY_COPTS amq_client_classes || croak "\"c $MY_COPTS amq_client_classes\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_connection_test"
    c $MY_COPTS amq_client_connection_test || croak "\"c $MY_COPTS amq_client_connection_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_connection"
    c $MY_COPTS amq_client_connection || croak "\"c $MY_COPTS amq_client_connection\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_session_test"
    c $MY_COPTS amq_client_session_test || croak "\"c $MY_COPTS amq_client_session_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_session"
    c $MY_COPTS amq_client_session || croak "\"c $MY_COPTS amq_client_session\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_channel_test"
    c $MY_COPTS amq_client_channel_test || croak "\"c $MY_COPTS amq_client_channel_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_channel"
    c $MY_COPTS amq_client_channel || croak "\"c $MY_COPTS amq_client_channel\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_channel_table_test"
    c $MY_COPTS amq_client_channel_table_test || croak "\"c $MY_COPTS amq_client_channel_table_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS amq_client_channel_table"
    c $MY_COPTS amq_client_channel_table || croak "\"c $MY_COPTS amq_client_channel_table\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_method"
    c $MY_COPTS -r libamq_wireapi amq_client_method || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_method\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_agent"
    c $MY_COPTS -r libamq_wireapi amq_client_agent || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_agent\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_config"
    c $MY_COPTS -r libamq_wireapi amq_client_config || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_config\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_classes"
    c $MY_COPTS -r libamq_wireapi amq_client_classes || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_classes\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_connection"
    c $MY_COPTS -r libamq_wireapi amq_client_connection || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_connection\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_session"
    c $MY_COPTS -r libamq_wireapi amq_client_session || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_session\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_channel"
    c $MY_COPTS -r libamq_wireapi amq_client_channel || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_channel\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -r libamq_wireapi amq_client_channel_table"
    c $MY_COPTS -r libamq_wireapi amq_client_channel_table || croak "\"c $MY_COPTS -r libamq_wireapi amq_client_channel_table\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client"
    c $MY_COPTS -L amq_client || croak "\"c $MY_COPTS -L amq_client\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_method_test"
    c $MY_COPTS -L amq_client_method_test || croak "\"c $MY_COPTS -L amq_client_method_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_config_test"
    c $MY_COPTS -L amq_client_config_test || croak "\"c $MY_COPTS -L amq_client_config_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_connection_test"
    c $MY_COPTS -L amq_client_connection_test || croak "\"c $MY_COPTS -L amq_client_connection_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_session_test"
    c $MY_COPTS -L amq_client_session_test || croak "\"c $MY_COPTS -L amq_client_session_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_channel_test"
    c $MY_COPTS -L amq_client_channel_test || croak "\"c $MY_COPTS -L amq_client_channel_test\" failed"
    [ "$BOOM_TRACE" ] && echo "c $MY_COPTS -L amq_client_channel_table_test"
    c $MY_COPTS -L amq_client_channel_table_test || croak "\"c $MY_COPTS -L amq_client_channel_table_test\" failed"
}

# -------------------------   BUILD SOURCE PACKAGES   -------------------------

a_build_source_packages() {
:
    rm -f _package.lst
    if [ -f "wireapi/version.h" ]; then
        echo wireapi/version.h>>_package.lst
    fi
    if [ -f "wireapi/wireapi.h" ]; then
        echo wireapi/wireapi.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client.c" ]; then
        echo wireapi/amq_client.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client.asl" ]; then
        echo wireapi/amq_client.asl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_method.icl" ]; then
        echo wireapi/amq_client_method.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_agent.smt" ]; then
        echo wireapi/amq_client_agent.smt>>_package.lst
    fi
    if [ -f "wireapi/amq_client_config.opf" ]; then
        echo wireapi/amq_client_config.opf>>_package.lst
    fi
    if [ -f "wireapi/amq_client_config.icl" ]; then
        echo wireapi/amq_client_config.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_classes.icl" ]; then
        echo wireapi/amq_client_classes.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_connection.icl" ]; then
        echo wireapi/amq_client_connection.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_session.icl" ]; then
        echo wireapi/amq_client_session.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel.icl" ]; then
        echo wireapi/amq_client_channel.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel_table.icl" ]; then
        echo wireapi/amq_client_channel_table.icl>>_package.lst
    fi
    if [ -f "wireapi/amq_client_chrono.pal" ]; then
        echo wireapi/amq_client_chrono.pal>>_package.lst
    fi
    if [ -f "wireapi/prelude.pdl" ]; then
        echo wireapi/prelude.pdl>>_package.lst
    fi
    if [ -f "wireapi/license.gpl" ]; then
        echo wireapi/license.gpl>>_package.lst
    fi
    if [ -f "wireapi/project.pdl" ]; then
        echo wireapi/project.pdl>>_package.lst
    fi
    if [ -f "wireapi/readme.txt" ]; then
        echo wireapi/readme.txt>>_package.lst
    fi
    if [ -f "wireapi/amq_client_method_test.c" ]; then
        echo wireapi/amq_client_method_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_method.h" ]; then
        echo wireapi/amq_client_method.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_method.c" ]; then
        echo wireapi/amq_client_method.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_agent.h" ]; then
        echo wireapi/amq_client_agent.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_agent.c" ]; then
        echo wireapi/amq_client_agent.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_config_test.c" ]; then
        echo wireapi/amq_client_config_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_config.h" ]; then
        echo wireapi/amq_client_config.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_config.c" ]; then
        echo wireapi/amq_client_config.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_classes.h" ]; then
        echo wireapi/amq_client_classes.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_classes.c" ]; then
        echo wireapi/amq_client_classes.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_connection_test.c" ]; then
        echo wireapi/amq_client_connection_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_connection.h" ]; then
        echo wireapi/amq_client_connection.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_connection.c" ]; then
        echo wireapi/amq_client_connection.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_session_test.c" ]; then
        echo wireapi/amq_client_session_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_session.h" ]; then
        echo wireapi/amq_client_session.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_session.c" ]; then
        echo wireapi/amq_client_session.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel_test.c" ]; then
        echo wireapi/amq_client_channel_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel.h" ]; then
        echo wireapi/amq_client_channel.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel.c" ]; then
        echo wireapi/amq_client_channel.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel_table_test.c" ]; then
        echo wireapi/amq_client_channel_table_test.c>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel_table.h" ]; then
        echo wireapi/amq_client_channel_table.h>>_package.lst
    fi
    if [ -f "wireapi/amq_client_channel_table.c" ]; then
        echo wireapi/amq_client_channel_table.c>>_package.lst
    fi
    if [ -f "wireapi/stamp_generate" ]; then
        echo wireapi/stamp_generate>>_package.lst
    fi
    if [ -f "wireapi/boomakew.bat" ]; then
        echo wireapi/boomakew.bat>>_package.lst
    fi
    if [ -f "wireapi/configure" ]; then
        echo wireapi/configure>>_package.lst
    fi
    if [ -f "wireapi/Makefile.unix" ]; then
        echo wireapi/Makefile.unix>>_package.lst
    fi
    if [ -f "wireapi/boomake" ]; then
        echo wireapi/boomake>>_package.lst
    fi
    if [ -f "wireapi/configure.bat" ]; then
        echo wireapi/configure.bat>>_package.lst
    fi
    if [ -f "wireapi/Makefile.win32" ]; then
        echo wireapi/Makefile.win32>>_package.lst
    fi
    if [ -f "wireapi/boomake.bat" ]; then
        echo wireapi/boomake.bat>>_package.lst
    fi
    if [ -f "wireapi/amq_client.vcproj" ]; then
        echo wireapi/amq_client.vcproj>>_package.lst
    fi
    if [ -f "wireapi/libamq_wireapi.vcproj" ]; then
        echo wireapi/libamq_wireapi.vcproj>>_package.lst
    fi
    echo "Source package successfully generated">stamp_source
    echo "stamp_source">>_package.lst
    carp "Building OpenAMQ_WireAPI-$MY_VERSION-src.tar.gz..."
    zip  -rq _package.zip -@<_package.lst
    unzip -q _package.zip -d OpenAMQ_WireAPI-$MY_VERSION
    rm -f OpenAMQ_WireAPI-$MY_VERSION-src.tar.gz
    tar -cf  OpenAMQ_WireAPI-$MY_VERSION-src.tar OpenAMQ_WireAPI-$MY_VERSION
    gzip OpenAMQ_WireAPI-$MY_VERSION-src.tar
    rm -f OpenAMQ_WireAPI-$MY_VERSION-src.zip
    carp "Building OpenAMQ_WireAPI-$MY_VERSION-src.zip..."
    zip -lrmq OpenAMQ_WireAPI-$MY_VERSION-src.zip OpenAMQ_WireAPI-$MY_VERSION
    rm _package.zip
    rm _package.lst
    rm stamp_source
}

# ---------------------   CHECK ALL SOURCE FILES EXIST   ----------------------

a_check_all_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "wireapi.h" ]; then
        croak "wireapi.h is missing"
    fi
    if [ ! -f "amq_client.c" ]; then
        croak "amq_client.c is missing"
    fi
    if [ ! -f "amq_client.asl" ]; then
        croak "amq_client.asl is missing"
    fi
    if [ ! -f "amq_client_method.icl" ]; then
        croak "amq_client_method.icl is missing"
    fi
    if [ ! -f "amq_client_agent.smt" ]; then
        croak "amq_client_agent.smt is missing"
    fi
    if [ ! -f "amq_client_config.opf" ]; then
        croak "amq_client_config.opf is missing"
    fi
    if [ ! -f "amq_client_config.icl" ]; then
        croak "amq_client_config.icl is missing"
    fi
    if [ ! -f "amq_client_classes.icl" ]; then
        croak "amq_client_classes.icl is missing"
    fi
    if [ ! -f "amq_client_connection.icl" ]; then
        croak "amq_client_connection.icl is missing"
    fi
    if [ ! -f "amq_client_session.icl" ]; then
        croak "amq_client_session.icl is missing"
    fi
    if [ ! -f "amq_client_channel.icl" ]; then
        croak "amq_client_channel.icl is missing"
    fi
    if [ ! -f "amq_client_channel_table.icl" ]; then
        croak "amq_client_channel_table.icl is missing"
    fi
    if [ ! -f "amq_client_chrono.pal" ]; then
        croak "amq_client_chrono.pal is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_client_method_test.c" ]; then
        croak "amq_client_method_test.c is missing"
    fi
    if [ ! -f "amq_client_method.h" ]; then
        croak "amq_client_method.h is missing"
    fi
    if [ ! -f "amq_client_method.c" ]; then
        croak "amq_client_method.c is missing"
    fi
    if [ ! -f "amq_client_agent.h" ]; then
        croak "amq_client_agent.h is missing"
    fi
    if [ ! -f "amq_client_agent.c" ]; then
        croak "amq_client_agent.c is missing"
    fi
    if [ ! -f "amq_client_config_test.c" ]; then
        croak "amq_client_config_test.c is missing"
    fi
    if [ ! -f "amq_client_config.h" ]; then
        croak "amq_client_config.h is missing"
    fi
    if [ ! -f "amq_client_config.c" ]; then
        croak "amq_client_config.c is missing"
    fi
    if [ ! -f "amq_client_classes.h" ]; then
        croak "amq_client_classes.h is missing"
    fi
    if [ ! -f "amq_client_classes.c" ]; then
        croak "amq_client_classes.c is missing"
    fi
    if [ ! -f "amq_client_connection_test.c" ]; then
        croak "amq_client_connection_test.c is missing"
    fi
    if [ ! -f "amq_client_connection.h" ]; then
        croak "amq_client_connection.h is missing"
    fi
    if [ ! -f "amq_client_connection.c" ]; then
        croak "amq_client_connection.c is missing"
    fi
    if [ ! -f "amq_client_session_test.c" ]; then
        croak "amq_client_session_test.c is missing"
    fi
    if [ ! -f "amq_client_session.h" ]; then
        croak "amq_client_session.h is missing"
    fi
    if [ ! -f "amq_client_session.c" ]; then
        croak "amq_client_session.c is missing"
    fi
    if [ ! -f "amq_client_channel_test.c" ]; then
        croak "amq_client_channel_test.c is missing"
    fi
    if [ ! -f "amq_client_channel.h" ]; then
        croak "amq_client_channel.h is missing"
    fi
    if [ ! -f "amq_client_channel.c" ]; then
        croak "amq_client_channel.c is missing"
    fi
    if [ ! -f "amq_client_channel_table_test.c" ]; then
        croak "amq_client_channel_table_test.c is missing"
    fi
    if [ ! -f "amq_client_channel_table.h" ]; then
        croak "amq_client_channel_table.h is missing"
    fi
    if [ ! -f "amq_client_channel_table.c" ]; then
        croak "amq_client_channel_table.c is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
    if [ ! -f "amq_client.vcproj" ]; then
        croak "amq_client.vcproj is missing"
    fi
    if [ ! -f "libamq_wireapi.vcproj" ]; then
        croak "libamq_wireapi.vcproj is missing"
    fi
}

# -----------------------   CHECK BINARY FILES EXIST   ------------------------

a_check_binary_files_exist() {
:
    if [ ! -f "libamq_wireapi.a" ]; then
        croak "libamq_wireapi.a is missing"
    fi
    if [ ! -f "wireapi.h" ]; then
        croak "wireapi.h is missing"
    fi
    if [ ! -f "amq_client" ]; then
        croak "amq_client is missing"
    fi
    if [ ! -f "amq_client_agent.smt" ]; then
        croak "amq_client_agent.smt is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_client_method.h" ]; then
        croak "amq_client_method.h is missing"
    fi
    if [ ! -f "amq_client_agent.h" ]; then
        croak "amq_client_agent.h is missing"
    fi
    if [ ! -f "amq_client_config.h" ]; then
        croak "amq_client_config.h is missing"
    fi
    if [ ! -f "amq_client_classes.h" ]; then
        croak "amq_client_classes.h is missing"
    fi
    if [ ! -f "amq_client_connection.h" ]; then
        croak "amq_client_connection.h is missing"
    fi
    if [ ! -f "amq_client_session.h" ]; then
        croak "amq_client_session.h is missing"
    fi
    if [ ! -f "amq_client_channel.h" ]; then
        croak "amq_client_channel.h is missing"
    fi
    if [ ! -f "amq_client_channel_table.h" ]; then
        croak "amq_client_channel_table.h is missing"
    fi
}

# ------------------------   CHECK OPERATING CONTEXT   ------------------------

a_check_operating_context() {
:
    if [ -f ./stamp_stripped ]; then
        event=stripped
    elif [ -f ./stamp_source ]; then
        event=source
    else
        event=repository
    fi
}

# -----------------------   CHECK PROJECT FILES EXIST   -----------------------

a_check_project_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "amq_client.c" ]; then
        croak "amq_client.c is missing"
    fi
    if [ ! -f "amq_client.asl" ]; then
        croak "amq_client.asl is missing"
    fi
    if [ ! -f "amq_client_config.opf" ]; then
        croak "amq_client_config.opf is missing"
    fi
    if [ ! -f "amq_client_classes.icl" ]; then
        croak "amq_client_classes.icl is missing"
    fi
    if [ ! -f "amq_client_channel.icl" ]; then
        croak "amq_client_channel.icl is missing"
    fi
    if [ ! -f "amq_client_chrono.pal" ]; then
        croak "amq_client_chrono.pal is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
}

# -----------------------   CHECK SOURCE FILES EXIST   ------------------------

a_check_source_files_exist() {
:
    if [ ! -f "version.h" ]; then
        croak "version.h is missing"
    fi
    if [ ! -f "wireapi.h" ]; then
        croak "wireapi.h is missing"
    fi
    if [ ! -f "amq_client.c" ]; then
        croak "amq_client.c is missing"
    fi
    if [ ! -f "amq_client.asl" ]; then
        croak "amq_client.asl is missing"
    fi
    if [ ! -f "amq_client_method.icl" ]; then
        croak "amq_client_method.icl is missing"
    fi
    if [ ! -f "amq_client_agent.smt" ]; then
        croak "amq_client_agent.smt is missing"
    fi
    if [ ! -f "amq_client_config.opf" ]; then
        croak "amq_client_config.opf is missing"
    fi
    if [ ! -f "amq_client_config.icl" ]; then
        croak "amq_client_config.icl is missing"
    fi
    if [ ! -f "amq_client_classes.icl" ]; then
        croak "amq_client_classes.icl is missing"
    fi
    if [ ! -f "amq_client_connection.icl" ]; then
        croak "amq_client_connection.icl is missing"
    fi
    if [ ! -f "amq_client_session.icl" ]; then
        croak "amq_client_session.icl is missing"
    fi
    if [ ! -f "amq_client_channel.icl" ]; then
        croak "amq_client_channel.icl is missing"
    fi
    if [ ! -f "amq_client_channel_table.icl" ]; then
        croak "amq_client_channel_table.icl is missing"
    fi
    if [ ! -f "amq_client_chrono.pal" ]; then
        croak "amq_client_chrono.pal is missing"
    fi
    if [ ! -f "project.pdl" ]; then
        croak "project.pdl is missing"
    fi
    if [ ! -f "readme.txt" ]; then
        croak "readme.txt is missing"
    fi
    if [ ! -f "amq_client_method_test.c" ]; then
        croak "amq_client_method_test.c is missing"
    fi
    if [ ! -f "amq_client_method.h" ]; then
        croak "amq_client_method.h is missing"
    fi
    if [ ! -f "amq_client_method.c" ]; then
        croak "amq_client_method.c is missing"
    fi
    if [ ! -f "amq_client_agent.h" ]; then
        croak "amq_client_agent.h is missing"
    fi
    if [ ! -f "amq_client_agent.c" ]; then
        croak "amq_client_agent.c is missing"
    fi
    if [ ! -f "amq_client_config_test.c" ]; then
        croak "amq_client_config_test.c is missing"
    fi
    if [ ! -f "amq_client_config.h" ]; then
        croak "amq_client_config.h is missing"
    fi
    if [ ! -f "amq_client_config.c" ]; then
        croak "amq_client_config.c is missing"
    fi
    if [ ! -f "amq_client_classes.h" ]; then
        croak "amq_client_classes.h is missing"
    fi
    if [ ! -f "amq_client_classes.c" ]; then
        croak "amq_client_classes.c is missing"
    fi
    if [ ! -f "amq_client_connection_test.c" ]; then
        croak "amq_client_connection_test.c is missing"
    fi
    if [ ! -f "amq_client_connection.h" ]; then
        croak "amq_client_connection.h is missing"
    fi
    if [ ! -f "amq_client_connection.c" ]; then
        croak "amq_client_connection.c is missing"
    fi
    if [ ! -f "amq_client_session_test.c" ]; then
        croak "amq_client_session_test.c is missing"
    fi
    if [ ! -f "amq_client_session.h" ]; then
        croak "amq_client_session.h is missing"
    fi
    if [ ! -f "amq_client_session.c" ]; then
        croak "amq_client_session.c is missing"
    fi
    if [ ! -f "amq_client_channel_test.c" ]; then
        croak "amq_client_channel_test.c is missing"
    fi
    if [ ! -f "amq_client_channel.h" ]; then
        croak "amq_client_channel.h is missing"
    fi
    if [ ! -f "amq_client_channel.c" ]; then
        croak "amq_client_channel.c is missing"
    fi
    if [ ! -f "amq_client_channel_table_test.c" ]; then
        croak "amq_client_channel_table_test.c is missing"
    fi
    if [ ! -f "amq_client_channel_table.h" ]; then
        croak "amq_client_channel_table.h is missing"
    fi
    if [ ! -f "amq_client_channel_table.c" ]; then
        croak "amq_client_channel_table.c is missing"
    fi
    if [ ! -f "stamp_generate" ]; then
        croak "stamp_generate is missing"
    fi
    if [ ! -f "boomakew.bat" ]; then
        croak "boomakew.bat is missing"
    fi
    if [ ! -f "configure" ]; then
        croak "configure is missing"
    fi
    if [ ! -f "Makefile.unix" ]; then
        croak "Makefile.unix is missing"
    fi
    if [ ! -f "boomake" ]; then
        croak "boomake is missing"
    fi
    if [ ! -f "configure.bat" ]; then
        croak "configure.bat is missing"
    fi
    if [ ! -f "Makefile.win32" ]; then
        croak "Makefile.win32 is missing"
    fi
    if [ ! -f "boomake.bat" ]; then
        croak "boomake.bat is missing"
    fi
    if [ ! -f "amq_client.vcproj" ]; then
        croak "amq_client.vcproj is missing"
    fi
    if [ ! -f "libamq_wireapi.vcproj" ]; then
        croak "libamq_wireapi.vcproj is missing"
    fi
}

# -------------------------   INSTALL DELIVERABLES   --------------------------

a_install_deliverables() {
:
    carp "Installing OpenAMQ WireAPI into $_INSTALL_ROOT..."
    if [ ! -d "$_INSTALL_ROOT" ]; then
        if mkdir -p $_INSTALL_ROOT; then
            :
        else
            croak "Could not create directory \"$_INSTALL_ROOT\""
        fi
    fi
    mkdir -p $_INSTALL_ROOT/lib/
    [ "$BOOM_TRACE" ] && echo "cp libamq_wireapi.a $_INSTALL_ROOT/lib/"
    cp libamq_wireapi.a $_INSTALL_ROOT/lib/ || croak "\"cp libamq_wireapi.a $_INSTALL_ROOT/lib/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/lib/libamq_wireapi.a"
    chmod 0644 $_INSTALL_ROOT/lib/libamq_wireapi.a || croak "\"chmod 0644 $_INSTALL_ROOT/lib/libamq_wireapi.a\" failed"
    mkdir -p $_INSTALL_ROOT/include/
    [ "$BOOM_TRACE" ] && echo "cp wireapi.h $_INSTALL_ROOT/include/"
    cp wireapi.h $_INSTALL_ROOT/include/ || croak "\"cp wireapi.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/wireapi.h"
    chmod 0644 $_INSTALL_ROOT/include/wireapi.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/wireapi.h\" failed"
    mkdir -p $_INSTALL_ROOT/bin/
    [ "$BOOM_TRACE" ] && echo "cp amq_client $_INSTALL_ROOT/bin/"
    cp amq_client $_INSTALL_ROOT/bin/ || croak "\"cp amq_client $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0755 $_INSTALL_ROOT/bin/amq_client"
    chmod 0755 $_INSTALL_ROOT/bin/amq_client || croak "\"chmod 0755 $_INSTALL_ROOT/bin/amq_client\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_method.icl $_INSTALL_ROOT/bin/"
    cp amq_client_method.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_method.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_method.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_method.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_method.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_agent.smt $_INSTALL_ROOT/bin/"
    cp amq_client_agent.smt $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_agent.smt $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_agent.smt"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_agent.smt || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_agent.smt\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_classes.icl $_INSTALL_ROOT/bin/"
    cp amq_client_classes.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_classes.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_classes.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_classes.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_classes.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_connection.icl $_INSTALL_ROOT/bin/"
    cp amq_client_connection.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_connection.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_connection.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_connection.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_connection.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_session.icl $_INSTALL_ROOT/bin/"
    cp amq_client_session.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_session.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_session.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_session.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_session.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_channel.icl $_INSTALL_ROOT/bin/"
    cp amq_client_channel.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_channel.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_channel_table.icl $_INSTALL_ROOT/bin/"
    cp amq_client_channel_table.icl $_INSTALL_ROOT/bin/ || croak "\"cp amq_client_channel_table.icl $_INSTALL_ROOT/bin/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel_table.icl"
    chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel_table.icl || croak "\"chmod 0644 $_INSTALL_ROOT/bin/amq_client_channel_table.icl\" failed"
    mkdir -p $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/
    [ "$BOOM_TRACE" ] && echo "cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/"
    cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/ || croak "\"cp readme.txt $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/readme.txt"
    chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/readme.txt || croak "\"chmod 0644 $_INSTALL_ROOT/doc/OpenAMQ_WireAPI/readme.txt\" failed"
    mkdir -p $_INSTALL_ROOT/include/
    [ "$BOOM_TRACE" ] && echo "cp amq_client_method.h $_INSTALL_ROOT/include/"
    cp amq_client_method.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_method.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_method.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_method.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_method.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_agent.h $_INSTALL_ROOT/include/"
    cp amq_client_agent.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_agent.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_agent.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_agent.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_agent.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_config.h $_INSTALL_ROOT/include/"
    cp amq_client_config.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_config.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_config.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_config.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_config.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_classes.h $_INSTALL_ROOT/include/"
    cp amq_client_classes.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_classes.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_classes.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_classes.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_classes.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_connection.h $_INSTALL_ROOT/include/"
    cp amq_client_connection.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_connection.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_connection.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_connection.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_connection.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_session.h $_INSTALL_ROOT/include/"
    cp amq_client_session.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_session.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_session.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_session.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_session.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_channel.h $_INSTALL_ROOT/include/"
    cp amq_client_channel.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_channel.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_channel.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_channel.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_channel.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cp amq_client_channel_table.h $_INSTALL_ROOT/include/"
    cp amq_client_channel_table.h $_INSTALL_ROOT/include/ || croak "\"cp amq_client_channel_table.h $_INSTALL_ROOT/include/\" failed"
    [ "$BOOM_TRACE" ] && echo "chmod 0644 $_INSTALL_ROOT/include/amq_client_channel_table.h"
    chmod 0644 $_INSTALL_ROOT/include/amq_client_channel_table.h || croak "\"chmod 0644 $_INSTALL_ROOT/include/amq_client_channel_table.h\" failed"
    if [ -f ./installer ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./installer"
    sh ./installer || croak "\"sh ./installer\" failed"
    fi
}

# ----------------------   PRODUCE ALL GENERATED FILES   ----------------------

a_produce_all_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client.asl"
    gsl -q -quiet:1 amq_client.asl || croak "\"gsl -q -quiet:1 amq_client.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_method.icl"
    gsl -q -quiet:1 amq_client_method.icl || croak "\"gsl -q -quiet:1 amq_client_method.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_agent.smt"
    gsl -q -quiet:1 amq_client_agent.smt || croak "\"gsl -q -quiet:1 amq_client_agent.smt\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_config.opf"
    gsl -q -quiet:1 amq_client_config.opf || croak "\"gsl -q -quiet:1 amq_client_config.opf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_config.icl"
    gsl -q -quiet:1 amq_client_config.icl || croak "\"gsl -q -quiet:1 amq_client_config.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_classes.icl"
    gsl -q -quiet:1 amq_client_classes.icl || croak "\"gsl -q -quiet:1 amq_client_classes.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_connection.icl"
    gsl -q -quiet:1 amq_client_connection.icl || croak "\"gsl -q -quiet:1 amq_client_connection.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_session.icl"
    gsl -q -quiet:1 amq_client_session.icl || croak "\"gsl -q -quiet:1 amq_client_session.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_channel.icl"
    gsl -q -quiet:1 amq_client_channel.icl || croak "\"gsl -q -quiet:1 amq_client_channel.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_channel_table.icl"
    gsl -q -quiet:1 amq_client_channel_table.icl || croak "\"gsl -q -quiet:1 amq_client_channel_table.icl\" failed"
    rm -f wireapi.h
    [ "$BOOM_TRACE" ] && echo "cat amq_client_connection.h>>wireapi.h"
    cat amq_client_connection.h>>wireapi.h || croak "\"cat amq_client_connection.h>>wireapi.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat amq_client_session.h>>wireapi.h"
    cat amq_client_session.h>>wireapi.h || croak "\"cat amq_client_session.h>>wireapi.h\" failed"
    echo "Source files successfully generated">stamp_generate
}

# ------------------------   PRODUCE GENERATED FILES   ------------------------

a_produce_generated_files() {
:
    carp "Generating files..."
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client.asl"
    gsl -q -quiet:1 amq_client.asl || croak "\"gsl -q -quiet:1 amq_client.asl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_method.icl"
    gsl -q -quiet:1 amq_client_method.icl || croak "\"gsl -q -quiet:1 amq_client_method.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_agent.smt"
    gsl -q -quiet:1 amq_client_agent.smt || croak "\"gsl -q -quiet:1 amq_client_agent.smt\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_config.opf"
    gsl -q -quiet:1 amq_client_config.opf || croak "\"gsl -q -quiet:1 amq_client_config.opf\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_config.icl"
    gsl -q -quiet:1 amq_client_config.icl || croak "\"gsl -q -quiet:1 amq_client_config.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_classes.icl"
    gsl -q -quiet:1 amq_client_classes.icl || croak "\"gsl -q -quiet:1 amq_client_classes.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_connection.icl"
    gsl -q -quiet:1 amq_client_connection.icl || croak "\"gsl -q -quiet:1 amq_client_connection.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_session.icl"
    gsl -q -quiet:1 amq_client_session.icl || croak "\"gsl -q -quiet:1 amq_client_session.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_channel.icl"
    gsl -q -quiet:1 amq_client_channel.icl || croak "\"gsl -q -quiet:1 amq_client_channel.icl\" failed"
    [ "$BOOM_TRACE" ] && echo "gsl -q -quiet:1 amq_client_channel_table.icl"
    gsl -q -quiet:1 amq_client_channel_table.icl || croak "\"gsl -q -quiet:1 amq_client_channel_table.icl\" failed"
    rm -f wireapi.h
    [ "$BOOM_TRACE" ] && echo "cat amq_client_connection.h>>wireapi.h"
    cat amq_client_connection.h>>wireapi.h || croak "\"cat amq_client_connection.h>>wireapi.h\" failed"
    [ "$BOOM_TRACE" ] && echo "cat amq_client_session.h>>wireapi.h"
    cat amq_client_session.h>>wireapi.h || croak "\"cat amq_client_session.h>>wireapi.h\" failed"
    echo "Source files successfully generated">stamp_generate
}

# -----------------------   REMOVE GENERATED BINARIES   -----------------------

a_remove_generated_binaries() {
:
    rm -f libamq_wireapi.a
    rm -f amq_client
    rm -f amq_client.o
    rm -f amq_client_method_test_test.o
    rm -f amq_client_method_test_test
    rm -f amq_client_method.o
    rm -f amq_client_agent.o
    rm -f amq_client_config_test_test.o
    rm -f amq_client_config_test_test
    rm -f amq_client_config.o
    rm -f amq_client_classes.o
    rm -f amq_client_connection_test_test.o
    rm -f amq_client_connection_test_test
    rm -f amq_client_connection.o
    rm -f amq_client_session_test_test.o
    rm -f amq_client_session_test_test
    rm -f amq_client_session.o
    rm -f amq_client_channel_test_test.o
    rm -f amq_client_channel_test_test
    rm -f amq_client_channel.o
    rm -f amq_client_channel_table_test_test.o
    rm -f amq_client_channel_table_test_test
    rm -f amq_client_channel_table.o
    rm -f amq_client_method_test.o
    rm -f amq_client_method_test
    rm -f amq_client_method.o
    rm -f amq_client_agent.o
    rm -f amq_client_config_test.o
    rm -f amq_client_config_test
    rm -f amq_client_config.o
    rm -f amq_client_classes.o
    rm -f amq_client_connection_test.o
    rm -f amq_client_connection_test
    rm -f amq_client_connection.o
    rm -f amq_client_session_test.o
    rm -f amq_client_session_test
    rm -f amq_client_session.o
    rm -f amq_client_channel_test.o
    rm -f amq_client_channel_test
    rm -f amq_client_channel.o
    rm -f amq_client_channel_table_test.o
    rm -f amq_client_channel_table_test
    rm -f amq_client_channel_table.o
}

# -----------------------   REMOVE GENERATED SOURCES   ------------------------

a_remove_generated_sources() {
:
    rm -f wireapi.h
    rm -f amq_client_method.icl
    rm -f amq_client_agent.smt
    rm -f amq_client_config.icl
    rm -f amq_client_connection.icl
    rm -f amq_client_session.icl
    rm -f amq_client_channel_table.icl
    rm -f amq_client_method_test.c
    rm -f amq_client_method.h
    rm -f amq_client_method.c
    rm -f amq_client_agent.h
    rm -f amq_client_agent.c
    rm -f amq_client_config_test.c
    rm -f amq_client_config.h
    rm -f amq_client_config.c
    rm -f amq_client_classes.h
    rm -f amq_client_classes.c
    rm -f amq_client_connection_test.c
    rm -f amq_client_connection.h
    rm -f amq_client_connection.c
    rm -f amq_client_session_test.c
    rm -f amq_client_session.h
    rm -f amq_client_session.c
    rm -f amq_client_channel_test.c
    rm -f amq_client_channel.h
    rm -f amq_client_channel.c
    rm -f amq_client_channel_table_test.c
    rm -f amq_client_channel_table.h
    rm -f amq_client_channel_table.c
    rm -f stamp_generate
    rm -f configure
    rm -f Makefile.unix
    rm -f configure.bat
    rm -f Makefile.win32
    rm -f amq_client.vcproj
    rm -f libamq_wireapi.vcproj
    rm -f OpenAMQ_WireAPI_*.zip
    rm -f OpenAMQ_WireAPI_*.tar.gz
}

# ------------------------   REPORT HELP INFORMATION   ------------------------

a_report_help_information() {
:
    echo "The commands you can currently use on this project are:"
    echo ""
    eval "actions_$state"
}

# ------------------------   REPORT PROJECT VERSION   -------------------------

a_report_project_version() {
:
    echo "OpenAMQ_WireAPI-1.4c1"
}

# -------------------------   RUN REGRESSION TESTS   --------------------------

a_run_regression_tests() {
:
    carp "Running regression tests..."
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_method_test"
    else
        RUN_COMMAND="./amq_client_method_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_config_test"
    else
        RUN_COMMAND="./amq_client_config_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_connection_test"
    else
        RUN_COMMAND="./amq_client_connection_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_session_test"
    else
        RUN_COMMAND="./amq_client_session_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_channel_test"
    else
        RUN_COMMAND="./amq_client_channel_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    if [ "$BOOM_TRACE" ]; then
        RUN_COMMAND="./amq_client_channel_table_test"
    else
        RUN_COMMAND="./amq_client_channel_table_test -q"
    fi
    [ "$BOOM_TRACE" ] && echo "$RUN_COMMAND"
    $RUN_COMMAND || croak "\"$RUN_COMMAND\" failed"
    #   Run local selftest script if present
    if [ -f ./selftest ]; then
    [ "$BOOM_TRACE" ] && echo "sh ./selftest"
    sh ./selftest || croak "\"sh ./selftest\" failed"
    fi
}

# ----------------------   USE SOURCE CONTROL REVISION   ----------------------

a_use_source_control_revision() {
:
    if [ -d .svn ]; then
        SVN_REVISION="`svn info | awk '/^Revision:/ { print $2 }'`"
    else
        SVN_REVISION="svn"
    fi
    MY_VERSION=${MY_VERSION}-${SVN_REVISION}
}

actions_initial() {
    return
}

actions_initial_check() {
    return
}

actions_repository() {
echo "build:"
    echo "  From the raw project sources, produces all generated files, and"
    echo "    compiles all source files."
echo "compile:"
    echo "  From the raw project sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the raw project sources, removes all generated"
    echo "    source and binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
echo "distrib:"
    echo "  Creates a source distribution for the project.  Note that binary"
    echo "    distributions can only be created at the product level."
echo "distsrc:"
    echo "  Equivalent to distrib, provided for compatibility."
echo "distrev:"
    echo "  Creates a source distribution for the project.  Builds distribution"
    echo "    packages based on source control version number. Note that binary"
    echo "    distributions can only be created at the product level."
actions_default
    return
}

actions_source() {
echo "build:"
    echo "  From the packaged sources, compiles all source files without any"
    echo "    code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
echo "regen:"
    echo "  Produces generated files required for building using the"
    echo "    current model."
echo "allgen:"
    echo "  Produces all generated files."
actions_default
    return
}

actions_stripped() {
echo "build:"
    echo "  From the stripped-down packaged sources, compiles all source files"
    echo "    without any code generation."
echo "clean:"
    echo "  When working with the packaged sources, removes all generated"
    echo "    binary files from the project directory."
actions_default
    return
}

actions_default() {
echo "install:"
    echo "  Installs deliverables into the final or temporary install tree."
    echo "    This action is only valid after a successful build."
echo "test:"
    echo "  Runs regression tests for the project."
echo "help:"
    echo "  Shows a list of the commands allowed on the project."
echo "version:"
    echo "  Show project version."
    return
}

#   State machine starts here
#
firsttime=true
while [ "$1" -o "$firsttime" ]; do
  firsttime=
  state=initial
  event=ok
  debug=
  export state event debug
  while [ -n "$state" ]; do
    if [ "$inherit_state" ]; then
        check_state=$inherit_state
        inherit_state=
    else
        check_state=$state
    fi
    case "$check_state" in
    initial)
        if [ -n "$debug" ]; then
            echo "State: initial"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        ok)
            if [ -n "$debug" ]; then
                echo "Event: ok"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check operating context"
            fi
            if [ -z "$exception" ]; then
                a_check_operating_context
            fi
            state=initial_check
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    initial_check)
        if [ -n "$debug" ]; then
            echo "State: initial check"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        repository)
            if [ -n "$debug" ]; then
                echo "Event: repository"
            fi
            event=
            exception=
            state=repository
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        source)
            if [ -n "$debug" ]; then
                echo "Event: source"
            fi
            event=
            exception=
            state=source
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        stripped)
            if [ -n "$debug" ]; then
                echo "Event: stripped"
            fi
            event=
            exception=
            state=stripped
            if [ -n "$exception" ]; then
                continue
            fi
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    repository)
        if [ -n "$debug" ]; then
            echo "State: repository"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        compile)
            if [ -n "$debug" ]; then
                echo "Event: compile"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated sources"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_sources
            fi
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrib)
            if [ -n "$debug" ]; then
                echo "Event: distrib"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distsrc)
            if [ -n "$debug" ]; then
                echo "Event: distsrc"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        distrev)
            if [ -n "$debug" ]; then
                echo "Event: distrev"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$debug" ]; then
                echo "Action: check all source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_all_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: use source control revision"
            fi
            if [ -z "$exception" ]; then
                a_use_source_control_revision
            fi
            if [ -n "$debug" ]; then
                echo "Action: build source packages"
            fi
            if [ -z "$exception" ]; then
                a_build_source_packages
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    source)
        if [ -n "$debug" ]; then
            echo "State: source"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check source files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_source_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        regen)
            if [ -n "$debug" ]; then
                echo "Event: regen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        allgen)
            if [ -n "$debug" ]; then
                echo "Event: allgen"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check project files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_project_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: produce all generated files"
            fi
            if [ -z "$exception" ]; then
                a_produce_all_generated_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    stripped)
        if [ -n "$debug" ]; then
            echo "State: stripped"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        build)
            if [ -n "$debug" ]; then
                echo "Event: build"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: build binary files"
            fi
            if [ -z "$exception" ]; then
                a_build_binary_files
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        clean)
            if [ -n "$debug" ]; then
                echo "Event: clean"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: remove generated binaries"
            fi
            if [ -z "$exception" ]; then
                a_remove_generated_binaries
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            inherit_state=default
        ;;
        esac
    ;;
    default)
        if [ -n "$debug" ]; then
            echo "State: default"
        fi
        case "$event" in
        "")
            if [ -n "$debug" ]; then
                echo "Get event from user"
            fi
            if [ "$1" ]; then
                event=$1
                shift
            else
                event=empty
            fi
            continue
        ;;
        install)
            if [ -n "$debug" ]; then
                echo "Event: install"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: install deliverables"
            fi
            if [ -z "$exception" ]; then
                a_install_deliverables
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        test)
            if [ -n "$debug" ]; then
                echo "Event: test"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: check binary files exist"
            fi
            if [ -z "$exception" ]; then
                a_check_binary_files_exist
            fi
            if [ -n "$debug" ]; then
                echo "Action: run regression tests"
            fi
            if [ -z "$exception" ]; then
                a_run_regression_tests
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        help)
            if [ -n "$debug" ]; then
                echo "Event: help"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        version)
            if [ -n "$debug" ]; then
                echo "Event: version"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report project version"
            fi
            if [ -z "$exception" ]; then
                a_report_project_version
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        empty)
            if [ -n "$debug" ]; then
                echo "Event: empty"
            fi
            event=
            exception=
            if [ -n "$debug" ]; then
                echo "Action: report help information"
            fi
            if [ -z "$exception" ]; then
                a_report_help_information
            fi
            if [ -n "$1" -a -z "$exception" ]; then
                continue 2
            fi
            state=
        ;;
        *)
            echo "Unknown command - use one of:"
            echo ""
            eval "actions_$state"
            exit 1
        ;;
        esac
    ;;
    esac
  done
done

<?xml?>
<!--
    Generated by the iPR Resource Compiler 1.3 on 2010/10/06.
    Copyright (c) 1998-2009 iMatix Corporation
 -->
<class
    name      = "zyre_static"
    comment   = "Resource class for zyre_static"
    version   = "1.0"
    script    = "icl_gen"
    >
<doc>
    Provides compiled resources, i.e. external files that are shipped with
    the application.
</doc>

<inherit class = "icl_base" />
<import class = "ipr_bucket" />

<private name = "header">
typedef struct {
    qbyte size;
    byte  data [1];
} zyre_static_resource_t;
</private>

<private name = "header">
static struct {
    qbyte size;
    byte  data [648];
} res_zyre_base_cfg = {
    648,
    {
      0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x3f, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 
      0x3c, 0x21, 0x2d, 0x2d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
      0x20, 0x5a, 0x79, 0x72, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 
      0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6e, 
      0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 
      0x69, 0x6c, 0x65, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
      0x20, 0x2a, 0x2a, 0x20, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x45, 
      0x44, 0x49, 0x54, 0x20, 0x54, 0x48, 0x49, 0x53, 0x20, 0x46, 0x49, 0x4c, 
      0x45, 0x20, 0x2a, 0x2a, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
      0x20, 0x20, 0x54, 0x6f, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 
      0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 
      0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 
      0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x66, 
      0x6f, 0x72, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 
      0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 
      0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 
      0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 
      0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x64, 0x69, 0x74, 0x20, 0x22, 0x7a, 0x79, 
      0x72, 0x65, 0x2e, 0x63, 0x66, 0x67, 0x22, 0x2c, 0x20, 0x6f, 0x72, 0x20, 
      0x70, 0x61, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 
      0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 
      0x6e, 0x73, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6f, 
      0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 
      0x64, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 
      0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3e, 
      0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x54, 0x68, 
      0x65, 0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 
      0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 
      0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61, 
      0x63, 0x6b, 0x2d, 0x65, 0x6e, 0x64, 0x20, 0x41, 0x4d, 0x51, 0x50, 0x20, 
      0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 
      0x2d, 0x2d, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x73, 0x65, 0x63, 
      0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 
      0x20, 0x22, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x0a, 0x20, 0x20, 
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x75, 0x73, 0x65, 0x72, 0x20, 
      0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x22, 0x67, 0x75, 0x65, 0x73, 
      0x74, 0x22, 0x20, 0x20, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 
      0x64, 0x20, 0x3d, 0x20, 0x22, 0x67, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 
      0x20, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x3d, 0x20, 0x22, 0x6e, 
      0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x20, 
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x75, 0x73, 0x65, 0x72, 0x20, 
      0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x22, 0x73, 0x75, 0x70, 0x65, 
      0x72, 0x22, 0x20, 0x20, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 
      0x64, 0x20, 0x3d, 0x20, 0x22, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x20, 
      0x20, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x3d, 0x20, 0x22, 0x73, 
      0x75, 0x70, 0x65, 0x72, 0x22, 0x20, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x20, 
      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x75, 0x73, 0x65, 0x72, 0x20, 
      0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x22, 0x70, 0x65, 0x65, 0x72, 
      0x69, 0x6e, 0x67, 0x22, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 
      0x64, 0x20, 0x3d, 0x20, 0x22, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 
      0x22, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x3d, 0x20, 0x22, 0x73, 
      0x75, 0x70, 0x65, 0x72, 0x22, 0x20, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x20, 
      0x20, 0x20, 0x3c, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 
      0x3e, 0x0a, 0x3c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3e, 0x0a
    }
};
</private>

<private name = "header">
static struct {
    char *filename;
    void *resource;
} zyre_static_table [1] = {
    { "zyre_base.cfg", &res_zyre_base_cfg }
};
</private>

<method name = "get" return = "bucket">
    <doc>
    Returns specified resource file as a bucket of data or NULL if the
    resource file is not known.  Note that resources are limited in size
    to the maximum size of a bucket (IPR_BUCKET_MAX).
    </doc>
    <argument name = "filename" type = "char *">Name of resource to find</argument>
    <declare name = "bucket" type = "ipr_bucket_t *">Returned bucket</declare>
    <local>
    zyre_static_resource_t
        *resource;                      //  Found resource
    uint
        index;                          //  Index into resource table
    </local>
    //
    resource = NULL;
    for (index = 0; index < tblsize (zyre_static_table); index++) {
        if (streq (zyre_static_table [index].filename, filename)) {
            resource = zyre_static_table [index].resource;
            break;
        }
    }
    if (resource) {
        bucket = ipr_bucket_new (0);
        bucket->data = resource->data;
        bucket->cur_size = resource->size;
    }
    else
        bucket = NULL;
</method>

<method name = "selftest">
    <local>
    ipr_bucket_t
        *bucket;
    </local>
    //  Check we can find zyre_base.cfg
    bucket = zyre_static_get ("zyre_base.cfg");
    assert (bucket);
    ipr_bucket_destroy (&bucket);
</method>

</class>
